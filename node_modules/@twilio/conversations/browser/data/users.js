"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _map = require("babel-runtime/core-js/map");

var _map2 = _interopRequireDefault(_map);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var user_1 = require("../user");
var util_1 = require("../util");
/**
 * @classdesc Container for known users
 * @fires Users#userUpdated
 */

var Users = function (_events_1$EventEmitte) {
    (0, _inherits3.default)(Users, _events_1$EventEmitte);

    function Users(services) {
        (0, _classCallCheck3.default)(this, Users);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Users.__proto__ || (0, _getPrototypeOf2.default)(Users)).call(this));

        _this.services = services;
        _this.fifoStack = [];
        _this.fifoStackMaxLength = 100;
        _this.myself = new user_1.User(null, null, _this.services);
        _this.myself.on('updated', function (args) {
            return _this.emit('userUpdated', args);
        });
        _this.myself.on('userSubscribed', function () {
            return _this.emit('userSubscribed', _this.myself);
        });
        _this.myself.on('userUnsubscribed', function () {
            _this.emit('userUnsubscribed', _this.myself);
            _this.myself._ensureFetched();
        });
        _this.services = services;
        _this.subscribedUsers = new _map2.default();
        _this.userUrlPromise = _this.services.session.getSessionLinks().then(function (links) {
            _this.userUrl = links.usersUrl;
            return _this.userUrl;
        });
        _this.services.session.getMaxUserInfosToSubscribe().then(function (maxUserInfosToSubscribe) {
            _this.fifoStackMaxLength = maxUserInfosToSubscribe;
        });
        _this.services.session.getUsersData().then(function (data) {
            _this.myself.identity = data.identity;
            _this.myself.entityName = data.user;
            return _this.myself._ensureFetched();
        });
        return _this;
    }

    (0, _createClass3.default)(Users, [{
        key: "handleUnsubscribeUser",
        value: function handleUnsubscribeUser(user) {
            if (this.subscribedUsers.has(user.identity)) {
                this.subscribedUsers.delete(user.identity);
            }
            var foundItemIndex = -1;
            var foundItem = this.fifoStack.find(function (item, index) {
                if (item == user.identity) {
                    foundItemIndex = index;
                    return true;
                }
                return false;
            });
            if (foundItem) {
                this.fifoStack.splice(foundItemIndex, 1);
            }
            this.emit('userUnsubscribed', user);
        }
    }, {
        key: "handleSubscribeUser",
        value: function handleSubscribeUser(user) {
            if (this.subscribedUsers.has(user.identity)) {
                return;
            }
            if (this.fifoStack.length >= this.fifoStackMaxLength) {
                this.subscribedUsers.get(this.fifoStack.shift()).unsubscribe();
            }
            this.fifoStack.push(user.identity);
            this.subscribedUsers.set(user.identity, user);
            this.emit('userSubscribed', user);
        }
        /**
         * Gets user, if it's in subscribed list - then return the user object from it,
         * if not - then subscribes and adds user to the FIFO stack
         * @returns {Promise<User>} Fully initialized user
         */

    }, {
        key: "getUser",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(identity) {
                var _this2 = this;

                var entityName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var user;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.services.session.getUsersData();

                            case 2:
                                _context.next = 4;
                                return this.myself._ensureFetched();

                            case 4:
                                if (!(identity == this.myself.identity)) {
                                    _context.next = 6;
                                    break;
                                }

                                return _context.abrupt("return", this.myself);

                            case 6:
                                user = this.subscribedUsers.get(identity);

                                if (user) {
                                    _context.next = 18;
                                    break;
                                }

                                if (entityName) {
                                    _context.next = 12;
                                    break;
                                }

                                _context.next = 11;
                                return this.getSyncUniqueName(identity);

                            case 11:
                                entityName = _context.sent;

                            case 12:
                                user = new user_1.User(identity, entityName, this.services);
                                user.on('updated', function (args) {
                                    return _this2.emit('userUpdated', args);
                                });
                                user.on('userSubscribed', function () {
                                    return _this2.handleSubscribeUser(user);
                                });
                                user.on('userUnsubscribed', function () {
                                    return _this2.handleUnsubscribeUser(user);
                                });
                                _context.next = 18;
                                return user._ensureFetched();

                            case 18:
                                return _context.abrupt("return", user);

                            case 19:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getUser(_x2) {
                return _ref.apply(this, arguments);
            }

            return getUser;
        }()
        /**
         * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}
         */

    }, {
        key: "getSubscribedUsers",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var users;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.services.session.getUsersData();

                            case 2:
                                _context2.next = 4;
                                return this.myself._ensureFetched();

                            case 4:
                                users = [this.myself];

                                this.subscribedUsers.forEach(function (user) {
                                    return users.push(user);
                                });
                                return _context2.abrupt("return", users);

                            case 7:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getSubscribedUsers() {
                return _ref2.apply(this, arguments);
            }

            return getSubscribedUsers;
        }()
        /**
         * @returns {Promise<string>} User's sync unique name
         */

    }, {
        key: "getSyncUniqueName",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(identity) {
                var url, response;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                url = new util_1.UriBuilder(this.userUrl).path(identity).build();
                                _context3.next = 3;
                                return this.services.network.get(url);

                            case 3:
                                response = _context3.sent;
                                return _context3.abrupt("return", response.body.sync_unique_name);

                            case 5:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getSyncUniqueName(_x3) {
                return _ref3.apply(this, arguments);
            }

            return getSyncUniqueName;
        }()
    }]);
    return Users;
}(events_1.EventEmitter);

exports.Users = Users;