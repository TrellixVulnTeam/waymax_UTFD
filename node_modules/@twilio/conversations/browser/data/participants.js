"use strict";

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var participant_1 = require("../participant");
var logger_1 = require("../logger");
var log = logger_1.Logger.scope('Participants');
/**
 * @classdesc Represents the collection of participants for the conversation
 * @fires Participants#participantJoined
 * @fires Participants#participantLeft
 * @fires Participants#participantUpdated
 */

var Participants = function (_events_1$EventEmitte) {
    (0, _inherits3.default)(Participants, _events_1$EventEmitte);

    function Participants(conversation, services, participants) {
        (0, _classCallCheck3.default)(this, Participants);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Participants.__proto__ || (0, _getPrototypeOf2.default)(Participants)).call(this));

        _this.services = services;
        _this.conversation = conversation;
        _this.participants = participants;
        return _this;
    }

    (0, _createClass3.default)(Participants, [{
        key: "unsubscribe",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var entity;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!this.rosterEntityPromise) {
                                    _context.next = 6;
                                    break;
                                }

                                _context.next = 3;
                                return this.rosterEntityPromise;

                            case 3:
                                entity = _context.sent;

                                entity.close();
                                this.rosterEntityPromise = null;

                            case 6:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function unsubscribe() {
                return _ref.apply(this, arguments);
            }

            return unsubscribe;
        }()
    }, {
        key: "subscribe",
        value: function subscribe(rosterObjectName) {
            var _this2 = this;

            return this.rosterEntityPromise = this.rosterEntityPromise || this.services.syncClient.map({ id: rosterObjectName, mode: 'open_existing' }).then(function (rosterMap) {
                rosterMap.on('itemAdded', function (args) {
                    log.debug(_this2.conversation.sid + ' itemAdded: ' + args.item.key);
                    _this2.upsertParticipant(args.item.key, args.item.data).then(function (participant) {
                        _this2.emit('participantJoined', participant);
                    });
                });
                rosterMap.on('itemRemoved', function (args) {
                    log.debug(_this2.conversation.sid + ' itemRemoved: ' + args.key);
                    var participantSid = args.key;
                    if (!_this2.participants.has(participantSid)) {
                        return;
                    }
                    var leftParticipant = _this2.participants.get(participantSid);
                    _this2.participants.delete(participantSid);
                    _this2.emit('participantLeft', leftParticipant);
                });
                rosterMap.on('itemUpdated', function (args) {
                    log.debug(_this2.conversation.sid + ' itemUpdated: ' + args.item.key);
                    _this2.upsertParticipant(args.item.key, args.item.data);
                });
                var participantsPromises = [];
                var that = _this2;
                var rosterMapHandler = function rosterMapHandler(paginator) {
                    paginator.items.forEach(function (item) {
                        participantsPromises.push(that.upsertParticipant(item.key, item.data));
                    });
                    return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;
                };
                return rosterMap.getItems().then(rosterMapHandler).then(function () {
                    return _promise2.default.all(participantsPromises);
                }).then(function () {
                    return rosterMap;
                });
            }).catch(function (err) {
                _this2.rosterEntityPromise = null;
                if (_this2.services.syncClient.connectionState != 'disconnected') {
                    log.error('Failed to get roster object for conversation', _this2.conversation.sid, err);
                }
                log.debug('ERROR: Failed to get roster object for conversation', _this2.conversation.sid, err);
                throw err;
            });
        }
    }, {
        key: "upsertParticipant",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(participantSid, data) {
                var _this3 = this;

                var participant;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                participant = this.participants.get(participantSid);

                                if (!participant) {
                                    _context2.next = 3;
                                    break;
                                }

                                return _context2.abrupt("return", participant._update(data));

                            case 3:
                                participant = new participant_1.Participant(this.services, this.conversation, data, participantSid);
                                this.participants.set(participantSid, participant);
                                participant.on('updated', function (args) {
                                    return _this3.emit('participantUpdated', args);
                                });
                                return _context2.abrupt("return", participant);

                            case 7:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function upsertParticipant(_x, _x2) {
                return _ref2.apply(this, arguments);
            }

            return upsertParticipant;
        }()
        /**
         * @returns {Promise<Array<Participant>>} returns list of participants {@see Participant}
         */

    }, {
        key: "getParticipants",
        value: function getParticipants() {
            var _this4 = this;

            return this.rosterEntityPromise.then(function () {
                var participants = [];
                _this4.participants.forEach(function (participant) {
                    return participants.push(participant);
                });
                return participants;
            });
        }
        /**
         * Get participant by SID from conversation
         * @returns {Promise<Participant>}
         */

    }, {
        key: "getParticipantBySid",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(participantSid) {
                var _this5 = this;

                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                return _context3.abrupt("return", this.rosterEntityPromise.then(function () {
                                    var participant = _this5.participants.get(participantSid);
                                    if (!participant) {
                                        throw new Error('Participant with SID ' + participantSid + ' was not found');
                                    }
                                    return participant;
                                }));

                            case 1:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getParticipantBySid(_x3) {
                return _ref3.apply(this, arguments);
            }

            return getParticipantBySid;
        }()
        /**
         * Get participant by identity from conversation
         * @returns {Promise<Participant>}
         */

    }, {
        key: "getParticipantByIdentity",
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(identity) {
                var _this6 = this;

                var foundParticipant;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                foundParticipant = null;
                                return _context4.abrupt("return", this.rosterEntityPromise.then(function () {
                                    _this6.participants.forEach(function (participant) {
                                        if (participant.identity === identity) {
                                            foundParticipant = participant;
                                        }
                                    });
                                    if (!foundParticipant) {
                                        throw new Error('Participant with identity ' + identity + ' was not found');
                                    }
                                    return foundParticipant;
                                }));

                            case 2:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function getParticipantByIdentity(_x4) {
                return _ref4.apply(this, arguments);
            }

            return getParticipantByIdentity;
        }()
        /**
         * Add a chat participant to the conversation
         * @returns {Promise<any>}
         */

    }, {
        key: "add",
        value: function add(identity, attributes) {
            return this.services.session.addCommand('addMemberV2', {
                channelSid: this.conversation.sid,
                attributes: (0, _stringify2.default)(attributes),
                username: identity
            });
        }
        /**
         * Add a non-chat participant to the conversation.
         *
         * @param proxyAddress
         * @param address
         * @param attributes
         * @returns {Promise<any>}
         */

    }, {
        key: "addNonChatParticipant",
        value: function addNonChatParticipant(proxyAddress, address) {
            var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this.services.session.addCommand('addNonChatParticipant', {
                conversationSid: this.conversation.sid,
                proxyAddress: proxyAddress,
                attributes: (0, _stringify2.default)(attributes),
                address: address
            });
        }
        /**
         * Invites user to the conversation
         * User can choose either to join or not
         * @returns {Promise<any>}
         */

    }, {
        key: "invite",
        value: function invite(identity) {
            return this.services.session.addCommand('inviteMember', {
                channelSid: this.conversation.sid,
                username: identity
            });
        }
        /**
         * Remove participant from conversation by Identity
         * @returns {Promise<any>}
         */

    }, {
        key: "removeByIdentity",
        value: function removeByIdentity(identity) {
            return this.services.session.addCommand('removeMember', {
                channelSid: this.conversation.sid,
                username: identity
            });
        }
        /**
         * Remove participant from conversation by sid
         * @returns {Promise<any>}
         */

    }, {
        key: "removeBySid",
        value: function removeBySid(sid) {
            return this.services.session.addCommand('removeMember', {
                channelSid: this.conversation.sid,
                memberSid: sid
            });
        }
    }]);
    return Participants;
}(events_1.EventEmitter);

exports.Participants = Participants;
/**
 * Fired when participant joined conversation
 * @event Participants#participantJoined
 * @type {Participant}
 */
/**
 * Fired when participant left conversation
 * @event Participants#participantLeft
 * @type {Participant}
 */
/**
 * Fired when participant updated
 * @event Participants#participantUpdated
 * @type {Object}
 * @property {Participant} participant - Updated Participant
 * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons
 */