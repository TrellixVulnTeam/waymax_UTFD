"use strict";

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _metadata = require("babel-runtime/core-js/reflect/metadata");

var _metadata2 = _interopRequireDefault(_metadata);

var _defineProperty = require("babel-runtime/core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _getOwnPropertyDescriptor = require("babel-runtime/core-js/object/get-own-property-descriptor");

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,
        d;
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    }return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof3.default)(Reflect)) === "object" && typeof _metadata2.default === "function") return (0, _metadata2.default)(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var util_1 = require("./util");
var logger_1 = require("./logger");
var media_1 = require("./media");
var aggregateddeliveryreceipt_1 = require("./aggregateddeliveryreceipt");
var twilio_sdk_type_validator_1 = require("twilio-sdk-type-validator");
var restpaginator_1 = require("./restpaginator");
var detaileddeliveryreceipt_1 = require("./detaileddeliveryreceipt");
var log = logger_1.Logger.scope('Message');
/**
 * @classdesc A Message represents a Message in a Conversation.
 * @property {String} author - The name of the user that sent Message
 * @property {String|null} subject - Message subject. Used only in email conversations
 * @property {String} body - The body of the Message. Is null if Message is Media Message
 * @property {any} attributes - Message custom attributes
 * @property {Conversation} conversation - Conversation Message belongs to
 * @property {Date} dateCreated - When Message was created
 * @property {Date} dateUpdated - When Message was updated
 * @property {Number} index - Index of Message in the Conversation's messages list
 *  By design of the conversations system the message indices may have arbitrary gaps between them,
 *  that does not necessarily mean they were deleted or otherwise modified - just that
 *  messages may have non-contiguous indices even if they are sent immediately one after another.
 *
 *  Trying to use indices for some calculations is going to be unreliable.
 *
 *  To calculate the number of unread messages it is better to use the read horizon API.
 *  See {@link Conversation#getUnreadMessagesCount} for details.
 *
 * @property {String} lastUpdatedBy - Identity of the last user that updated Message
 * @property {Media} media - Contains Media information (if present)
 * @property {String} participantSid - Authoring Participant's server-assigned unique identifier
 * @property {String} sid - The server-assigned unique identifier for Message
 * @property {'text' | 'media'} type - Type of message: 'text' or 'media'
 * @property {AggregatedDeliveryReceipt | null} aggregatedDeliveryReceipt - Aggregated information about
 *   Message delivery statuses across all {@link Participant}s of a {@link Conversation}.
 * @fires Message#updated
 */

var Message = function (_events_1$EventEmitte) {
    (0, _inherits3.default)(Message, _events_1$EventEmitte);

    /**
     * The update reason for <code>updated</code> event emitted on Message
     * @typedef {('body' | 'lastUpdatedBy' | 'dateCreated' | 'dateUpdated' | 'attributes' | 'author' |
     *   'deliveryReceipt' | 'subject')} Message#UpdateReason
     */
    function Message(conversation, services, index, data) {
        (0, _classCallCheck3.default)(this, Message);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Message.__proto__ || (0, _getPrototypeOf2.default)(Message)).call(this));

        _this.conversation = conversation;
        _this.services = services;
        _this.state = {
            sid: data.sid,
            index: index,
            author: data.author == null ? null : data.author,
            subject: data.subject == null ? null : data.subject,
            body: data.text,
            timestamp: data.timestamp ? new Date(data.timestamp) : null,
            dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,
            lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,
            attributes: util_1.parseAttributes(data.attributes, "Got malformed attributes for the message " + data.sid, log),
            type: data.type ? data.type : 'text',
            media: data.type && data.type === 'media' && data.media ? new media_1.Media(data.media, _this.services) : null,
            participantSid: data.memberSid == null ? null : data.memberSid,
            aggregatedDeliveryReceipt: data.delivery ? new aggregateddeliveryreceipt_1.AggregatedDeliveryReceipt(data.delivery) : null
        };
        return _this;
    }

    (0, _createClass3.default)(Message, [{
        key: "_update",
        value: function _update(data) {
            var updateReasons = [];
            if ((data.text || typeof data.text === 'string') && data.text !== this.state.body) {
                this.state.body = data.text;
                updateReasons.push('body');
            }
            if (data.subject && data.subject !== this.state.subject) {
                this.state.subject = data.subject;
                updateReasons.push('subject');
            }
            if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {
                this.state.lastUpdatedBy = data.lastUpdatedBy;
                updateReasons.push('lastUpdatedBy');
            }
            if (data.author && data.author !== this.state.author) {
                this.state.author = data.author;
                updateReasons.push('author');
            }
            if (data.dateUpdated && new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
                this.state.dateUpdated = new Date(data.dateUpdated);
                updateReasons.push('dateUpdated');
            }
            if (data.timestamp && new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {
                this.state.timestamp = new Date(data.timestamp);
                updateReasons.push('dateCreated');
            }
            var updatedAttributes = util_1.parseAttributes(data.attributes, "Got malformed attributes for the message " + this.sid, log);
            if (!util_1.isDeepEqual(this.state.attributes, updatedAttributes)) {
                this.state.attributes = updatedAttributes;
                updateReasons.push('attributes');
            }
            var updatedAggregatedDelivery = data.delivery;
            var currentAggregatedDelivery = this.state.aggregatedDeliveryReceipt;
            var isUpdatedAggregateDeliveryValid = !!updatedAggregatedDelivery && !!updatedAggregatedDelivery.total && !!updatedAggregatedDelivery.delivered && !!updatedAggregatedDelivery.failed && !!updatedAggregatedDelivery.read && !!updatedAggregatedDelivery.sent && !!updatedAggregatedDelivery.undelivered;
            if (isUpdatedAggregateDeliveryValid) {
                if (!currentAggregatedDelivery) {
                    this.state.aggregatedDeliveryReceipt = new aggregateddeliveryreceipt_1.AggregatedDeliveryReceipt(updatedAggregatedDelivery);
                    updateReasons.push('deliveryReceipt');
                } else if (!currentAggregatedDelivery._isEquals(updatedAggregatedDelivery)) {
                    currentAggregatedDelivery._update(updatedAggregatedDelivery);
                    updateReasons.push('deliveryReceipt');
                }
            }
            if (updateReasons.length > 0) {
                this.emit('updated', { message: this, updateReasons: updateReasons });
            }
        }
        /**
         * Get Participant who is author of the Message
         * @returns {Promise<Participant>}
         */

    }, {
        key: "getParticipant",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var _this2 = this;

                var participant, errorMesage;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                participant = null;

                                if (!this.state.participantSid) {
                                    _context.next = 5;
                                    break;
                                }

                                _context.next = 4;
                                return this.conversation.getParticipantBySid(this.participantSid).catch(function () {
                                    log.debug('Participant with sid "' + _this2.participantSid + '" not found for message ' + _this2.sid);
                                    return null;
                                });

                            case 4:
                                participant = _context.sent;

                            case 5:
                                if (!(!participant && this.state.author)) {
                                    _context.next = 9;
                                    break;
                                }

                                _context.next = 8;
                                return this.conversation.getParticipantByIdentity(this.state.author).catch(function () {
                                    log.debug('Participant with identity "' + _this2.author + '" not found for message ' + _this2.sid);
                                    return null;
                                });

                            case 8:
                                participant = _context.sent;

                            case 9:
                                if (!participant) {
                                    _context.next = 11;
                                    break;
                                }

                                return _context.abrupt("return", participant);

                            case 11:
                                errorMesage = 'Participant with ';

                                if (this.state.participantSid) {
                                    errorMesage += 'SID \'' + this.state.participantSid + '\' ';
                                }
                                if (this.state.author) {
                                    if (this.state.participantSid) {
                                        errorMesage += 'or ';
                                    }
                                    errorMesage += 'identity \'' + this.state.author + '\' ';
                                }
                                if (errorMesage === 'Participant with ') {
                                    errorMesage = 'Participant ';
                                }
                                errorMesage += 'was not found';
                                throw new Error(errorMesage);

                            case 17:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getParticipant() {
                return _ref.apply(this, arguments);
            }

            return getParticipant;
        }()
        /**
         * Get delivery receipts of the message
         * @returns {Promise<DetailedDeliveryReceipt[]>}
         */

    }, {
        key: "getDetailedDeliveryReceipts",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var paginator, detailedDeliveryReceipts;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this._getDetailedDeliveryReceiptsPaginator();

                            case 2:
                                paginator = _context2.sent;
                                detailedDeliveryReceipts = [];

                            case 4:
                                if (!true) {
                                    _context2.next = 13;
                                    break;
                                }

                                detailedDeliveryReceipts = [].concat((0, _toConsumableArray3.default)(detailedDeliveryReceipts), (0, _toConsumableArray3.default)(paginator.items));

                                if (paginator.hasNextPage) {
                                    _context2.next = 8;
                                    break;
                                }

                                return _context2.abrupt("break", 13);

                            case 8:
                                _context2.next = 10;
                                return paginator.nextPage();

                            case 10:
                                paginator = _context2.sent;
                                _context2.next = 4;
                                break;

                            case 13:
                                return _context2.abrupt("return", detailedDeliveryReceipts);

                            case 14:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getDetailedDeliveryReceipts() {
                return _ref2.apply(this, arguments);
            }

            return getDetailedDeliveryReceipts;
        }()
        /**
         * Remove the Message.
         * @returns {Promise<Message>}
         */

    }, {
        key: "remove",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return this.services.session.addCommand('deleteMessage', {
                                    channelSid: this.conversation.sid,
                                    messageIdx: this.index.toString()
                                });

                            case 2:
                                return _context3.abrupt("return", this);

                            case 3:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function remove() {
                return _ref3.apply(this, arguments);
            }

            return remove;
        }()
        /**
         * Edit message body.
         * @param {String} body - new body of Message.
         * @returns {Promise<Message>}
         */

    }, {
        key: "updateBody",
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(body) {
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                _context4.next = 2;
                                return this.services.session.addCommand('editMessage', {
                                    channelSid: this.conversation.sid,
                                    messageIdx: this.index.toString(),
                                    text: body
                                });

                            case 2:
                                return _context4.abrupt("return", this);

                            case 3:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function updateBody(_x) {
                return _ref4.apply(this, arguments);
            }

            return updateBody;
        }()
        /**
         * Edit message attributes.
         * @param {any} attributes new attributes for Message.
         * @returns {Promise<Message>}
         */

    }, {
        key: "updateAttributes",
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(attributes) {
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return this.services.session.addCommand('editMessageAttributes', {
                                    channelSid: this.conversation.sid,
                                    messageIdx: this.index,
                                    attributes: (0, _stringify2.default)(attributes)
                                });

                            case 2:
                                return _context5.abrupt("return", this);

                            case 3:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function updateAttributes(_x2) {
                return _ref5.apply(this, arguments);
            }

            return updateAttributes;
        }()
    }, {
        key: "_getDetailedDeliveryReceiptsPaginator",
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(options) {
                var _this3 = this;

                var _a, _b, links, messagesReceiptsUrl, url, response;

                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.next = 2;
                                return this.services.session.getSessionLinks();

                            case 2:
                                links = _context6.sent;
                                messagesReceiptsUrl = links.messagesReceiptsUrl.replace('%s', this.conversation.sid).replace('%s', this.sid);
                                url = new util_1.UriBuilder(messagesReceiptsUrl).arg('PageToken', (_a = options) === null || _a === void 0 ? void 0 : _a.pageToken).arg('PageSize', (_b = options) === null || _b === void 0 ? void 0 : _b.pageSize).build();
                                _context6.next = 7;
                                return this.services.network.get(url);

                            case 7:
                                response = _context6.sent;
                                return _context6.abrupt("return", new restpaginator_1.RestPaginator(response.body.delivery_receipts.map(function (x) {
                                    return new detaileddeliveryreceipt_1.DetailedDeliveryReceipt(x);
                                }), function (pageToken, pageSize) {
                                    return _this3._getDetailedDeliveryReceiptsPaginator({ pageToken: pageToken, pageSize: pageSize });
                                }, response.body.meta.previous_token, response.body.meta.next_token));

                            case 9:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function _getDetailedDeliveryReceiptsPaginator(_x3) {
                return _ref6.apply(this, arguments);
            }

            return _getDetailedDeliveryReceiptsPaginator;
        }()
    }, {
        key: "sid",
        get: function get() {
            return this.state.sid;
        }
    }, {
        key: "author",
        get: function get() {
            return this.state.author;
        }
    }, {
        key: "subject",
        get: function get() {
            return this.state.subject;
        }
    }, {
        key: "body",
        get: function get() {
            if (this.type === 'media') {
                return null;
            }
            return this.state.body;
        }
    }, {
        key: "dateUpdated",
        get: function get() {
            return this.state.dateUpdated;
        }
    }, {
        key: "index",
        get: function get() {
            return this.state.index;
        }
    }, {
        key: "lastUpdatedBy",
        get: function get() {
            return this.state.lastUpdatedBy;
        }
    }, {
        key: "dateCreated",
        get: function get() {
            return this.state.timestamp;
        }
    }, {
        key: "attributes",
        get: function get() {
            return this.state.attributes;
        }
    }, {
        key: "type",
        get: function get() {
            return this.state.type;
        }
    }, {
        key: "media",
        get: function get() {
            return this.state.media;
        }
    }, {
        key: "participantSid",
        get: function get() {
            return this.state.participantSid;
        }
    }, {
        key: "aggregatedDeliveryReceipt",
        get: function get() {
            return this.state.aggregatedDeliveryReceipt;
        }
    }]);
    return Message;
}(events_1.EventEmitter);

__decorate([twilio_sdk_type_validator_1.validateTypesAsync('string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", _promise2.default)], Message.prototype, "updateBody", null);
__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", _promise2.default)], Message.prototype, "updateAttributes", null);
exports.Message = Message;
/**
 * Fired when the Message's properties or body has been updated.
 * @event Message#updated
 * @type {Object}
 * @property {Message} message - Updated Message
 * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons
 */