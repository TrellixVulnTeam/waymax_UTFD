"use strict";

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _map = require("babel-runtime/core-js/map");

var _map2 = _interopRequireDefault(_map);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var sessionerror_1 = require("../sessionerror");

var ConsumptionReportRequest = function ConsumptionReportRequest() {
    (0, _classCallCheck3.default)(this, ConsumptionReportRequest);
};

var ConsumptionReportEntry = function ConsumptionReportEntry() {
    (0, _classCallCheck3.default)(this, ConsumptionReportEntry);
};

var ReadHorizonPromise = function ReadHorizonPromise() {
    (0, _classCallCheck3.default)(this, ReadHorizonPromise);
};
/**
 * @classdesc Provides read horizon management functionality
 */


var ReadHorizon = function () {
    function ReadHorizon(services) {
        (0, _classCallCheck3.default)(this, ReadHorizon);

        this.services = services;
        this.readHorizonRequests = new _map2.default();
        this.readHorizonUpdateTimer = null;
    }

    (0, _createClass3.default)(ReadHorizon, [{
        key: "getReportInterval",
        value: function getReportInterval() {
            return this.services.session.getConsumptionReportInterval().then(function (seconds) {
                return seconds * 1000;
            });
        }
    }, {
        key: "delayedSendReadHorizon",
        value: function delayedSendReadHorizon(delay) {
            var _this = this;

            if (this.readHorizonUpdateTimer !== null) {
                return;
            }
            this.sendConsumptionReport(true);
            this.readHorizonUpdateTimer = setTimeout(function () {
                _this.sendConsumptionReport(false);
            }, delay);
        }
    }, {
        key: "sendConsumptionReport",
        value: function sendConsumptionReport(keepTimer) {
            var _this2 = this;

            var reports = [];
            var promises = new _map2.default();
            this.readHorizonRequests.forEach(function (request, conversationSid) {
                reports.push(request.entry);
                promises.set(conversationSid, request.promises);
            });
            if (reports.length > 0) {
                this.services.session.addCommand('consumptionReportV2', { report: reports }).then(function (response) {
                    return _this2.processConsumptionReportResponse(response, promises);
                }).catch(function (err) {
                    return _this2.processConsumptionReportError(err, promises);
                });
            }
            if (!keepTimer) {
                this.readHorizonUpdateTimer = null;
            }
            this.readHorizonRequests.clear();
        }
    }, {
        key: "processConsumptionReportResponse",
        value: function processConsumptionReportResponse(response, promises) {
            if (response && response.report && Array.isArray(response.report) && response.report.length > 0) {
                response.report.forEach(function (entry) {
                    var responseEntry = entry;
                    if (promises.has(responseEntry.channelSid)) {
                        var unreadMessagesCount = null;
                        if (typeof responseEntry.unreadMessagesCount !== 'undefined' && responseEntry.unreadMessagesCount != null) {
                            unreadMessagesCount = responseEntry.unreadMessagesCount;
                        }
                        promises.get(responseEntry.channelSid).forEach(function (promise) {
                            return promise.resolve(unreadMessagesCount);
                        });
                        promises.delete(responseEntry.channelSid);
                    }
                });
            }
            this.processConsumptionReportError(new sessionerror_1.SessionError('Error while setting LastReadMessageIndex', null), promises);
        }
    }, {
        key: "processConsumptionReportError",
        value: function processConsumptionReportError(err, promises) {
            promises.forEach(function (conversationPromises) {
                return conversationPromises.forEach(function (promise) {
                    return promise.reject(err);
                });
            });
        }
        /**
         * Updates read horizon value without any checks
         */

    }, {
        key: "updateLastReadMessageIndexForConversation",
        value: function updateLastReadMessageIndexForConversation(conversationSid, messageIdx) {
            var _this3 = this;

            return new _promise2.default(function (resolve, reject) {
                _this3.addPendingConsumptionHorizonRequest(conversationSid, { channelSid: conversationSid, messageIdx: messageIdx }, { resolve: resolve, reject: reject });
                _this3.getReportInterval().then(function (delay) {
                    return _this3.delayedSendReadHorizon(delay);
                });
            });
        }
        /**
         * Move read horizon forward
         */

    }, {
        key: "advanceLastReadMessageIndexForConversation",
        value: function advanceLastReadMessageIndexForConversation(conversationSid, messageIdx, currentConversationLastReadIndex) {
            var _this4 = this;

            var currentHorizon = this.readHorizonRequests.get(conversationSid);
            return new _promise2.default(function (resolve, reject) {
                if (currentHorizon && currentHorizon.entry) {
                    if (currentHorizon.entry.messageIdx >= messageIdx) {
                        _this4.addPendingConsumptionHorizonRequest(conversationSid, currentHorizon.entry, { resolve: resolve, reject: reject });
                    } else {
                        _this4.addPendingConsumptionHorizonRequest(conversationSid, { channelSid: conversationSid, messageIdx: messageIdx }, { resolve: resolve, reject: reject });
                    }
                } else {
                    if (currentConversationLastReadIndex !== null && messageIdx < currentConversationLastReadIndex) {
                        _this4.addPendingConsumptionHorizonRequest(conversationSid, { channelSid: conversationSid, messageIdx: currentConversationLastReadIndex }, { resolve: resolve, reject: reject });
                    } else {
                        _this4.addPendingConsumptionHorizonRequest(conversationSid, { channelSid: conversationSid, messageIdx: messageIdx }, { resolve: resolve, reject: reject });
                    }
                }
                _this4.getReportInterval().then(function (delay) {
                    return _this4.delayedSendReadHorizon(delay);
                });
            });
        }
    }, {
        key: "addPendingConsumptionHorizonRequest",
        value: function addPendingConsumptionHorizonRequest(conversationSid, entry, promise) {
            if (this.readHorizonRequests.has(conversationSid)) {
                var request = this.readHorizonRequests.get(conversationSid);
                request.entry = entry;
                request.promises.push(promise);
            } else {
                this.readHorizonRequests.set(conversationSid, { entry: entry, promises: [promise] });
            }
        }
    }]);
    return ReadHorizon;
}();

exports.ReadHorizon = ReadHorizon;