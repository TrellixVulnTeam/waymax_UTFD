declare namespace PushNotification {
    type Type = 'twilio.conversations.new_message' | 'twilio.conversations.added_to_conversation' | 'twilio.conversations.removed_from_conversation';
    interface Descriptor {
        title: string;
        body: string;
        sound: string;
        badge: number;
        action: string;
        type: PushNotification.Type;
        data: Object;
    }
}
/**
 * @classdesc Push notification representation within Conversations Client
 * @property {String} [action] - Notification action (`click_action` in FCM/GCM terms and `category` in APN terms)
 * @property {Number} [badge] - Number for the badge
 * @property {String} body - Notification text
 * @property {PushNotification#ConversationData} data - Additional Conversation data
 * @property {String} [sound] - Notification sound
 * @property {String} [title] - Notification title
 * @property {PushNotification#NotificationType} type - Notification type
 */
declare class PushNotification {
    readonly title: string;
    readonly body: string;
    readonly sound: string;
    readonly badge: number;
    readonly action: string;
    readonly type: PushNotification.Type;
    readonly data: Object;
    /**
     * Conversation push notification type
     * @typedef {('twilio.conversations.new_message' | 'twilio.conversations.added_to_conversation'
     | 'twilio.conversations.removed_from_conversation')} PushNotification#NotificationType
     */
    /**
     * Additional Conversations data for given Push Notification
     * @typedef {Object} PushNotification#ConversationData
     * @property {String} [conversationSid] - SID of Conversation
     * @property {Number} [messageIndex] - Index of Message in Conversation
     * @property {String} [messageSid] - SID of Message
     */
    /**
     * @param {PushNotification.Descriptor} data - initial data for PushNotification
     */
    constructor(data: PushNotification.Descriptor);
}
export { PushNotification };
