/// <reference types="node" />
import { EventEmitter } from 'events';
import { ParticipantDescriptor, Participant } from '../participant';
import { Conversation } from '../conversation';
import { SyncMap, SyncClient } from 'twilio-sync';
import { Users } from './users';
import { Session } from '../session';
export interface ParticipantsServices {
    session: Session;
    syncClient: SyncClient;
    users: Users;
}
/**
 * @classdesc Represents the collection of participants for the conversation
 * @fires Participants#participantJoined
 * @fires Participants#participantLeft
 * @fires Participants#participantUpdated
 */
declare class Participants extends EventEmitter {
    services: ParticipantsServices;
    rosterEntityPromise: Promise<SyncMap>;
    readonly conversation: Conversation;
    readonly participants: Map<string, Participant>;
    constructor(conversation: Conversation, services: ParticipantsServices, participants: Map<string, Participant>);
    unsubscribe(): Promise<void>;
    subscribe(rosterObjectName: string): Promise<SyncMap>;
    upsertParticipant(participantSid: string, data: ParticipantDescriptor): Promise<Participant>;
    /**
     * @returns {Promise<Array<Participant>>} returns list of participants {@see Participant}
     */
    getParticipants(): Promise<Array<Participant>>;
    /**
     * Get participant by SID from conversation
     * @returns {Promise<Participant>}
     */
    getParticipantBySid(participantSid: string): Promise<Participant>;
    /**
     * Get participant by identity from conversation
     * @returns {Promise<Participant>}
     */
    getParticipantByIdentity(identity: string): Promise<Participant>;
    /**
     * Add a chat participant to the conversation
     * @returns {Promise<any>}
     */
    add(identity: string, attributes: any): Promise<any>;
    /**
     * Add a non-chat participant to the conversation.
     *
     * @param proxyAddress
     * @param address
     * @param attributes
     * @returns {Promise<any>}
     */
    addNonChatParticipant(proxyAddress: string, address: string, attributes?: Record<string, any>): Promise<any>;
    /**
     * Invites user to the conversation
     * User can choose either to join or not
     * @returns {Promise<any>}
     */
    invite(identity: string): Promise<any>;
    /**
     * Remove participant from conversation by Identity
     * @returns {Promise<any>}
     */
    removeByIdentity(identity: string): Promise<any>;
    /**
     * Remove participant from conversation by sid
     * @returns {Promise<any>}
     */
    removeBySid(sid: string): Promise<any>;
}
export { Participants };
/**
 * Fired when participant joined conversation
 * @event Participants#participantJoined
 * @type {Participant}
 */
/**
 * Fired when participant left conversation
 * @event Participants#participantLeft
 * @type {Participant}
 */
/**
 * Fired when participant updated
 * @event Participants#participantUpdated
 * @type {Object}
 * @property {Participant} participant - Updated Participant
 * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons
 */
