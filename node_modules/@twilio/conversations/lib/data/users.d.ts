/// <reference types="node" />
import { EventEmitter } from 'events';
import { User } from '../user';
import { Network } from '../services/network';
import { Session } from '../session';
import { SyncClient } from 'twilio-sync';
export interface UsersServices {
    session: Session;
    network: Network;
    syncClient: SyncClient;
}
/**
 * @classdesc Container for known users
 * @fires Users#userUpdated
 */
declare class Users extends EventEmitter {
    private services;
    private subscribedUsers;
    private fifoStack;
    private fifoStackMaxLength;
    private userUrlPromise;
    private userUrl;
    readonly myself: User;
    constructor(services: UsersServices);
    private handleUnsubscribeUser;
    private handleSubscribeUser;
    /**
     * Gets user, if it's in subscribed list - then return the user object from it,
     * if not - then subscribes and adds user to the FIFO stack
     * @returns {Promise<User>} Fully initialized user
     */
    getUser(identity: string, entityName?: string): Promise<User>;
    /**
     * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}
     */
    getSubscribedUsers(): Promise<Array<User>>;
    /**
     * @returns {Promise<string>} User's sync unique name
     */
    private getSyncUniqueName;
}
export { Users };
