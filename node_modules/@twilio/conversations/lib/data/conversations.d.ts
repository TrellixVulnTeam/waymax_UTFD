/// <reference types="node" />
import { EventEmitter } from 'events';
import { Conversation } from '../conversation';
import { SyncClient } from 'twilio-sync';
import { Session } from '../session';
import { SyncList } from '../synclist';
import { Users } from './users';
import { Network } from '../services/network';
import { TypingIndicator } from '../services/typingindicator';
import { ReadHorizon } from '../services/readhorizon';
import { McsClient } from 'twilio-mcs-client';
import { Deferred } from '../util/deferred';
export interface ConversationsServices {
    session: Session;
    syncClient: SyncClient;
    syncList: SyncList;
    users: Users;
    typingIndicator: TypingIndicator;
    readHorizon: ReadHorizon;
    network: Network;
    mcsClient: McsClient;
}
/**
 * Represents conversations collection
 * {@see Conversation}
 */
declare class Conversations extends EventEmitter {
    private services;
    readonly conversations: Map<string, Conversation>;
    private readonly thumbstones;
    private syncListFetched;
    readonly syncListRead: Deferred<boolean>;
    constructor(services: ConversationsServices);
    private getMap;
    /**
     * Add conversation to server
     * @private
     * @returns {Promise<Conversation>} Conversation
     */
    addConversation(options: any): Promise<Conversation>;
    /**
     * Fetch conversations list and instantiate all necessary objects
     */
    fetchConversations(): void;
    private _wrapPaginator;
    getConversations(args: any): Promise<any>;
    getConversation(sid: string): Promise<Conversation>;
    getConversationByUniqueName(uniqueName: string): Promise<Conversation>;
    getWhisperConversation(sid: string): Promise<Conversation>;
    private upsertConversation;
    private onConversationRemoved;
    private registerForEvents;
}
declare namespace Conversations {
    type DataSource = 'sync' | 'chat' | 'synclist';
}
export { Conversation, Conversations };
