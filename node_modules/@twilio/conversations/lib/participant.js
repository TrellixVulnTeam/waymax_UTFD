"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const util_1 = require("./util");
const logger_1 = require("./logger");
const twilio_sdk_type_validator_1 = require("twilio-sdk-type-validator");
const log = logger_1.Logger.scope('Participant');
/**
 * @classdesc A Participant represents a remote Client in a Conversation.
 * @property {any} attributes - Object with custom attributes for Participant
 * @property {Conversation} conversation - The Conversation the remote Client is a Participant of
 * @property {Date} dateCreated - The Date this Participant was created
 * @property {Date} dateUpdated - The Date this Participant was last updated
 * @property {String} identity - The identity of the remote Client
 * @property {Boolean} isTyping - Whether or not this Participant is currently typing
   * @property {Number|null} lastReadMessageIndex - Latest read Message index by this Participant.
 * Note that just retrieving messages on a client endpoint does not mean that messages are read,
 * please consider reading about [Read Horizon feature]{@link https://www.twilio.com/docs/api/chat/guides/consumption-horizon}
 * to find out how to mark messages as read.
 * @property {Date} lastReadTimestamp - Date when Participant has updated his read horizon
 * @property {String} sid - The server-assigned unique identifier for the Participant
 * @property {Participant#Type} type - The type of Participant
 * @fires Participant#typingEnded
 * @fires Participant#typingStarted
 * @fires Participant#updated
 */
class Participant extends events_1.EventEmitter {
    /**
     * The update reason for <code>updated</code> event emitted on Participant
     * @typedef {('attributes' | 'dateCreated' | 'dateUpdated' | 'roleSid' |
      'lastReadMessageIndex' | 'lastReadTimestamp')} Participant#UpdateReason
     */
    /**
     * The type of Participant
     * @typedef {('chat' | 'sms' | 'whatsapp')} Participant#Type
     */
    constructor(services, conversation, data, sid) {
        super();
        this.conversation = conversation;
        this.services = services;
        this.state = {
            attributes: util_1.parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for participant: ' + sid, log),
            dateCreated: data.dateCreated ? util_1.parseTime(data.dateCreated) : null,
            dateUpdated: data.dateCreated ? util_1.parseTime(data.dateUpdated) : null,
            sid: sid,
            typingTimeout: null,
            isTyping: false,
            identity: data.identity || null,
            roleSid: data.roleSid || null,
            lastReadMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,
            lastReadTimestamp: data.lastConsumptionTimestamp ? util_1.parseTime(data.lastConsumptionTimestamp) : null,
            type: data.type || 'chat',
            userInfo: data.userInfo
        };
        if (!data.identity && !data.type) {
            throw new Error('Received invalid Participant object from server: Missing identity or type of Participant.');
        }
    }
    get sid() { return this.state.sid; }
    get attributes() { return this.state.attributes; }
    get dateCreated() { return this.state.dateCreated; }
    get dateUpdated() { return this.state.dateUpdated; }
    get identity() { return this.state.identity; }
    get isTyping() { return this.state.isTyping; }
    get lastReadMessageIndex() { return this.state.lastReadMessageIndex; }
    get lastReadTimestamp() { return this.state.lastReadTimestamp; }
    get roleSid() { return this.state.roleSid; }
    get type() { return this.state.type; }
    /**
     * Private method used to start or reset the typing indicator timeout (with event emitting)
     * @private
     */
    _startTyping(timeout) {
        clearTimeout(this.state.typingTimeout);
        this.state.isTyping = true;
        this.emit('typingStarted', this);
        this.conversation.emit('typingStarted', this);
        this.state.typingTimeout = setTimeout(() => this._endTyping(), timeout);
        return this;
    }
    /**
     * Private method function used to stop typing indicator (with event emitting)
     * @private
     */
    _endTyping() {
        if (!this.state.typingTimeout) {
            return;
        }
        this.state.isTyping = false;
        this.emit('typingEnded', this);
        this.conversation.emit('typingEnded', this);
        clearInterval(this.state.typingTimeout);
        this.state.typingTimeout = null;
    }
    /**
     * Private method function used update local object's property roleSid with new value
     * @private
     */
    _update(data) {
        let updateReasons = [];
        let updateAttributes = util_1.parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for participant: ' + this.state.sid, log);
        if (data.attributes && !util_1.isDeepEqual(this.state.attributes, updateAttributes)) {
            this.state.attributes = updateAttributes;
            updateReasons.push('attributes');
        }
        let updatedDateUpdated = util_1.parseTime(data.dateUpdated);
        if (data.dateUpdated &&
            updatedDateUpdated.getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
            this.state.dateUpdated = updatedDateUpdated;
            updateReasons.push('dateUpdated');
        }
        let updatedDateCreated = util_1.parseTime(data.dateCreated);
        if (data.dateCreated &&
            updatedDateCreated.getTime() !== (this.state.dateCreated && this.state.dateCreated.getTime())) {
            this.state.dateCreated = updatedDateCreated;
            updateReasons.push('dateCreated');
        }
        if (data.roleSid && this.state.roleSid !== data.roleSid) {
            this.state.roleSid = data.roleSid;
            updateReasons.push('roleSid');
        }
        if ((Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null)
            && this.state.lastReadMessageIndex !== data.lastConsumedMessageIndex) {
            this.state.lastReadMessageIndex = data.lastConsumedMessageIndex;
            updateReasons.push('lastReadMessageIndex');
        }
        if (data.lastConsumptionTimestamp) {
            let lastReadTimestamp = new Date(data.lastConsumptionTimestamp);
            if (!this.state.lastReadTimestamp ||
                this.state.lastReadTimestamp.getTime() !== lastReadTimestamp.getTime()) {
                this.state.lastReadTimestamp = lastReadTimestamp;
                updateReasons.push('lastReadTimestamp');
            }
        }
        if (updateReasons.length > 0) {
            this.emit('updated', { participant: this, updateReasons: updateReasons });
        }
        return this;
    }
    /**
     * Gets User for this participant and subscribes to it. Supported only for <code>chat</code> type of Participants
     * @returns {Promise<User>}
     */
    async getUser() {
        if (this.type != 'chat') {
            throw new Error('Getting User is not supported for this Participant type: ' + this.type);
        }
        return this.services.users.getUser(this.state.identity, this.state.userInfo);
    }
    /**
     * Remove Participant from the Conversation.
     * @returns {Promise<void>}
     */
    async remove() {
        return this.conversation.removeParticipant(this);
    }
    /**
     * Edit participant attributes.
     * @param {any} attributes new attributes for Participant.
     * @returns {Promise<Participant>}
     */
    async updateAttributes(attributes) {
        await this.services.session.addCommand('editMemberAttributes', {
            channelSid: this.conversation.sid,
            memberSid: this.sid,
            attributes: JSON.stringify(attributes)
        });
        return this;
    }
}
__decorate([
    twilio_sdk_type_validator_1.validateTypesAsync(['string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Participant.prototype, "updateAttributes", null);
exports.Participant = Participant;
/**
 * Fired when Participant started to type.
 * @event Participant#typingStarted
 * @type {Participant}
 */
/**
 * Fired when Participant ended to type.
 * @event Participant#typingEnded
 * @type {Participant}
 */
/**
 * Fired when Participant's fields has been updated.
 * @event Participant#updated
 * @type {Object}
 * @property {Participant} participant - Updated Participant
 * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons
 */
