[{"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/index.js":"1","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/serviceWorker.js":"2","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/App.js":"3","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/ConversationsApp.js":"4","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/Conversation.js":"5","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/ConversationsList.js":"6","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/HeaderItem.js":"7","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/LoginPage.jsx":"8","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/ConversationsMessages.js":"9","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/MessageBubble.js":"10","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/utils/class-name.js":"11","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/ChatIcon.js":"12","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/WhatsappIcon.js":"13"},{"size":458,"mtime":1637479418635,"results":"14","hashOfConfig":"15"},{"size":4812,"mtime":1637479418635,"results":"16","hashOfConfig":"15"},{"size":319,"mtime":1637479418628,"results":"17","hashOfConfig":"15"},{"size":6952,"mtime":1637504105142,"results":"18","hashOfConfig":"15"},{"size":5746,"mtime":1637479418628,"results":"19","hashOfConfig":"15"},{"size":1811,"mtime":1637479418630,"results":"20","hashOfConfig":"15"},{"size":237,"mtime":1637479418631,"results":"21","hashOfConfig":"15"},{"size":2415,"mtime":1637501340572,"results":"22","hashOfConfig":"15"},{"size":798,"mtime":1637479418630,"results":"23","hashOfConfig":"15"},{"size":4106,"mtime":1637479418633,"results":"24","hashOfConfig":"15"},{"size":96,"mtime":1637479418635,"results":"25","hashOfConfig":"15"},{"size":2400,"mtime":1637479418628,"results":"26","hashOfConfig":"15"},{"size":1465,"mtime":1637479418633,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1wnh3j3",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/index.js",[],["57","58"],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/serviceWorker.js",[],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/App.js",[],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/ConversationsApp.js",["59"],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/Conversation.js",["60"],"import React, { Component } from 'react';\nimport './assets/Conversation.css';\nimport MessageBubble from './MessageBubble'\nimport Dropzone from 'react-dropzone';\nimport styles from './assets/Conversation.module.css'\nimport {Button, Form, Icon, Input} from \"antd\";\nimport ConversationsMessages from \"./ConversationsMessages\";\nimport PropTypes from \"prop-types\";\n\nclass Conversation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        newMessage: '',\n        conversationProxy: props.conversationProxy,\n        messages: [],\n        loadingState: 'initializing',\n        boundConversations: new Set()\n    };\n  }\n\n  loadMessagesFor = (thisConversation) => {\n    if (this.state.conversationProxy === thisConversation) {\n        thisConversation.getMessages()\n            .then(messagePaginator => {\n                if (this.state.conversationProxy === thisConversation) {\n                    this.setState({ messages: messagePaginator.items, loadingState: 'ready' });\n                }\n            })\n            .catch(err => {\n                console.error(\"Couldn't fetch messages IMPLEMENT RETRY\", err);\n                this.setState({ loadingState: \"failed\" });\n            });\n    }\n  };\n\n  componentDidMount = () => {\n      if (this.state.conversationProxy) {\n        this.loadMessagesFor(this.state.conversationProxy);\n\n        if (!this.state.boundConversations.has(this.state.conversationProxy)) {\n            let newConversation = this.state.conversationProxy;\n            newConversation.on('messageAdded', m => this.messageAdded(m, newConversation));\n            this.setState({boundConversations: new Set([...this.state.boundConversations, newConversation])});\n        }\n      }\n  }\n\n  componentDidUpdate = (oldProps, oldState) => {\n    if (this.state.conversationProxy !== oldState.conversationProxy) {\n        this.loadMessagesFor(this.state.conversationProxy);\n\n        if (!this.state.boundConversations.has(this.state.conversationProxy)) {\n            let newConversation = this.state.conversationProxy;\n            newConversation.on('messageAdded', m => this.messageAdded(m, newConversation));\n            this.setState({boundConversations: new Set([...this.state.boundConversations, newConversation])});\n        }\n    }\n  };\n\n  static getDerivedStateFromProps(newProps, oldState) {\n    let logic = (oldState.loadingState === 'initializing') || oldState.conversationProxy !== newProps.conversationProxy;\n    if (logic) {\n      return { loadingState: 'loading messages', conversationProxy: newProps.conversationProxy };\n    } else {\n      return null;\n    }\n  }\n\n  messageAdded = (message, targetConversation) => {\n    if (targetConversation === this.state.conversationProxy)\n        this.setState((prevState, props) => ({\n            messages: [...prevState.messages, message]\n        }));\n  };\n\n  onMessageChanged = event => {\n    this.setState({ newMessage: event.target.value });\n  };\n\n  sendMessage = event => {\n    event.preventDefault();\n    const message = this.state.newMessage;\n    this.setState({ newMessage: '' });\n    this.state.conversationProxy.sendMessage(message);\n  };\n\n  onDrop = acceptedFiles => {\n    this.state.conversationProxy.sendMessage({contentType: acceptedFiles[0].type, media: acceptedFiles[0]});\n  };\n\n  render = () => {\n    return (\n        <Dropzone\n            onDrop={this.onDrop}\n            accept=\"image/*\">\n          {({getRootProps, getInputProps, isDragActive}) => (\n              <div\n                  {...getRootProps()}\n                  onClick={() => {\n                  }}\n                  id=\"OpenChannel\"\n                  style={{position: \"relative\", top: 0}}>\n\n                {isDragActive &&\n                <div className={styles.drop}>\n                  <Icon type={\"cloud-upload\"}\n                        style={{fontSize: \"5em\", color: \"#fefefe\"}}/>\n                  <h3 style={{color: \"#fefefe\"}}>Release to Upload</h3>\n                </div>\n                }\n                <div\n                    className={styles.messages}\n                    style={{\n                      filter: `blur(${isDragActive ? 4 : 0}px)`,\n                    }}\n                >\n                  <input id=\"files\" {...getInputProps()} />\n                  <div style={{flexBasis: \"100%\", flexGrow: 2, flexShrink: 1, overflowY: \"scroll\"}}>\n                    <ConversationsMessages\n                        identity={this.props.myIdentity}\n                        messages={this.state.messages}/>\n                  </div>\n                  <div>\n                    <Form onSubmit={this.sendMessage}>\n                      <Input.Group compact={true} style={{\n                        width: \"100%\",\n                        display: \"flex\",\n                        flexDirection: \"row\"\n                      }}>\n                        <Input\n                            style={{flexBasis: \"100%\"}}\n                            placeholder={\"Type your message here...\"}\n                            type={\"text\"}\n                            name={\"message\"}\n                            id={styles['type-a-message']}\n                            autoComplete={\"off\"}\n                            disabled={this.state.loadingState !== 'ready'}\n                            onChange={this.onMessageChanged}\n                            value={this.state.newMessage}\n                        />\n                        <Button icon=\"enter\" htmlType=\"submit\" type={\"submit\"}/>\n                      </Input.Group>\n                    </Form>\n                  </div>\n                </div>\n              </div>\n          )}\n\n        </Dropzone>\n    );\n  }\n}\n\nConversation.propTypes = {\n  myIdentity: PropTypes.string.isRequired\n};\n\nexport default Conversation;","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/ConversationsList.js",[],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/HeaderItem.js",[],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/LoginPage.jsx",[],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/ConversationsMessages.js",[],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/MessageBubble.js",["61"],"import React, { Component, PureComponent } from \"react\";\nimport styles from \"./assets/MessageBubble.module.css\";\nimport PropTypes from \"prop-types\";\nimport { Spin, Modal, Icon } from \"antd\";\nimport WhatsappIcon from \"./WhatsappIcon\";\nimport ChatIcon from \"./ChatIcon\";\n\nclass MessageBubble extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasMedia: this.props.message.type === \"media\",\n      mediaDownloadFailed: false,\n      mediaUrl: null\n    };\n  }\n\n  componentDidMount = async () => {\n    this.setState({\n      ...this.state,\n      type: (await this.props.message.getParticipant()).type\n    });\n    if (this.state.hasMedia) {\n      this.props.message.media\n        .getContentTemporaryUrl()\n        .then((url) => {\n          this.setState({ mediaUrl: url });\n        })\n        .catch((e) => this.setState({ mediaDownloadFailed: true }));\n    }\n    document\n      .getElementById(this.props.message.sid)\n      .scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    document\n      .getElementById(this.props.message.sid)\n      .scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  render = () => {\n    const { itemStyle, divStyle } =\n      this.props.direction === \"incoming\"\n        ? {\n            itemStyle: styles.received_msg,\n            divStyle: styles.received_withd_msg\n          }\n        : { itemStyle: styles.outgoing_msg, divStyle: styles.sent_msg };\n\n    const m = this.props.message;\n    const type = this.state.type;\n\n    if (this.state.hasMedia) {\n      console.log(\"Message is media message\");\n      // log media properties\n      console.log(\"Media properties\", m.media);\n    }\n    console.log(m);\n    return (\n      <li id={m.sid} className={itemStyle}>\n        <div className={divStyle}>\n          <div>\n            <strong>\n              {type === \"whatsapp\" && (\n                <Icon style={{ fontSize: \"16px\" }} component={WhatsappIcon} />\n              )}\n              {type === \"chat\" && (\n                <Icon style={{ fontSize: \"16px\" }} component={ChatIcon} />\n              )}\n              {type === \"sms\" && <Icon type={\"mobile\"} />}\n              {` ${m.author}`}\n            </strong>\n\n            <br />\n            <div className={styles.medias}>\n              {this.state.hasMedia && (\n                <Media\n                  hasFailed={this.state.mediaDownloadFailed}\n                  url={this.state.mediaUrl}\n                />\n              )}\n            </div>\n            {m.body}\n          </div>\n          <span className={styles.time_date}>\n            {m.state.timestamp.toLocaleString()}\n          </span>\n        </div>\n      </li>\n    );\n  };\n}\n\nclass Media extends PureComponent {\n  render = () => {\n    const { hasFailed, url } = this.props;\n    return (\n      <div\n        className={`${styles.media}${!url ? \" \" + styles.placeholder : \"\"}`}\n        onClick={() => {\n          Modal.info({\n            centered: true,\n            icon: null,\n            okText: \"Close\",\n            width: \"60%\",\n            content: (\n              <div className={styles.picture_container}>\n                <img style={{ width: \"100%\", height: \"100%\" }} src={url} />\n              </div>\n            )\n          });\n        }}\n      >\n        {!url && !hasFailed && <Spin />}\n\n        {hasFailed && (\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Icon type={\"warning\"} style={{ fontSize: \"5em\" }} />\n            <p>Failed to load media</p>\n          </div>\n        )}\n\n        {!hasFailed && url && (\n          <div className={styles.media_icon}>\n            <div style={{ zIndex: 123, position: \"absolute\" }}>\n              <Icon type={\"eye\"} style={{ fontSize: \"5em\", opacity: 0.3 }} />\n            </div>\n            <div\n              className={styles.picture_preview}\n              style={{ backgroundImage: `url(${url})`, zIndex: 122 }}\n            ></div>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nMedia.propTypes = {\n  hasFailed: PropTypes.bool.isRequired,\n  url: PropTypes.string\n};\n\nexport default MessageBubble;\n","/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/utils/class-name.js",[],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/ChatIcon.js",[],"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/WhatsappIcon.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":2,"column":31,"nodeType":"68","messageId":"69","endLine":2,"endColumn":35},{"ruleId":"66","severity":1,"message":"70","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":21},{"ruleId":"71","severity":1,"message":"72","line":110,"column":17,"nodeType":"73","endLine":110,"endColumn":76},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'Spin' is defined but never used.","Identifier","unusedVar","'MessageBubble' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]