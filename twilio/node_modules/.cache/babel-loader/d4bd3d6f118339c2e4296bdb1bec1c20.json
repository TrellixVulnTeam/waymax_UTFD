{"ast":null,"code":"\"use strict\";\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\n\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar configuration_1 = require(\"./configuration\");\n\nvar user_1 = require(\"./user\");\n\nexports.User = user_1.User;\n\nvar network_1 = require(\"./services/network\");\n\nvar notificationtypes_1 = require(\"./interfaces/notificationtypes\");\n\nvar synclist_1 = require(\"./synclist\");\n\nvar twilsock_1 = require(\"twilsock\");\n\nvar twilio_notifications_1 = require(\"twilio-notifications\");\n\nvar twilio_sync_1 = require(\"twilio-sync\");\n\nvar twilio_mcs_client_1 = require(\"twilio-mcs-client\");\n\nvar session_1 = require(\"./session\");\n\nvar conversations_1 = require(\"./data/conversations\");\n\nvar users_1 = require(\"./data/users\");\n\nvar typingindicator_1 = require(\"./services/typingindicator\");\n\nvar readhorizon_1 = require(\"./services/readhorizon\");\n\nvar pushnotification_1 = require(\"./pushnotification\");\n\nexports.PushNotification = pushnotification_1.PushNotification;\n\nvar util_1 = require(\"./util\");\n\nvar telemetrytracker_1 = require(\"twilsock/lib/services/telemetrytracker\");\n\nvar twilio_sdk_type_validator_1 = require(\"twilio-sdk-type-validator\");\n\nvar log = logger_1.Logger.scope('Client');\n\nvar SDK_VERSION = require('./../package.json').version;\n\nvar ClientServices = function ClientServices() {\n  (0, _classCallCheck3.default)(this, ClientServices);\n};\n/**\n * A Client is a starting point to access Twilio Conversations functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Conversations client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#conversationAdded\n * @fires Client#conversationJoined\n * @fires Client#conversationLeft\n * @fires Client#conversationRemoved\n * @fires Client#conversationUpdated\n * @fires Client#participantJoined\n * @fires Client#participantLeft\n * @fires Client#participantUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\n\n\nvar Client = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Client, _events_1$EventEmitte);\n  /**\n   * These options can be passed to Client constructor.\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * These options can be passed to {@link Client#createConversation}.\n   * @typedef {Object} Client#CreateConversationOptions\n   * @property {any} [attributes] - Any custom attributes to attach to the Conversation\n   * @property {String} [friendlyName] - The non-unique display name of the Conversation\n   * @property {String} [uniqueName] - The unique identifier of the Conversation\n   */\n\n  /**\n   * Connection state of Client.\n   * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n   */\n\n  /**\n   * Notifications channel type.\n   * @typedef {('fcm'|'apn')} Client#NotificationsChannelType\n   */\n\n  function Client(token, options) {\n    (0, _classCallCheck3.default)(this, Client);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Client.__proto__ || (0, _getPrototypeOf2.default)(Client)).call(this));\n\n    _this.connectionState = 'connecting';\n    _this.sessionPromise = null;\n    _this.conversationsPromise = null;\n    _this.version = SDK_VERSION;\n    _this.parsePushNotification = Client.parsePushNotification;\n    _this.options = options || {};\n\n    if (!_this.options.disableDeepClone) {\n      var _options = (0, _assign2.default)((0, _assign2.default)({}, _this.options), {\n        transport: undefined,\n        twilsockClient: undefined\n      });\n\n      _options = util_1.deepClone(_options);\n      _options.transport = _this.options.transport;\n      _options.twilsockClient = _this.options.twilsockClient;\n      _this.options = _options;\n    }\n\n    _this.options.logLevel = _this.options.logLevel || 'silent';\n    log.setLevel(_this.options.logLevel);\n    var productId = _this.options.productId = 'ip_messaging'; // Filling ClientMetadata\n\n    _this.options.clientMetadata = _this.options.clientMetadata || {};\n\n    if (!_this.options.clientMetadata.hasOwnProperty('type')) {\n      _this.options.clientMetadata.type = 'conversations';\n    }\n\n    if (!_this.options.clientMetadata.hasOwnProperty('sdk')) {\n      _this.options.clientMetadata.sdk = 'JS';\n      _this.options.clientMetadata.sdkv = SDK_VERSION;\n    } // Enable session local storage for Sync\n\n\n    _this.options.Sync = _this.options.Sync || {};\n\n    if (typeof _this.options.Sync.enableSessionStorage === 'undefined') {\n      _this.options.Sync.enableSessionStorage = true;\n    }\n\n    if (_this.options.region) {\n      _this.options.Sync.region = _this.options.region;\n    }\n\n    if (!token) {\n      throw new Error('A valid Twilio token should be provided');\n    }\n\n    _this.services = new ClientServices();\n    _this.config = new configuration_1.Configuration(_this.options);\n    _this.options.twilsockClient = _this.options.twilsockClient || new twilsock_1.Twilsock(token, productId, _this.options);\n    _this.options.transport = _this.options.transport || _this.options.twilsockClient;\n    _this.options.notificationsClient = _this.options.notificationsClient || new twilio_notifications_1.Notifications(token, _this.options);\n    _this.options.syncClient = _this.options.syncClient || new twilio_sync_1.SyncClient(token, _this.options);\n    _this.services.syncClient = _this.options.syncClient;\n    _this.services.transport = _this.options.transport;\n    _this.services.twilsockClient = _this.options.twilsockClient;\n    _this.services.notificationClient = _this.options.notificationsClient;\n    _this.services.session = new session_1.Session(_this.services, _this.config);\n    _this.sessionPromise = _this.services.session.initialize();\n    _this.services.network = new network_1.Network(_this.config, _this.services);\n    _this.services.users = new users_1.Users({\n      session: _this.services.session,\n      network: _this.services.network,\n      syncClient: _this.services.syncClient\n    });\n\n    _this.services.users.on('userSubscribed', _this.emit.bind(_this, 'userSubscribed'));\n\n    _this.services.users.on('userUpdated', function (args) {\n      return _this.emit('userUpdated', args);\n    });\n\n    _this.services.users.on('userUnsubscribed', _this.emit.bind(_this, 'userUnsubscribed'));\n\n    _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {\n      return _this.emit('tokenAboutToExpire', ttl);\n    });\n\n    _this.services.twilsockClient.on('tokenExpired', function () {\n      return _this.emit('tokenExpired');\n    });\n\n    _this.services.twilsockClient.on('connectionError', function (error) {\n      return _this.emit('connectionError', error);\n    });\n\n    _this.services.readHorizon = new readhorizon_1.ReadHorizon(_this.services);\n    _this.services.typingIndicator = new typingindicator_1.TypingIndicator(_this.config, {\n      transport: _this.services.twilsockClient,\n      notificationClient: _this.services.notificationClient\n    }, _this.getConversationBySid.bind(_this));\n    _this.services.syncList = new synclist_1.SyncList(_this.services);\n    _this.conversations = new conversations_1.Conversations(_this.services);\n    _this.conversationsPromise = _this.sessionPromise.then(function () {\n      _this.conversations.on('conversationAdded', _this.emit.bind(_this, 'conversationAdded'));\n\n      _this.conversations.on('conversationRemoved', _this.emit.bind(_this, 'conversationRemoved'));\n\n      _this.conversations.on('conversationJoined', _this.emit.bind(_this, 'conversationJoined'));\n\n      _this.conversations.on('conversationLeft', _this.emit.bind(_this, 'conversationLeft'));\n\n      _this.conversations.on('conversationUpdated', function (args) {\n        return _this.emit('conversationUpdated', args);\n      });\n\n      _this.conversations.on('participantJoined', _this.emit.bind(_this, 'participantJoined'));\n\n      _this.conversations.on('participantLeft', _this.emit.bind(_this, 'participantLeft'));\n\n      _this.conversations.on('participantUpdated', function (args) {\n        return _this.emit('participantUpdated', args);\n      });\n\n      _this.conversations.on('messageAdded', _this.emit.bind(_this, 'messageAdded'));\n\n      _this.conversations.on('messageUpdated', function (args) {\n        return _this.emit('messageUpdated', args);\n      });\n\n      _this.conversations.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n\n      _this.conversations.on('typingStarted', _this.emit.bind(_this, 'typingStarted'));\n\n      _this.conversations.on('typingEnded', _this.emit.bind(_this, 'typingEnded'));\n\n      return _this.conversations.fetchConversations();\n    }).then(function () {\n      return _this.conversations;\n    });\n\n    _this.services.notificationClient.on('connectionStateChanged', function (state) {\n      var changedConnectionState = null;\n\n      switch (state) {\n        case 'connected':\n          changedConnectionState = 'connected';\n          break;\n\n        case 'denied':\n          changedConnectionState = 'denied';\n          break;\n\n        case 'disconnecting':\n          changedConnectionState = 'disconnecting';\n          break;\n\n        case 'disconnected':\n          changedConnectionState = 'disconnected';\n          break;\n\n        default:\n          changedConnectionState = 'connecting';\n      }\n\n      if (changedConnectionState !== _this.connectionState) {\n        _this.connectionState = changedConnectionState;\n\n        _this.emit('connectionStateChanged', _this.connectionState);\n      }\n    });\n\n    _this.fpaToken = token;\n    return _this;\n  }\n  /**\n   * Factory method to create Conversations client instance.\n   *\n   * @param {String} token - Access token\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   * @returns {Promise<Client>}\n   */\n\n\n  (0, _createClass3.default)(Client, [{\n    key: \"subscribeToPushNotifications\",\n    value: function subscribeToPushNotifications(channelType) {\n      var _this2 = this;\n\n      var subscriptions = [];\n      [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CONVERSATION, notificationtypes_1.NotificationTypes.REMOVED_FROM_CONVERSATION, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n        subscriptions.push(_this2.services.notificationClient.subscribe(messageType, channelType));\n      });\n      return _promise2.default.all(subscriptions);\n    }\n  }, {\n    key: \"unsubscribeFromPushNotifications\",\n    value: function unsubscribeFromPushNotifications(channelType) {\n      var _this3 = this;\n\n      var subscriptions = [];\n      [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CONVERSATION, notificationtypes_1.NotificationTypes.REMOVED_FROM_CONVERSATION, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n        subscriptions.push(_this3.services.notificationClient.unsubscribe(messageType, channelType));\n      });\n      return _promise2.default.all(subscriptions);\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var _this4 = this;\n\n        var links, options;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.sessionPromise;\n\n              case 2:\n                Client.supportedPushChannels.forEach(function (channelType) {\n                  return _this4.subscribeToPushNotifications(channelType);\n                });\n                _context.next = 5;\n                return this.services.session.getSessionLinks();\n\n              case 5:\n                links = _context.sent;\n                options = (0, _assign2.default)(this.options);\n                options.transport = null;\n                this.services.mcsClient = new twilio_mcs_client_1.McsClient(this.fpaToken, links.mediaServiceUrl, options);\n                _context.next = 11;\n                return this.services.typingIndicator.initialize();\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initialize() {\n        return _ref.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n    /**\n     * Gracefully shutting down library instance.\n     * @public\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"shutdown\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.services.twilsockClient.disconnect();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function shutdown() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return shutdown;\n    }()\n    /**\n     * Update the token used by the Client and re-register with Conversations services.\n     * @param {String} token - Access token\n     * @public\n     * @returns {Promise<Client>}\n     */\n\n  }, {\n    key: \"updateToken\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(token) {\n        var _this5 = this;\n\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                log.info('updateToken');\n\n                if (!(this.fpaToken === token)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this);\n\n              case 3:\n                _context3.next = 5;\n                return this.services.twilsockClient.updateToken(token).then(function () {\n                  return _this5.fpaToken = token;\n                }).then(function () {\n                  return _this5.services.mcsClient.updateToken(token);\n                }).then(function () {\n                  return _this5.sessionPromise;\n                });\n\n              case 5:\n                return _context3.abrupt(\"return\", this);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateToken(_x) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return updateToken;\n    }()\n    /**\n     * Get a known Conversation by its SID.\n     * @param {String} conversationSid - Conversation sid\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"getConversationBySid\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(conversationSid) {\n        var conversation;\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.conversations.syncListRead.promise;\n\n              case 2:\n                _context4.next = 4;\n                return this.conversations.getConversation(conversationSid);\n\n              case 4:\n                conversation = _context4.sent;\n\n                if (conversation) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                _context4.next = 8;\n                return this.conversations.getWhisperConversation(conversationSid);\n\n              case 8:\n                conversation = _context4.sent;\n\n              case 9:\n                if (conversation) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Conversation with SID \" + conversationSid + \" is not found.\");\n\n              case 11:\n                return _context4.abrupt(\"return\", conversation);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getConversationBySid(_x2) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return getConversationBySid;\n    }()\n    /**\n     * Get a known Conversation by its unique identifier name.\n     * @param {String} uniqueName - The unique identifier name of the Conversation to get\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"getConversationByUniqueName\",\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(uniqueName) {\n        var conversation;\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.conversations.syncListRead.promise;\n\n              case 2:\n                _context5.next = 4;\n                return this.conversations.getConversationByUniqueName(uniqueName);\n\n              case 4:\n                conversation = _context5.sent;\n\n                if (conversation) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Conversation with unique name \" + uniqueName + \" is not found.\");\n\n              case 7:\n                return _context5.abrupt(\"return\", conversation);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getConversationByUniqueName(_x3) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return getConversationByUniqueName;\n    }()\n    /**\n     * Get the current list of all subscribed Conversations.\n     * @returns {Promise<Paginator<Conversation>>}\n     */\n\n  }, {\n    key: \"getSubscribedConversations\",\n    value: function getSubscribedConversations(args) {\n      return this.conversationsPromise.then(function (conversations) {\n        return conversations.getConversations(args);\n      });\n    }\n    /**\n     * Create a Conversation on the server and subscribe to its events.\n     * The default is a Conversation with an empty friendlyName.\n     * @param {Client#CreateConversationOptions} [options] - Options for the Conversation\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"createConversation\",\n    value: function createConversation(options) {\n      options = options || {};\n      return this.conversationsPromise.then(function (conversationsEntity) {\n        return conversationsEntity.addConversation(options);\n      });\n    }\n    /**\n     * Registers for push notifications.\n     * @param {Client#NotificationsChannelType} channelType - 'apn' and 'fcm' are supported\n     * @param {string} registrationId - Push notification id provided by the platform\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"setPushRegistrationId\",\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(channelType, registrationId) {\n        var _this6 = this;\n\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.subscribeToPushNotifications(channelType).then(function () {\n                  return _this6.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n                });\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setPushRegistrationId(_x4, _x5) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return setPushRegistrationId;\n    }()\n    /**\n     * Unregisters from push notifications.\n     * @param {Client#NotificationsChannelType} channelType - 'apn' and 'fcm' are supported\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"unsetPushRegistrationId\",\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(channelType) {\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n              case 2:\n                _context7.next = 4;\n                return this.unsubscribeFromPushNotifications(channelType);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function unsetPushRegistrationId(_x6) {\n        return _ref7.apply(this, arguments);\n      }\n\n      return unsetPushRegistrationId;\n    }()\n  }, {\n    key: \"handlePushNotification\",\n\n    /**\n     * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n     * @param {Object} notificationPayload - Push notification payload\n     * @returns {Promise<void>}\n     */\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(notificationPayload) {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n                this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function handlePushNotification(_x7) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return handlePushNotification;\n    }()\n    /**\n     * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n     * if not - then subscribes and adds user to the subscribed list.\n     * @param {String} identity - Identity of User\n     * @returns {Promise<User>} Fully initialized user\n     */\n\n  }, {\n    key: \"getUser\",\n    value: function getUser(identity) {\n      return this.services.users.getUser(identity);\n    }\n    /**\n     * @returns {Promise<Array<User>>} List of subscribed User objects\n     */\n\n  }, {\n    key: \"getSubscribedUsers\",\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\n        return _regenerator2.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.services.users.getSubscribedUsers());\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getSubscribedUsers() {\n        return _ref9.apply(this, arguments);\n      }\n\n      return getSubscribedUsers;\n    }()\n  }, {\n    key: \"user\",\n    get: function get() {\n      return this.services.users.myself;\n    }\n  }, {\n    key: \"reachabilityEnabled\",\n    get: function get() {\n      return this.services.session.reachabilityEnabled;\n    }\n  }, {\n    key: \"token\",\n    get: function get() {\n      return this.fpaToken;\n    }\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(token, options) {\n        var client, startupEvent;\n        return _regenerator2.default.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                client = new Client(token, options);\n                startupEvent = 'conversations.client.startup';\n                client.services.twilsockClient.addPartialTelemetryEvent(new telemetrytracker_1.TelemetryEventDescription(startupEvent, 'Conversations client startup', new Date()), startupEvent, telemetrytracker_1.TelemetryPoint.Start);\n                _context10.next = 5;\n                return client.initialize();\n\n              case 5:\n                client.services.twilsockClient.addPartialTelemetryEvent(new telemetrytracker_1.TelemetryEventDescription('', '', new Date()), startupEvent, telemetrytracker_1.TelemetryPoint.End);\n                return _context10.abrupt(\"return\", client);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function create(_x8, _x9) {\n        return _ref10.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"parsePushNotificationChatData\",\n    value: function parsePushNotificationChatData(data) {\n      var result = {};\n\n      for (var key in Client.supportedPushDataFields) {\n        if (typeof data[key] !== 'undefined' && data[key] !== null) {\n          if (key === 'message_index') {\n            if (util_1.parseToNumber(data[key]) !== null) {\n              result[Client.supportedPushDataFields[key]] = Number(data[key]);\n            }\n          } else {\n            result[Client.supportedPushDataFields[key]] = data[key];\n          }\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n     * @param {Object} notificationPayload - Push notification payload\n     * @returns {PushNotification|Error}\n     */\n\n  }, {\n    key: \"parsePushNotification\",\n    value: function parsePushNotification(notificationPayload) {\n      log.debug('parsePushNotification, notificationPayload=', notificationPayload); // APNS specifics\n\n      if (typeof notificationPayload.aps !== 'undefined') {\n        if (!notificationPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n\n        var data = Client.parsePushNotificationChatData(notificationPayload);\n        var apsPayload = notificationPayload.aps;\n        var body = null;\n        var title = null;\n\n        if (typeof apsPayload.alert === 'string') {\n          body = apsPayload.alert || null;\n        } else {\n          body = apsPayload.alert.body || null;\n          title = apsPayload.alert.title || null;\n        }\n\n        return new pushnotification_1.PushNotification({\n          title: title,\n          body: body,\n          sound: apsPayload.sound || null,\n          badge: apsPayload.badge || null,\n          action: apsPayload.category || null,\n          type: notificationPayload.twi_message_type,\n          data: data\n        });\n      } // FCM specifics\n\n\n      if (typeof notificationPayload.data !== 'undefined') {\n        var dataPayload = notificationPayload.data;\n\n        if (!dataPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n\n        var _data = Client.parsePushNotificationChatData(notificationPayload.data);\n\n        return new pushnotification_1.PushNotification({\n          title: dataPayload.twi_title || null,\n          body: dataPayload.twi_body || null,\n          sound: dataPayload.twi_sound || null,\n          badge: null,\n          action: dataPayload.twi_action || null,\n          type: dataPayload.twi_message_type,\n          data: _data\n        });\n      }\n\n      throw new Error('Provided push notification payload is not Programmable Chat notification');\n    }\n  }]);\n  return Client;\n}(events_1.EventEmitter);\n\nClient.version = SDK_VERSION;\nClient.supportedPushChannels = ['fcm', 'apn'];\nClient.supportedPushDataFields = {\n  'conversation_sid': 'conversationSid',\n  'message_sid': 'messageSid',\n  'message_index': 'messageIndex'\n};\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"updateToken\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getConversationBySid\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getConversationByUniqueName\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.objectSchema('conversation options', {\n  friendlyName: ['string', 'undefined'],\n  isPrivate: ['boolean', 'undefined'],\n  uniqueName: ['string', 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"createConversation\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('fcm', 'apn'), 'string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"setPushRegistrationId\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('fcm', 'apn')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"unsetPushRegistrationId\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"handlePushNotification\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getUser\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync('string', ['undefined', twilio_sdk_type_validator_1.pureObject]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, Object]), __metadata(\"design:returntype\", _promise2.default)], Client, \"create\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypes(twilio_sdk_type_validator_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", pushnotification_1.PushNotification)], Client, \"parsePushNotification\", null);\n\nexports.Client = Client;\nexports.default = Client;\n/**\n * Fired when a Conversation becomes visible to the Client. The event is also triggered when the client creates a new Conversation.\n * Fired for all conversations Client has joined.\n * @event Client#conversationAdded\n * @type {Conversation}\n */\n\n/**\n * Fired when the Client joins a Conversation.\n * @event Client#conversationJoined\n * @type {Conversation}\n */\n\n/**\n * Fired when the Client leaves a Conversation.\n * @event Client#conversationLeft\n * @type {Conversation}\n */\n\n/**\n * Fired when a Conversation is no longer visible to the Client.\n * @event Client#conversationRemoved\n * @type {Conversation}\n */\n\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * During Conversation's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Conversation as new data is arriving from different sources.\n * @event Client#conversationUpdated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Client#participantJoined\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant has left the Conversation.\n * @event Client#participantLeft\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant's fields has been updated.\n * @event Client#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n\n/**\n * Fired when a new Message has been added to the Conversation on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n\n/**\n * Fired when a Participant has stopped typing.\n * @event Client#typingEnded\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant has started typing.\n * @event Client#typingStarted\n * @type {Participant}\n */\n\n/**\n * Fired when client received (and parsed) push notification via one of push channels (apn or fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */","map":{"version":3,"sources":["/Users/abdulkhan/Documents/waymax/Waymax/node_modules/@twilio/conversations/browser/client.js"],"names":["_regenerator","require","_regenerator2","_interopRequireDefault","_asyncToGenerator2","_asyncToGenerator3","_promise","_promise2","_assign","_assign2","_getPrototypeOf","_getPrototypeOf2","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_classCallCheck2","_classCallCheck3","_metadata","_metadata2","_defineProperty","_defineProperty2","_typeof2","_typeof3","_getOwnPropertyDescriptor","_getOwnPropertyDescriptor2","obj","__esModule","default","__decorate","undefined","decorators","target","key","desc","c","arguments","length","r","d","Reflect","decorate","i","__metadata","k","v","Object","defineProperty","exports","value","events_1","logger_1","configuration_1","user_1","User","network_1","notificationtypes_1","synclist_1","twilsock_1","twilio_notifications_1","twilio_sync_1","twilio_mcs_client_1","session_1","conversations_1","users_1","typingindicator_1","readhorizon_1","pushnotification_1","PushNotification","util_1","telemetrytracker_1","twilio_sdk_type_validator_1","log","Logger","scope","SDK_VERSION","version","ClientServices","Client","_events_1$EventEmitte","token","options","_this","__proto__","call","connectionState","sessionPromise","conversationsPromise","parsePushNotification","disableDeepClone","_options","transport","twilsockClient","deepClone","logLevel","setLevel","productId","clientMetadata","hasOwnProperty","type","sdk","sdkv","Sync","enableSessionStorage","region","Error","services","config","Configuration","Twilsock","notificationsClient","Notifications","syncClient","SyncClient","notificationClient","session","Session","initialize","network","Network","users","Users","on","emit","bind","args","ttl","error","readHorizon","ReadHorizon","typingIndicator","TypingIndicator","getConversationBySid","syncList","SyncList","conversations","Conversations","then","fetchConversations","state","changedConnectionState","fpaToken","subscribeToPushNotifications","channelType","_this2","subscriptions","NotificationTypes","NEW_MESSAGE","ADDED_TO_CONVERSATION","REMOVED_FROM_CONVERSATION","TYPING_INDICATOR","CONSUMPTION_UPDATE","forEach","messageType","push","subscribe","all","unsubscribeFromPushNotifications","_this3","unsubscribe","_ref","mark","_callee","_this4","links","wrap","_callee$","_context","prev","next","supportedPushChannels","getSessionLinks","sent","mcsClient","McsClient","mediaServiceUrl","stop","apply","_ref2","_callee2","_callee2$","_context2","disconnect","shutdown","_ref3","_callee3","_this5","_callee3$","_context3","info","abrupt","updateToken","_x","_ref4","_callee4","conversationSid","conversation","_callee4$","_context4","syncListRead","promise","getConversation","getWhisperConversation","_x2","_ref5","_callee5","uniqueName","_callee5$","_context5","getConversationByUniqueName","_x3","getSubscribedConversations","getConversations","createConversation","conversationsEntity","addConversation","_ref6","_callee6","registrationId","_this6","_callee6$","_context6","setPushRegistrationId","_x4","_x5","_ref7","_callee7","_callee7$","_context7","indexOf","unsetPushRegistrationId","_x6","_ref8","_callee8","notificationPayload","_callee8$","_context8","debug","handlePushNotification","_x7","getUser","identity","_ref9","_callee9","_callee9$","_context9","getSubscribedUsers","get","myself","reachabilityEnabled","_ref10","_callee10","client","startupEvent","_callee10$","_context10","addPartialTelemetryEvent","TelemetryEventDescription","Date","TelemetryPoint","Start","End","create","_x8","_x9","parsePushNotificationChatData","data","result","supportedPushDataFields","parseToNumber","Number","aps","twi_message_type","apsPayload","body","title","alert","sound","badge","action","category","dataPayload","_data","twi_title","twi_body","twi_sound","twi_action","EventEmitter","validateTypesAsync","nonEmptyString","Function","String","prototype","objectSchema","friendlyName","isPrivate","literal","pureObject","validateTypes"],"mappings":"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":["\"use strict\";\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n        d;\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    }return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"events\");\nvar logger_1 = require(\"./logger\");\nvar configuration_1 = require(\"./configuration\");\nvar user_1 = require(\"./user\");\nexports.User = user_1.User;\nvar network_1 = require(\"./services/network\");\nvar notificationtypes_1 = require(\"./interfaces/notificationtypes\");\nvar synclist_1 = require(\"./synclist\");\nvar twilsock_1 = require(\"twilsock\");\nvar twilio_notifications_1 = require(\"twilio-notifications\");\nvar twilio_sync_1 = require(\"twilio-sync\");\nvar twilio_mcs_client_1 = require(\"twilio-mcs-client\");\nvar session_1 = require(\"./session\");\nvar conversations_1 = require(\"./data/conversations\");\nvar users_1 = require(\"./data/users\");\nvar typingindicator_1 = require(\"./services/typingindicator\");\nvar readhorizon_1 = require(\"./services/readhorizon\");\nvar pushnotification_1 = require(\"./pushnotification\");\nexports.PushNotification = pushnotification_1.PushNotification;\nvar util_1 = require(\"./util\");\nvar telemetrytracker_1 = require(\"twilsock/lib/services/telemetrytracker\");\nvar twilio_sdk_type_validator_1 = require(\"twilio-sdk-type-validator\");\nvar log = logger_1.Logger.scope('Client');\nvar SDK_VERSION = require('./../package.json').version;\n\nvar ClientServices = function ClientServices() {\n    (0, _classCallCheck3.default)(this, ClientServices);\n};\n/**\n * A Client is a starting point to access Twilio Conversations functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Conversations client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#conversationAdded\n * @fires Client#conversationJoined\n * @fires Client#conversationLeft\n * @fires Client#conversationRemoved\n * @fires Client#conversationUpdated\n * @fires Client#participantJoined\n * @fires Client#participantLeft\n * @fires Client#participantUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\n\n\nvar Client = function (_events_1$EventEmitte) {\n    (0, _inherits3.default)(Client, _events_1$EventEmitte);\n\n    /**\n     * These options can be passed to Client constructor.\n     * @typedef {Object} Client#ClientOptions\n     * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n     *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n     */\n    /**\n     * These options can be passed to {@link Client#createConversation}.\n     * @typedef {Object} Client#CreateConversationOptions\n     * @property {any} [attributes] - Any custom attributes to attach to the Conversation\n     * @property {String} [friendlyName] - The non-unique display name of the Conversation\n     * @property {String} [uniqueName] - The unique identifier of the Conversation\n     */\n    /**\n     * Connection state of Client.\n     * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n     */\n    /**\n     * Notifications channel type.\n     * @typedef {('fcm'|'apn')} Client#NotificationsChannelType\n     */\n    function Client(token, options) {\n        (0, _classCallCheck3.default)(this, Client);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Client.__proto__ || (0, _getPrototypeOf2.default)(Client)).call(this));\n\n        _this.connectionState = 'connecting';\n        _this.sessionPromise = null;\n        _this.conversationsPromise = null;\n        _this.version = SDK_VERSION;\n        _this.parsePushNotification = Client.parsePushNotification;\n        _this.options = options || {};\n        if (!_this.options.disableDeepClone) {\n            var _options = (0, _assign2.default)((0, _assign2.default)({}, _this.options), { transport: undefined, twilsockClient: undefined });\n            _options = util_1.deepClone(_options);\n            _options.transport = _this.options.transport;\n            _options.twilsockClient = _this.options.twilsockClient;\n            _this.options = _options;\n        }\n        _this.options.logLevel = _this.options.logLevel || 'silent';\n        log.setLevel(_this.options.logLevel);\n        var productId = _this.options.productId = 'ip_messaging';\n        // Filling ClientMetadata\n        _this.options.clientMetadata = _this.options.clientMetadata || {};\n        if (!_this.options.clientMetadata.hasOwnProperty('type')) {\n            _this.options.clientMetadata.type = 'conversations';\n        }\n        if (!_this.options.clientMetadata.hasOwnProperty('sdk')) {\n            _this.options.clientMetadata.sdk = 'JS';\n            _this.options.clientMetadata.sdkv = SDK_VERSION;\n        }\n        // Enable session local storage for Sync\n        _this.options.Sync = _this.options.Sync || {};\n        if (typeof _this.options.Sync.enableSessionStorage === 'undefined') {\n            _this.options.Sync.enableSessionStorage = true;\n        }\n        if (_this.options.region) {\n            _this.options.Sync.region = _this.options.region;\n        }\n        if (!token) {\n            throw new Error('A valid Twilio token should be provided');\n        }\n        _this.services = new ClientServices();\n        _this.config = new configuration_1.Configuration(_this.options);\n        _this.options.twilsockClient = _this.options.twilsockClient || new twilsock_1.Twilsock(token, productId, _this.options);\n        _this.options.transport = _this.options.transport || _this.options.twilsockClient;\n        _this.options.notificationsClient = _this.options.notificationsClient || new twilio_notifications_1.Notifications(token, _this.options);\n        _this.options.syncClient = _this.options.syncClient || new twilio_sync_1.SyncClient(token, _this.options);\n        _this.services.syncClient = _this.options.syncClient;\n        _this.services.transport = _this.options.transport;\n        _this.services.twilsockClient = _this.options.twilsockClient;\n        _this.services.notificationClient = _this.options.notificationsClient;\n        _this.services.session = new session_1.Session(_this.services, _this.config);\n        _this.sessionPromise = _this.services.session.initialize();\n        _this.services.network = new network_1.Network(_this.config, _this.services);\n        _this.services.users = new users_1.Users({\n            session: _this.services.session,\n            network: _this.services.network,\n            syncClient: _this.services.syncClient\n        });\n        _this.services.users.on('userSubscribed', _this.emit.bind(_this, 'userSubscribed'));\n        _this.services.users.on('userUpdated', function (args) {\n            return _this.emit('userUpdated', args);\n        });\n        _this.services.users.on('userUnsubscribed', _this.emit.bind(_this, 'userUnsubscribed'));\n        _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {\n            return _this.emit('tokenAboutToExpire', ttl);\n        });\n        _this.services.twilsockClient.on('tokenExpired', function () {\n            return _this.emit('tokenExpired');\n        });\n        _this.services.twilsockClient.on('connectionError', function (error) {\n            return _this.emit('connectionError', error);\n        });\n        _this.services.readHorizon = new readhorizon_1.ReadHorizon(_this.services);\n        _this.services.typingIndicator = new typingindicator_1.TypingIndicator(_this.config, {\n            transport: _this.services.twilsockClient,\n            notificationClient: _this.services.notificationClient\n        }, _this.getConversationBySid.bind(_this));\n        _this.services.syncList = new synclist_1.SyncList(_this.services);\n        _this.conversations = new conversations_1.Conversations(_this.services);\n        _this.conversationsPromise = _this.sessionPromise.then(function () {\n            _this.conversations.on('conversationAdded', _this.emit.bind(_this, 'conversationAdded'));\n            _this.conversations.on('conversationRemoved', _this.emit.bind(_this, 'conversationRemoved'));\n            _this.conversations.on('conversationJoined', _this.emit.bind(_this, 'conversationJoined'));\n            _this.conversations.on('conversationLeft', _this.emit.bind(_this, 'conversationLeft'));\n            _this.conversations.on('conversationUpdated', function (args) {\n                return _this.emit('conversationUpdated', args);\n            });\n            _this.conversations.on('participantJoined', _this.emit.bind(_this, 'participantJoined'));\n            _this.conversations.on('participantLeft', _this.emit.bind(_this, 'participantLeft'));\n            _this.conversations.on('participantUpdated', function (args) {\n                return _this.emit('participantUpdated', args);\n            });\n            _this.conversations.on('messageAdded', _this.emit.bind(_this, 'messageAdded'));\n            _this.conversations.on('messageUpdated', function (args) {\n                return _this.emit('messageUpdated', args);\n            });\n            _this.conversations.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n            _this.conversations.on('typingStarted', _this.emit.bind(_this, 'typingStarted'));\n            _this.conversations.on('typingEnded', _this.emit.bind(_this, 'typingEnded'));\n            return _this.conversations.fetchConversations();\n        }).then(function () {\n            return _this.conversations;\n        });\n        _this.services.notificationClient.on('connectionStateChanged', function (state) {\n            var changedConnectionState = null;\n            switch (state) {\n                case 'connected':\n                    changedConnectionState = 'connected';\n                    break;\n                case 'denied':\n                    changedConnectionState = 'denied';\n                    break;\n                case 'disconnecting':\n                    changedConnectionState = 'disconnecting';\n                    break;\n                case 'disconnected':\n                    changedConnectionState = 'disconnected';\n                    break;\n                default:\n                    changedConnectionState = 'connecting';\n            }\n            if (changedConnectionState !== _this.connectionState) {\n                _this.connectionState = changedConnectionState;\n                _this.emit('connectionStateChanged', _this.connectionState);\n            }\n        });\n        _this.fpaToken = token;\n        return _this;\n    }\n    /**\n     * Factory method to create Conversations client instance.\n     *\n     * @param {String} token - Access token\n     * @param {Client#ClientOptions} [options] - Options to customize the Client\n     * @returns {Promise<Client>}\n     */\n\n\n    (0, _createClass3.default)(Client, [{\n        key: \"subscribeToPushNotifications\",\n        value: function subscribeToPushNotifications(channelType) {\n            var _this2 = this;\n\n            var subscriptions = [];\n            [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CONVERSATION, notificationtypes_1.NotificationTypes.REMOVED_FROM_CONVERSATION, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n                subscriptions.push(_this2.services.notificationClient.subscribe(messageType, channelType));\n            });\n            return _promise2.default.all(subscriptions);\n        }\n    }, {\n        key: \"unsubscribeFromPushNotifications\",\n        value: function unsubscribeFromPushNotifications(channelType) {\n            var _this3 = this;\n\n            var subscriptions = [];\n            [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CONVERSATION, notificationtypes_1.NotificationTypes.REMOVED_FROM_CONVERSATION, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n                subscriptions.push(_this3.services.notificationClient.unsubscribe(messageType, channelType));\n            });\n            return _promise2.default.all(subscriptions);\n        }\n    }, {\n        key: \"initialize\",\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                var _this4 = this;\n\n                var links, options;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.next = 2;\n                                return this.sessionPromise;\n\n                            case 2:\n                                Client.supportedPushChannels.forEach(function (channelType) {\n                                    return _this4.subscribeToPushNotifications(channelType);\n                                });\n                                _context.next = 5;\n                                return this.services.session.getSessionLinks();\n\n                            case 5:\n                                links = _context.sent;\n                                options = (0, _assign2.default)(this.options);\n\n                                options.transport = null;\n                                this.services.mcsClient = new twilio_mcs_client_1.McsClient(this.fpaToken, links.mediaServiceUrl, options);\n                                _context.next = 11;\n                                return this.services.typingIndicator.initialize();\n\n                            case 11:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n\n            function initialize() {\n                return _ref.apply(this, arguments);\n            }\n\n            return initialize;\n        }()\n        /**\n         * Gracefully shutting down library instance.\n         * @public\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"shutdown\",\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                _context2.next = 2;\n                                return this.services.twilsockClient.disconnect();\n\n                            case 2:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function shutdown() {\n                return _ref2.apply(this, arguments);\n            }\n\n            return shutdown;\n        }()\n        /**\n         * Update the token used by the Client and re-register with Conversations services.\n         * @param {String} token - Access token\n         * @public\n         * @returns {Promise<Client>}\n         */\n\n    }, {\n        key: \"updateToken\",\n        value: function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(token) {\n                var _this5 = this;\n\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                log.info('updateToken');\n\n                                if (!(this.fpaToken === token)) {\n                                    _context3.next = 3;\n                                    break;\n                                }\n\n                                return _context3.abrupt(\"return\", this);\n\n                            case 3:\n                                _context3.next = 5;\n                                return this.services.twilsockClient.updateToken(token).then(function () {\n                                    return _this5.fpaToken = token;\n                                }).then(function () {\n                                    return _this5.services.mcsClient.updateToken(token);\n                                }).then(function () {\n                                    return _this5.sessionPromise;\n                                });\n\n                            case 5:\n                                return _context3.abrupt(\"return\", this);\n\n                            case 6:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this);\n            }));\n\n            function updateToken(_x) {\n                return _ref3.apply(this, arguments);\n            }\n\n            return updateToken;\n        }()\n        /**\n         * Get a known Conversation by its SID.\n         * @param {String} conversationSid - Conversation sid\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"getConversationBySid\",\n        value: function () {\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(conversationSid) {\n                var conversation;\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                _context4.next = 2;\n                                return this.conversations.syncListRead.promise;\n\n                            case 2:\n                                _context4.next = 4;\n                                return this.conversations.getConversation(conversationSid);\n\n                            case 4:\n                                conversation = _context4.sent;\n\n                                if (conversation) {\n                                    _context4.next = 9;\n                                    break;\n                                }\n\n                                _context4.next = 8;\n                                return this.conversations.getWhisperConversation(conversationSid);\n\n                            case 8:\n                                conversation = _context4.sent;\n\n                            case 9:\n                                if (conversation) {\n                                    _context4.next = 11;\n                                    break;\n                                }\n\n                                throw new Error(\"Conversation with SID \" + conversationSid + \" is not found.\");\n\n                            case 11:\n                                return _context4.abrupt(\"return\", conversation);\n\n                            case 12:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function getConversationBySid(_x2) {\n                return _ref4.apply(this, arguments);\n            }\n\n            return getConversationBySid;\n        }()\n        /**\n         * Get a known Conversation by its unique identifier name.\n         * @param {String} uniqueName - The unique identifier name of the Conversation to get\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"getConversationByUniqueName\",\n        value: function () {\n            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(uniqueName) {\n                var conversation;\n                return _regenerator2.default.wrap(function _callee5$(_context5) {\n                    while (1) {\n                        switch (_context5.prev = _context5.next) {\n                            case 0:\n                                _context5.next = 2;\n                                return this.conversations.syncListRead.promise;\n\n                            case 2:\n                                _context5.next = 4;\n                                return this.conversations.getConversationByUniqueName(uniqueName);\n\n                            case 4:\n                                conversation = _context5.sent;\n\n                                if (conversation) {\n                                    _context5.next = 7;\n                                    break;\n                                }\n\n                                throw new Error(\"Conversation with unique name \" + uniqueName + \" is not found.\");\n\n                            case 7:\n                                return _context5.abrupt(\"return\", conversation);\n\n                            case 8:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, this);\n            }));\n\n            function getConversationByUniqueName(_x3) {\n                return _ref5.apply(this, arguments);\n            }\n\n            return getConversationByUniqueName;\n        }()\n        /**\n         * Get the current list of all subscribed Conversations.\n         * @returns {Promise<Paginator<Conversation>>}\n         */\n\n    }, {\n        key: \"getSubscribedConversations\",\n        value: function getSubscribedConversations(args) {\n            return this.conversationsPromise.then(function (conversations) {\n                return conversations.getConversations(args);\n            });\n        }\n        /**\n         * Create a Conversation on the server and subscribe to its events.\n         * The default is a Conversation with an empty friendlyName.\n         * @param {Client#CreateConversationOptions} [options] - Options for the Conversation\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"createConversation\",\n        value: function createConversation(options) {\n            options = options || {};\n            return this.conversationsPromise.then(function (conversationsEntity) {\n                return conversationsEntity.addConversation(options);\n            });\n        }\n        /**\n         * Registers for push notifications.\n         * @param {Client#NotificationsChannelType} channelType - 'apn' and 'fcm' are supported\n         * @param {string} registrationId - Push notification id provided by the platform\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"setPushRegistrationId\",\n        value: function () {\n            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(channelType, registrationId) {\n                var _this6 = this;\n\n                return _regenerator2.default.wrap(function _callee6$(_context6) {\n                    while (1) {\n                        switch (_context6.prev = _context6.next) {\n                            case 0:\n                                _context6.next = 2;\n                                return this.subscribeToPushNotifications(channelType).then(function () {\n                                    return _this6.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n                                });\n\n                            case 2:\n                            case \"end\":\n                                return _context6.stop();\n                        }\n                    }\n                }, _callee6, this);\n            }));\n\n            function setPushRegistrationId(_x4, _x5) {\n                return _ref6.apply(this, arguments);\n            }\n\n            return setPushRegistrationId;\n        }()\n        /**\n         * Unregisters from push notifications.\n         * @param {Client#NotificationsChannelType} channelType - 'apn' and 'fcm' are supported\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"unsetPushRegistrationId\",\n        value: function () {\n            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(channelType) {\n                return _regenerator2.default.wrap(function _callee7$(_context7) {\n                    while (1) {\n                        switch (_context7.prev = _context7.next) {\n                            case 0:\n                                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                                    _context7.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n                            case 2:\n                                _context7.next = 4;\n                                return this.unsubscribeFromPushNotifications(channelType);\n\n                            case 4:\n                            case \"end\":\n                                return _context7.stop();\n                        }\n                    }\n                }, _callee7, this);\n            }));\n\n            function unsetPushRegistrationId(_x6) {\n                return _ref7.apply(this, arguments);\n            }\n\n            return unsetPushRegistrationId;\n        }()\n    }, {\n        key: \"handlePushNotification\",\n\n        /**\n         * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n         * @param {Object} notificationPayload - Push notification payload\n         * @returns {Promise<void>}\n         */\n        value: function () {\n            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(notificationPayload) {\n                return _regenerator2.default.wrap(function _callee8$(_context8) {\n                    while (1) {\n                        switch (_context8.prev = _context8.next) {\n                            case 0:\n                                log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n                                this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n\n                            case 2:\n                            case \"end\":\n                                return _context8.stop();\n                        }\n                    }\n                }, _callee8, this);\n            }));\n\n            function handlePushNotification(_x7) {\n                return _ref8.apply(this, arguments);\n            }\n\n            return handlePushNotification;\n        }()\n        /**\n         * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n         * if not - then subscribes and adds user to the subscribed list.\n         * @param {String} identity - Identity of User\n         * @returns {Promise<User>} Fully initialized user\n         */\n\n    }, {\n        key: \"getUser\",\n        value: function getUser(identity) {\n            return this.services.users.getUser(identity);\n        }\n        /**\n         * @returns {Promise<Array<User>>} List of subscribed User objects\n         */\n\n    }, {\n        key: \"getSubscribedUsers\",\n        value: function () {\n            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\n                return _regenerator2.default.wrap(function _callee9$(_context9) {\n                    while (1) {\n                        switch (_context9.prev = _context9.next) {\n                            case 0:\n                                return _context9.abrupt(\"return\", this.services.users.getSubscribedUsers());\n\n                            case 1:\n                            case \"end\":\n                                return _context9.stop();\n                        }\n                    }\n                }, _callee9, this);\n            }));\n\n            function getSubscribedUsers() {\n                return _ref9.apply(this, arguments);\n            }\n\n            return getSubscribedUsers;\n        }()\n    }, {\n        key: \"user\",\n        get: function get() {\n            return this.services.users.myself;\n        }\n    }, {\n        key: \"reachabilityEnabled\",\n        get: function get() {\n            return this.services.session.reachabilityEnabled;\n        }\n    }, {\n        key: \"token\",\n        get: function get() {\n            return this.fpaToken;\n        }\n    }], [{\n        key: \"create\",\n        value: function () {\n            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(token, options) {\n                var client, startupEvent;\n                return _regenerator2.default.wrap(function _callee10$(_context10) {\n                    while (1) {\n                        switch (_context10.prev = _context10.next) {\n                            case 0:\n                                client = new Client(token, options);\n                                startupEvent = 'conversations.client.startup';\n\n                                client.services.twilsockClient.addPartialTelemetryEvent(new telemetrytracker_1.TelemetryEventDescription(startupEvent, 'Conversations client startup', new Date()), startupEvent, telemetrytracker_1.TelemetryPoint.Start);\n                                _context10.next = 5;\n                                return client.initialize();\n\n                            case 5:\n                                client.services.twilsockClient.addPartialTelemetryEvent(new telemetrytracker_1.TelemetryEventDescription('', '', new Date()), startupEvent, telemetrytracker_1.TelemetryPoint.End);\n                                return _context10.abrupt(\"return\", client);\n\n                            case 7:\n                            case \"end\":\n                                return _context10.stop();\n                        }\n                    }\n                }, _callee10, this);\n            }));\n\n            function create(_x8, _x9) {\n                return _ref10.apply(this, arguments);\n            }\n\n            return create;\n        }()\n    }, {\n        key: \"parsePushNotificationChatData\",\n        value: function parsePushNotificationChatData(data) {\n            var result = {};\n            for (var key in Client.supportedPushDataFields) {\n                if (typeof data[key] !== 'undefined' && data[key] !== null) {\n                    if (key === 'message_index') {\n                        if (util_1.parseToNumber(data[key]) !== null) {\n                            result[Client.supportedPushDataFields[key]] = Number(data[key]);\n                        }\n                    } else {\n                        result[Client.supportedPushDataFields[key]] = data[key];\n                    }\n                }\n            }\n            return result;\n        }\n        /**\n         * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n         * @param {Object} notificationPayload - Push notification payload\n         * @returns {PushNotification|Error}\n         */\n\n    }, {\n        key: \"parsePushNotification\",\n        value: function parsePushNotification(notificationPayload) {\n            log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n            // APNS specifics\n            if (typeof notificationPayload.aps !== 'undefined') {\n                if (!notificationPayload.twi_message_type) {\n                    throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n                }\n                var data = Client.parsePushNotificationChatData(notificationPayload);\n                var apsPayload = notificationPayload.aps;\n                var body = null;\n                var title = null;\n                if (typeof apsPayload.alert === 'string') {\n                    body = apsPayload.alert || null;\n                } else {\n                    body = apsPayload.alert.body || null;\n                    title = apsPayload.alert.title || null;\n                }\n                return new pushnotification_1.PushNotification({\n                    title: title,\n                    body: body,\n                    sound: apsPayload.sound || null,\n                    badge: apsPayload.badge || null,\n                    action: apsPayload.category || null,\n                    type: notificationPayload.twi_message_type,\n                    data: data\n                });\n            }\n            // FCM specifics\n            if (typeof notificationPayload.data !== 'undefined') {\n                var dataPayload = notificationPayload.data;\n                if (!dataPayload.twi_message_type) {\n                    throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n                }\n                var _data = Client.parsePushNotificationChatData(notificationPayload.data);\n                return new pushnotification_1.PushNotification({\n                    title: dataPayload.twi_title || null,\n                    body: dataPayload.twi_body || null,\n                    sound: dataPayload.twi_sound || null,\n                    badge: null,\n                    action: dataPayload.twi_action || null,\n                    type: dataPayload.twi_message_type,\n                    data: _data\n                });\n            }\n            throw new Error('Provided push notification payload is not Programmable Chat notification');\n        }\n    }]);\n    return Client;\n}(events_1.EventEmitter);\n\nClient.version = SDK_VERSION;\nClient.supportedPushChannels = ['fcm', 'apn'];\nClient.supportedPushDataFields = {\n    'conversation_sid': 'conversationSid',\n    'message_sid': 'messageSid',\n    'message_index': 'messageIndex'\n};\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"updateToken\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getConversationBySid\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getConversationByUniqueName\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.objectSchema('conversation options', {\n    friendlyName: ['string', 'undefined'],\n    isPrivate: ['boolean', 'undefined'],\n    uniqueName: ['string', 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"createConversation\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('fcm', 'apn'), 'string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"setPushRegistrationId\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('fcm', 'apn')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"unsetPushRegistrationId\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"handlePushNotification\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getUser\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync('string', ['undefined', twilio_sdk_type_validator_1.pureObject]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, Object]), __metadata(\"design:returntype\", _promise2.default)], Client, \"create\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypes(twilio_sdk_type_validator_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", pushnotification_1.PushNotification)], Client, \"parsePushNotification\", null);\nexports.Client = Client;\nexports.default = Client;\n/**\n * Fired when a Conversation becomes visible to the Client. The event is also triggered when the client creates a new Conversation.\n * Fired for all conversations Client has joined.\n * @event Client#conversationAdded\n * @type {Conversation}\n */\n/**\n * Fired when the Client joins a Conversation.\n * @event Client#conversationJoined\n * @type {Conversation}\n */\n/**\n * Fired when the Client leaves a Conversation.\n * @event Client#conversationLeft\n * @type {Conversation}\n */\n/**\n * Fired when a Conversation is no longer visible to the Client.\n * @event Client#conversationRemoved\n * @type {Conversation}\n */\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * During Conversation's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Conversation as new data is arriving from different sources.\n * @event Client#conversationUpdated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Client#participantJoined\n * @type {Participant}\n */\n/**\n * Fired when a Participant has left the Conversation.\n * @event Client#participantLeft\n * @type {Participant}\n */\n/**\n * Fired when a Participant's fields has been updated.\n * @event Client#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Conversation on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n/**\n * Fired when a Participant has stopped typing.\n * @event Client#typingEnded\n * @type {Participant}\n */\n/**\n * Fired when a Participant has started typing.\n * @event Client#typingStarted\n * @type {Participant}\n */\n/**\n * Fired when client received (and parsed) push notification via one of push channels (apn or fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */"]},"metadata":{},"sourceType":"script"}