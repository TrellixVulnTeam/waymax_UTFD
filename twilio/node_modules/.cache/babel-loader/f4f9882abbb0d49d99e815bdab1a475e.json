{"ast":null,"code":"var _jsxFileName = \"/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/Conversation.js\";\nimport React, { Component } from 'react';\nimport './assets/Conversation.css';\nimport MessageBubble from './MessageBubble';\nimport Dropzone from 'react-dropzone';\nimport styles from './assets/Conversation.module.css';\nimport { Button, Form, Icon, Input } from \"antd\";\nimport ConversationsMessages from \"./ConversationsMessages\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Conversation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadMessagesFor = thisConversation => {\n      if (this.state.conversationProxy === thisConversation) {\n        thisConversation.getMessages().then(messagePaginator => {\n          if (this.state.conversationProxy === thisConversation) {\n            this.setState({\n              messages: messagePaginator.items,\n              loadingState: 'ready'\n            });\n          }\n        }).catch(err => {\n          console.error(\"Couldn't fetch messages IMPLEMENT RETRY\", err);\n          this.setState({\n            loadingState: \"failed\"\n          });\n        });\n      }\n    };\n\n    this.componentDidMount = () => {\n      if (this.state.conversationProxy) {\n        this.loadMessagesFor(this.state.conversationProxy);\n\n        if (!this.state.boundConversations.has(this.state.conversationProxy)) {\n          let newConversation = this.state.conversationProxy;\n          newConversation.on('messageAdded', m => this.messageAdded(m, newConversation));\n          this.setState({\n            boundConversations: new Set([...this.state.boundConversations, newConversation])\n          });\n        }\n      }\n    };\n\n    this.componentDidUpdate = (oldProps, oldState) => {\n      if (this.state.conversationProxy !== oldState.conversationProxy) {\n        this.loadMessagesFor(this.state.conversationProxy);\n\n        if (!this.state.boundConversations.has(this.state.conversationProxy)) {\n          let newConversation = this.state.conversationProxy;\n          newConversation.on('messageAdded', m => this.messageAdded(m, newConversation));\n          this.setState({\n            boundConversations: new Set([...this.state.boundConversations, newConversation])\n          });\n        }\n      }\n    };\n\n    this.messageAdded = (message, targetConversation) => {\n      if (targetConversation === this.state.conversationProxy) this.setState((prevState, props) => ({\n        messages: [...prevState.messages, message]\n      }));\n    };\n\n    this.onMessageChanged = event => {\n      this.setState({\n        newMessage: event.target.value\n      });\n    };\n\n    this.sendMessage = event => {\n      event.preventDefault();\n      const message = this.state.newMessage;\n      this.setState({\n        newMessage: ''\n      });\n      this.state.conversationProxy.sendMessage(message);\n    };\n\n    this.onDrop = acceptedFiles => {\n      this.state.conversationProxy.sendMessage({\n        contentType: acceptedFiles[0].type,\n        media: acceptedFiles[0]\n      });\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(Dropzone, {\n        onDrop: this.onDrop,\n        accept: \"image/*\",\n        children: _ref => {\n          let {\n            getRootProps,\n            getInputProps,\n            isDragActive\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n            onClick: () => {},\n            id: \"OpenChannel\",\n            style: {\n              position: \"relative\",\n              top: 0\n            },\n            children: [isDragActive && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.drop,\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                type: \"cloud-upload\",\n                style: {\n                  fontSize: \"5em\",\n                  color: \"#fefefe\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                style: {\n                  color: \"#fefefe\"\n                },\n                children: \"Release to Upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.messages,\n              style: {\n                filter: \"blur(\".concat(isDragActive ? 4 : 0, \"px)\")\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"files\",\n                ...getInputProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  flexBasis: \"100%\",\n                  flexGrow: 2,\n                  flexShrink: 1,\n                  overflowY: \"scroll\"\n                },\n                children: /*#__PURE__*/_jsxDEV(ConversationsMessages, {\n                  identity: this.props.myIdentity,\n                  messages: this.state.messages\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Form, {\n                  onSubmit: this.sendMessage,\n                  children: /*#__PURE__*/_jsxDEV(Input.Group, {\n                    compact: true,\n                    style: {\n                      width: \"100%\",\n                      display: \"flex\",\n                      flexDirection: \"row\"\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Input, {\n                      style: {\n                        flexBasis: \"100%\"\n                      },\n                      placeholder: \"Type your message here...\",\n                      type: \"text\",\n                      name: \"message\",\n                      id: styles['type-a-message'],\n                      autoComplete: \"off\",\n                      disabled: this.state.loadingState !== 'ready',\n                      onChange: this.onMessageChanged,\n                      value: this.state.newMessage\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 131,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      icon: \"enter\",\n                      htmlType: \"submit\",\n                      type: \"submit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.state = {\n      newMessage: '',\n      conversationProxy: props.conversationProxy,\n      messages: [],\n      loadingState: 'initializing',\n      boundConversations: new Set()\n    };\n  }\n\n  static getDerivedStateFromProps(newProps, oldState) {\n    let logic = oldState.loadingState === 'initializing' || oldState.conversationProxy !== newProps.conversationProxy;\n\n    if (logic) {\n      return {\n        loadingState: 'loading messages',\n        conversationProxy: newProps.conversationProxy\n      };\n    } else {\n      return null;\n    }\n  }\n\n}\n\nConversation.propTypes = {\n  myIdentity: PropTypes.string.isRequired\n};\nexport default Conversation;","map":{"version":3,"sources":["/Users/abdulkhan/Documents/waymax/Waymax/twilio/src/Conversation.js"],"names":["React","Component","MessageBubble","Dropzone","styles","Button","Form","Icon","Input","ConversationsMessages","PropTypes","Conversation","constructor","props","loadMessagesFor","thisConversation","state","conversationProxy","getMessages","then","messagePaginator","setState","messages","items","loadingState","catch","err","console","error","componentDidMount","boundConversations","has","newConversation","on","m","messageAdded","Set","componentDidUpdate","oldProps","oldState","message","targetConversation","prevState","onMessageChanged","event","newMessage","target","value","sendMessage","preventDefault","onDrop","acceptedFiles","contentType","type","media","render","getRootProps","getInputProps","isDragActive","position","top","drop","fontSize","color","filter","flexBasis","flexGrow","flexShrink","overflowY","myIdentity","width","display","flexDirection","getDerivedStateFromProps","newProps","logic","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './assets/Conversation.css';\nimport MessageBubble from './MessageBubble'\nimport Dropzone from 'react-dropzone';\nimport styles from './assets/Conversation.module.css'\nimport {Button, Form, Icon, Input} from \"antd\";\nimport ConversationsMessages from \"./ConversationsMessages\";\nimport PropTypes from \"prop-types\";\n\nclass Conversation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        newMessage: '',\n        conversationProxy: props.conversationProxy,\n        messages: [],\n        loadingState: 'initializing',\n        boundConversations: new Set()\n    };\n  }\n\n  loadMessagesFor = (thisConversation) => {\n    if (this.state.conversationProxy === thisConversation) {\n        thisConversation.getMessages()\n            .then(messagePaginator => {\n                if (this.state.conversationProxy === thisConversation) {\n                    this.setState({ messages: messagePaginator.items, loadingState: 'ready' });\n                }\n            })\n            .catch(err => {\n                console.error(\"Couldn't fetch messages IMPLEMENT RETRY\", err);\n                this.setState({ loadingState: \"failed\" });\n            });\n    }\n  };\n\n  componentDidMount = () => {\n      if (this.state.conversationProxy) {\n        this.loadMessagesFor(this.state.conversationProxy);\n\n        if (!this.state.boundConversations.has(this.state.conversationProxy)) {\n            let newConversation = this.state.conversationProxy;\n            newConversation.on('messageAdded', m => this.messageAdded(m, newConversation));\n            this.setState({boundConversations: new Set([...this.state.boundConversations, newConversation])});\n        }\n      }\n  }\n\n  componentDidUpdate = (oldProps, oldState) => {\n    if (this.state.conversationProxy !== oldState.conversationProxy) {\n        this.loadMessagesFor(this.state.conversationProxy);\n\n        if (!this.state.boundConversations.has(this.state.conversationProxy)) {\n            let newConversation = this.state.conversationProxy;\n            newConversation.on('messageAdded', m => this.messageAdded(m, newConversation));\n            this.setState({boundConversations: new Set([...this.state.boundConversations, newConversation])});\n        }\n    }\n  };\n\n  static getDerivedStateFromProps(newProps, oldState) {\n    let logic = (oldState.loadingState === 'initializing') || oldState.conversationProxy !== newProps.conversationProxy;\n    if (logic) {\n      return { loadingState: 'loading messages', conversationProxy: newProps.conversationProxy };\n    } else {\n      return null;\n    }\n  }\n\n  messageAdded = (message, targetConversation) => {\n    if (targetConversation === this.state.conversationProxy)\n        this.setState((prevState, props) => ({\n            messages: [...prevState.messages, message]\n        }));\n  };\n\n  onMessageChanged = event => {\n    this.setState({ newMessage: event.target.value });\n  };\n\n  sendMessage = event => {\n    event.preventDefault();\n    const message = this.state.newMessage;\n    this.setState({ newMessage: '' });\n    this.state.conversationProxy.sendMessage(message);\n  };\n\n  onDrop = acceptedFiles => {\n    this.state.conversationProxy.sendMessage({contentType: acceptedFiles[0].type, media: acceptedFiles[0]});\n  };\n\n  render = () => {\n    return (\n        <Dropzone\n            onDrop={this.onDrop}\n            accept=\"image/*\">\n          {({getRootProps, getInputProps, isDragActive}) => (\n              <div\n                  {...getRootProps()}\n                  onClick={() => {\n                  }}\n                  id=\"OpenChannel\"\n                  style={{position: \"relative\", top: 0}}>\n\n                {isDragActive &&\n                <div className={styles.drop}>\n                  <Icon type={\"cloud-upload\"}\n                        style={{fontSize: \"5em\", color: \"#fefefe\"}}/>\n                  <h3 style={{color: \"#fefefe\"}}>Release to Upload</h3>\n                </div>\n                }\n                <div\n                    className={styles.messages}\n                    style={{\n                      filter: `blur(${isDragActive ? 4 : 0}px)`,\n                    }}\n                >\n                  <input id=\"files\" {...getInputProps()} />\n                  <div style={{flexBasis: \"100%\", flexGrow: 2, flexShrink: 1, overflowY: \"scroll\"}}>\n                    <ConversationsMessages\n                        identity={this.props.myIdentity}\n                        messages={this.state.messages}/>\n                  </div>\n                  <div>\n                    <Form onSubmit={this.sendMessage}>\n                      <Input.Group compact={true} style={{\n                        width: \"100%\",\n                        display: \"flex\",\n                        flexDirection: \"row\"\n                      }}>\n                        <Input\n                            style={{flexBasis: \"100%\"}}\n                            placeholder={\"Type your message here...\"}\n                            type={\"text\"}\n                            name={\"message\"}\n                            id={styles['type-a-message']}\n                            autoComplete={\"off\"}\n                            disabled={this.state.loadingState !== 'ready'}\n                            onChange={this.onMessageChanged}\n                            value={this.state.newMessage}\n                        />\n                        <Button icon=\"enter\" htmlType=\"submit\" type={\"submit\"}/>\n                      </Input.Group>\n                    </Form>\n                  </div>\n                </div>\n              </div>\n          )}\n\n        </Dropzone>\n    );\n  }\n}\n\nConversation.propTypes = {\n  myIdentity: PropTypes.string.isRequired\n};\n\nexport default Conversation;"]},"metadata":{},"sourceType":"module"}