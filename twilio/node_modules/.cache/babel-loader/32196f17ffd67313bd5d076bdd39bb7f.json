{"ast":null,"code":"\"use strict\";\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\n\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar participants_1 = require(\"./data/participants\");\n\nvar participant_1 = require(\"./participant\");\n\nvar messages_1 = require(\"./data/messages\");\n\nvar util_1 = require(\"./util\");\n\nvar twilio_sdk_type_validator_1 = require(\"twilio-sdk-type-validator\");\n\nvar log = logger_1.Logger.scope('Conversation');\nvar fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  uniqueName: 'uniqueName',\n  state: 'state'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n/**\n * @classdesc A Conversation represents communication between multiple Conversations Clients\n * @property {any} attributes - The Conversation's custom attributes\n * @property {String} createdBy - The identity of the User that created this Conversation\n * @property {Date} dateCreated - The Date this Conversation was created\n * @property {Date} dateUpdated - The Date this Conversation was last updated\n * @property {String} [friendlyName] - The Conversation's name\n * @property {Number|null} lastReadMessageIndex - Index of the last Message the User has read in this Conversation\n * @property {Conversation#LastMessage} lastMessage - Last Message sent to this Conversation\n * @property {Conversation#NotificationLevel} notificationLevel - User Notification level for this Conversation\n * @property {String} sid - The Conversation's unique system identifier\n * @property {Conversation#Status} status - The Conversation's status\n * @property {Conversation#State} state - The Conversation's state\n * @property {String} uniqueName - The Conversation's unique name\n * @fires Conversation#participantJoined\n * @fires Conversation#participantLeft\n * @fires Conversation#participantUpdated\n * @fires Conversation#messageAdded\n * @fires Conversation#messageRemoved\n * @fires Conversation#messageUpdated\n * @fires Conversation#typingEnded\n * @fires Conversation#typingStarted\n * @fires Conversation#updated\n * @fires Conversation#removed\n */\n\n\nvar Conversation = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Conversation, _events_1$EventEmitte);\n  /**\n   * These options can be passed to {@link Conversation#sendMessage}.\n   * @typedef {Object} Conversation#SendMediaOptions\n   * @property {String} contentType - content type of media\n   * @property {String | Buffer} media - content to post\n   */\n\n  /**\n   * These options can be passed to {@link Conversation#sendMessage}.\n   * @typedef {Object} Conversation#SendEmailOptions\n   * @property {String} subject - subject for the message. Ignored for media messages.\n   */\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Conversation\n   * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n    'friendlyName' | 'lastReadMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\n    'notificationLevel' )} Conversation#UpdateReason\n   */\n\n  /**\n   * The status of the Conversation, relative to the Client: whether the Conversation has been <code>joined</code> or the Client is\n   * <code>notParticipating</code> in the Conversation.\n   * @typedef {('notParticipating' | 'joined')} Conversation#Status\n   */\n\n  /**\n   * The User's Notification level for Conversation, determines whether the currently logged-in User will receive\n   * pushes for events in this Conversation. Can be either <code>muted</code> or <code>default</code>,\n   * where <code>default</code> defers to global Service push configuration.\n   * @typedef {('default' | 'muted')} Conversation#NotificationLevel\n   */\n\n  /**\n   * The Conversation's state.\n   * @typedef {Object} Conversation#State\n   * @property {('active' | 'inactive' | 'closed')} current - the current state\n   * @property {Date} dateUpdated - date at which the latest conversation state update happened\n   */\n\n  function Conversation(services, descriptor, sid) {\n    (0, _classCallCheck3.default)(this, Conversation);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Conversation.__proto__ || (0, _getPrototypeOf2.default)(Conversation)).call(this));\n\n    var attributes = descriptor.attributes || {};\n    var createdBy = descriptor.createdBy;\n    var dateCreated = parseTime(descriptor.dateCreated);\n    var dateUpdated = parseTime(descriptor.dateUpdated);\n    var friendlyName = descriptor.friendlyName || null;\n    var lastReadMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    var uniqueName = descriptor.uniqueName || null;\n\n    try {\n      (0, _stringify2.default)(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    _this.services = services;\n    _this.sid = sid;\n    _this.entityName = descriptor.channel;\n    _this.channelState = {\n      uniqueName: uniqueName,\n      status: 'notParticipating',\n      attributes: attributes,\n      createdBy: createdBy,\n      dateCreated: dateCreated,\n      dateUpdated: dateUpdated,\n      friendlyName: friendlyName,\n      lastReadMessageIndex: lastReadMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      _this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    _this.participants = new _map2.default();\n    _this.participantsEntity = new participants_1.Participants(_this, _this.services, _this.participants);\n\n    _this.participantsEntity.on('participantJoined', _this.emit.bind(_this, 'participantJoined'));\n\n    _this.participantsEntity.on('participantLeft', _this.emit.bind(_this, 'participantLeft'));\n\n    _this.participantsEntity.on('participantUpdated', function (args) {\n      return _this.emit('participantUpdated', args);\n    });\n\n    _this.messagesEntity = new messages_1.Messages(_this, services);\n\n    _this.messagesEntity.on('messageAdded', function (message) {\n      return _this._onMessageAdded(message);\n    });\n\n    _this.messagesEntity.on('messageUpdated', function (args) {\n      return _this.emit('messageUpdated', args);\n    });\n\n    _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n\n    return _this;\n  }\n\n  (0, _createClass3.default)(Conversation, [{\n    key: \"_subscribe\",\n\n    /**\n     * The Conversation's last message's information.\n     * @typedef {Object} Conversation#LastMessage\n     * @property {Number} index - Message's index\n     * @property {Date} dateCreated - Message's creation date\n     */\n\n    /**\n     * Load and Subscribe to this Conversation and do not subscribe to its Participants and Messages.\n     * This or _subscribeStreams will need to be called before any events on Conversation will fire.\n     * @returns {Promise}\n     * @private\n     */\n    value: function _subscribe() {\n      var _this2 = this;\n\n      if (this.entityPromise) {\n        return this.entityPromise;\n      }\n\n      return this.entityPromise = this.entityPromise || this.services.syncClient.document({\n        id: this.entityName,\n        mode: 'open_existing'\n      }).then(function (entity) {\n        _this2.entity = entity;\n\n        _this2.entity.on('updated', function (args) {\n          _this2._update(args.data);\n        });\n\n        _this2.entity.on('removed', function () {\n          return _this2.emit('removed', _this2);\n        });\n\n        _this2._update(_this2.entity.data);\n\n        return entity;\n      }).catch(function (err) {\n        _this2.entity = null;\n        _this2.entityPromise = null;\n\n        if (_this2.services.syncClient.connectionState != 'disconnected') {\n          log.error('Failed to get conversation object', err);\n        }\n\n        log.debug('ERROR: Failed to get conversation object', err);\n        throw err;\n      });\n    }\n    /**\n     * Load the attributes of this Conversation and instantiate its Participants and Messages.\n     * This or _subscribe will need to be called before any events on Conversation will fire.\n     * This will need to be called before any events on Participants or Messages will fire\n     * @returns {Promise}\n     * @private\n     */\n\n  }, {\n    key: \"_subscribeStreams\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var messagesObjectName, rosterObjectName;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this._subscribe();\n\n              case 3:\n                log.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n                messagesObjectName = this.entity.data.messages;\n                rosterObjectName = this.entity.data.roster;\n                _context.next = 8;\n                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.participantsEntity.subscribe(rosterObjectName)]);\n\n              case 8:\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (this.services.syncClient.connectionState !== 'disconnected') {\n                  log.error('Failed to subscribe on conversation objects', this.sid, _context.t0);\n                }\n\n                log.debug('ERROR: Failed to subscribe on conversation objects', this.sid, _context.t0);\n                throw _context.t0;\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      function _subscribeStreams() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _subscribeStreams;\n    }()\n    /**\n     * Stop listening for and firing events on this Conversation.\n     * @returns {Promise}\n     * @private\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.entity) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.entity.close();\n\n              case 3:\n                this.entity = null;\n                this.entityPromise = null;\n\n              case 5:\n                return _context2.abrupt(\"return\", _promise2.default.all([this.participantsEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _unsubscribe() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return _unsubscribe;\n    }()\n    /**\n     * Set conversation status\n     * @private\n     */\n\n  }, {\n    key: \"_setStatus\",\n    value: function _setStatus(status, source) {\n      var _this3 = this;\n\n      this.statusSource = source;\n\n      if (this.channelState.status === status) {\n        return;\n      }\n\n      this.channelState.status = status;\n\n      if (status === 'joined') {\n        this._subscribeStreams().catch(function (err) {\n          log.debug('ERROR while setting conversation status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      } else if (this.entityPromise) {\n        this._unsubscribe().catch(function (err) {\n          log.debug('ERROR while setting conversation status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      }\n    }\n    /**\n     * If conversation's status update source\n     * @private\n     * @return {Conversations.DataSource}\n     */\n\n  }, {\n    key: \"_statusSource\",\n    value: function _statusSource() {\n      return this.statusSource;\n    }\n  }, {\n    key: \"_update\",\n\n    /**\n     * Updates local conversation object with new values\n     * @private\n     */\n    value: function _update(update) {\n      var _a, _b, _c, _d, _e;\n\n      log.trace('_update', update);\n      Conversation.preprocessUpdate(update, this.sid);\n      var updateReasons = new _set2.default();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(update)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          var localKey = fieldMappings[key];\n\n          if (!localKey) {\n            continue;\n          }\n\n          switch (localKey) {\n            case fieldMappings.status:\n              if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {\n                break;\n              }\n\n              this.channelState.status = update.status;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.attributes:\n              if (util_1.isDeepEqual(this.channelState.attributes, update.attributes)) {\n                break;\n              }\n\n              this.channelState.attributes = update.attributes;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.lastConsumedMessageIndex:\n              if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastReadMessageIndex) {\n                break;\n              }\n\n              this.channelState.lastReadMessageIndex = update.lastConsumedMessageIndex;\n              updateReasons.add('lastReadMessageIndex');\n              break;\n\n            case fieldMappings.lastMessage:\n              if (this.channelState.lastMessage && !update.lastMessage) {\n                delete this.channelState.lastMessage;\n                updateReasons.add(localKey);\n                break;\n              }\n\n              this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n              if (((_a = update.lastMessage) === null || _a === void 0 ? void 0 : _a.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {\n                this.channelState.lastMessage.index = update.lastMessage.index;\n                updateReasons.add(localKey);\n              }\n\n              if (((_b = update.lastMessage) === null || _b === void 0 ? void 0 : _b.timestamp) !== undefined && ((_d = (_c = this.channelState.lastMessage) === null || _c === void 0 ? void 0 : _c.dateCreated) === null || _d === void 0 ? void 0 : _d.getTime()) !== update.lastMessage.timestamp.getTime()) {\n                this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n                updateReasons.add(localKey);\n              }\n\n              if (util_1.isDeepEqual(this.channelState.lastMessage, {})) {\n                delete this.channelState.lastMessage;\n              }\n\n              break;\n\n            case fieldMappings.state:\n              var state = update.state || undefined;\n\n              if (state !== undefined) {\n                state.dateUpdated = new Date(state.dateUpdated);\n              }\n\n              if (util_1.isDeepEqual(this.channelState.state, state)) {\n                break;\n              }\n\n              this.channelState.state = state;\n              updateReasons.add(localKey);\n              break;\n\n            default:\n              var isDate = update[key] instanceof Date;\n              var keysMatchAsDates = isDate && ((_e = this.channelState[localKey]) === null || _e === void 0 ? void 0 : _e.getTime()) === update[key].getTime();\n              var keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n              if (keysMatchAsDates || keysMatchAsNonDates) {\n                break;\n              }\n\n              this.channelState[localKey] = update[key];\n              updateReasons.add(localKey);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (updateReasons.size > 0) {\n        this.emit('updated', {\n          conversation: this,\n          updateReasons: [].concat((0, _toConsumableArray3.default)(updateReasons))\n        });\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_onMessageAdded\",\n    value: function _onMessageAdded(message) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = (0, _getIterator3.default)(this.participants.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var participant = _step2.value;\n\n          if (participant.identity === message.author) {\n            participant._endTyping();\n\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.emit('messageAdded', message);\n    }\n    /**\n     * Add a participant to the Conversation by its Identity.\n     * @param {String} identity - Identity of the Client to add\n     * @param {any} [attributes] Attributes to be attached to the participant\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(identity, attributes) {\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.participantsEntity.add(identity, attributes));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function add(_x, _x2) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * Add a non-chat participant to the Conversation.\n     *\n     * @param {String} proxyAddress Proxy (Twilio) address of the participant\n     * @param {String} address User address of the participant\n     * @param {any} [attributes] Attributes to be attached to the participant\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"addNonChatParticipant\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(proxyAddress, address) {\n        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.participantsEntity.addNonChatParticipant(proxyAddress, address, attributes));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function addNonChatParticipant(_x4, _x5) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return addNonChatParticipant;\n    }()\n    /**\n     * Advance Conversation's last read Message index to current read horizon.\n     * Rejects if User is not Participant of Conversation.\n     * Last read Message index is updated only if new index value is higher than previous.\n     * @param {Number} index - Message index to advance to as last read\n     * @returns {Promise<number>} resulting unread messages count in the conversation\n     */\n\n  }, {\n    key: \"advanceLastReadMessageIndex\",\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(index) {\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context5.abrupt(\"return\", this.services.readHorizon.advanceLastReadMessageIndexForConversation(this.sid, index, this.lastReadMessageIndex));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function advanceLastReadMessageIndex(_x6) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return advanceLastReadMessageIndex;\n    }()\n    /**\n     * Delete the Conversation and unsubscribe from its events.\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.services.session.addCommand('destroyChannel', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context6.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _delete() {\n        return _ref6.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * Get the custom attributes of this Conversation.\n     * @returns {Promise<any>} attributes of this Conversation\n     */\n\n  }, {\n    key: \"getAttributes\",\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._subscribe();\n\n              case 2:\n                return _context7.abrupt(\"return\", this.attributes);\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getAttributes() {\n        return _ref7.apply(this, arguments);\n      }\n\n      return getAttributes;\n    }()\n    /**\n     * Returns messages from conversation using paginator interface.\n     * @param {Number} [pageSize=30] Number of messages to return in single chunk\n     * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n     * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\n     *                                                          from newer to older. 'forward' will query in opposite direction\n     * @returns {Promise<Paginator<Message>>} page of messages\n     */\n\n  }, {\n    key: \"getMessages\",\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(pageSize, anchor, direction) {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context8.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getMessages(_x7, _x8, _x9) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return getMessages;\n    }()\n    /**\n     * Get a list of all Participants joined to this Conversation.\n     * @returns {Promise<Participant[]>}\n     */\n\n  }, {\n    key: \"getParticipants\",\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\n        return _regenerator2.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context9.abrupt(\"return\", this.participantsEntity.getParticipants());\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getParticipants() {\n        return _ref9.apply(this, arguments);\n      }\n\n      return getParticipants;\n    }()\n    /**\n     * Get conversation participants count.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Conversation system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any UI badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number>}\n     */\n\n  }, {\n    key: \"getParticipantsCount\",\n    value: function () {\n      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context10.sent;\n                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                _context10.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context10.sent;\n                return _context10.abrupt(\"return\", response.body.members_count);\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getParticipantsCount() {\n        return _ref10.apply(this, arguments);\n      }\n\n      return getParticipantsCount;\n    }()\n    /**\n     * Get a Participant by its SID.\n     * @param {String} participantSid - Participant sid\n     * @returns {Promise<Participant>}\n     */\n\n  }, {\n    key: \"getParticipantBySid\",\n    value: function () {\n      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(participantSid) {\n        return _regenerator2.default.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.participantsEntity.getParticipantBySid(participantSid));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getParticipantBySid(_x10) {\n        return _ref11.apply(this, arguments);\n      }\n\n      return getParticipantBySid;\n    }()\n    /**\n     * Get a Participant by its identity.\n     * @param {String} identity - Participant identity\n     * @returns {Promise<Participant>}\n     */\n\n  }, {\n    key: \"getParticipantByIdentity\",\n    value: function () {\n      var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(identity) {\n        return _regenerator2.default.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.participantsEntity.getParticipantByIdentity(identity));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getParticipantByIdentity(_x11) {\n        return _ref12.apply(this, arguments);\n      }\n\n      return getParticipantByIdentity;\n    }()\n    /**\n     * Get total message count in a conversation.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Conversations system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any UI badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number>}\n     */\n\n  }, {\n    key: \"getMessagesCount\",\n    value: function () {\n      var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context13.sent;\n                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                _context13.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context13.sent;\n                return _context13.abrupt(\"return\", response.body.messages_count);\n\n              case 8:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getMessagesCount() {\n        return _ref13.apply(this, arguments);\n      }\n\n      return getMessagesCount;\n    }()\n    /**\n     * Get unread messages count for the User if they are a Participant of this Conversation.\n     * Rejects if the User is not a Participant of the Conversation.\n     * <br/>\n     * Use this method to obtain the number of unread messages together with\n     * updateLastReadMessageIndex() instead of relying on the\n     * Message indices which may have gaps. See Message.index for details.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * This is quite useful for any “unread messages count” badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number|null>}\n     */\n\n  }, {\n    key: \"getUnreadMessagesCount\",\n    value: function () {\n      var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context14.sent;\n                url = new util_1.UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();\n                _context14.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context14.sent;\n\n                if (!(response.body.channels.length && response.body.channels[0].channel_sid == this.sid)) {\n                  _context14.next = 11;\n                  break;\n                }\n\n                if (!(typeof response.body.channels[0].unread_messages_count !== 'undefined' && response.body.channels[0].unread_messages_count != null)) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", response.body.channels[0].unread_messages_count);\n\n              case 10:\n                return _context14.abrupt(\"return\", null);\n\n              case 11:\n                throw new Error('Conversation is not in user conversations list');\n\n              case 12:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getUnreadMessagesCount() {\n        return _ref14.apply(this, arguments);\n      }\n\n      return getUnreadMessagesCount;\n    }()\n    /**\n     * Join the Conversation and subscribe to its events.\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"join\",\n    value: function () {\n      var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15() {\n        return _regenerator2.default.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.services.session.addCommand('joinChannelV2', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context15.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function join() {\n        return _ref15.apply(this, arguments);\n      }\n\n      return join;\n    }()\n    /**\n     * Leave the Conversation.\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"leave\",\n    value: function () {\n      var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {\n        return _regenerator2.default.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                if (!(this.channelState.status === 'joined')) {\n                  _context16.next = 3;\n                  break;\n                }\n\n                _context16.next = 3;\n                return this.services.session.addCommand('leaveChannel', {\n                  channelSid: this.sid\n                });\n\n              case 3:\n                return _context16.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function leave() {\n        return _ref16.apply(this, arguments);\n      }\n\n      return leave;\n    }()\n    /**\n     * Remove a Participant from the Conversation. When a string is passed as the argument, it will assume that the string is an identity.\n     * @param {String|Participant} participant - identity or participant object to remove\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"removeParticipant\",\n    value: function () {\n      var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17(participant) {\n        return _regenerator2.default.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (!(participant instanceof participant_1.Participant)) {\n                  _context17.next = 4;\n                  break;\n                }\n\n                _context17.next = 3;\n                return this.participantsEntity.removeBySid(participant.sid);\n\n              case 3:\n                return _context17.abrupt(\"return\");\n\n              case 4:\n                _context17.next = 6;\n                return this.participantsEntity.removeByIdentity(participant);\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function removeParticipant(_x12) {\n        return _ref17.apply(this, arguments);\n      }\n\n      return removeParticipant;\n    }()\n    /**\n     * Send a Message in the Conversation.\n     * @param {String|FormData|Conversation#SendMediaOptions|null} message - The message body for text message,\n     * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n     * @param {any} [messageAttributes] - attributes for the message\n     * @param {Conversation#SendEmailOptions} [emailOptions] - email options for the message\n     * @returns {Promise<number>} new Message's index in the Conversation's messages list\n     */\n\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(message, messageAttributes, emailOptions) {\n        var _response, response;\n\n        return _regenerator2.default.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                if (!(typeof message === 'string' || message === null)) {\n                  _context18.next = 5;\n                  break;\n                }\n\n                _context18.next = 3;\n                return this.messagesEntity.send(message, messageAttributes, emailOptions);\n\n              case 3:\n                _response = _context18.sent;\n                return _context18.abrupt(\"return\", util_1.parseToNumber(_response.messageId));\n\n              case 5:\n                _context18.next = 7;\n                return this.messagesEntity.sendMedia(message, messageAttributes, emailOptions);\n\n              case 7:\n                response = _context18.sent;\n                return _context18.abrupt(\"return\", util_1.parseToNumber(response.messageId));\n\n              case 9:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function sendMessage(_x13, _x14, _x15) {\n        return _ref18.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n    /**\n     * Set last read Conversation's Message index to last known Message's index in this Conversation.\n     * @returns {Promise<number>} resulting unread messages count in the conversation\n     */\n\n  }, {\n    key: \"setAllMessagesRead\",\n    value: function () {\n      var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19() {\n        var messagesPage;\n        return _regenerator2.default.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                _context19.next = 4;\n                return this.getMessages(1);\n\n              case 4:\n                messagesPage = _context19.sent;\n\n                if (!(messagesPage.items.length > 0)) {\n                  _context19.next = 7;\n                  break;\n                }\n\n                return _context19.abrupt(\"return\", this.advanceLastReadMessageIndex(messagesPage.items[0].index));\n\n              case 7:\n                return _context19.abrupt(\"return\", _promise2.default.resolve(0));\n\n              case 8:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function setAllMessagesRead() {\n        return _ref19.apply(this, arguments);\n      }\n\n      return setAllMessagesRead;\n    }()\n    /**\n     * Set all messages in the conversation unread.\n     * @returns {Promise<number>} resulting unread messages count in the conversation\n     */\n\n  }, {\n    key: \"setAllMessagesUnread\",\n    value: function () {\n      var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {\n        return _regenerator2.default.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context20.abrupt(\"return\", this.services.readHorizon.updateLastReadMessageIndexForConversation(this.sid, null));\n\n              case 3:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function setAllMessagesUnread() {\n        return _ref20.apply(this, arguments);\n      }\n\n      return setAllMessagesUnread;\n    }()\n    /**\n     * Set User Notification level for this conversation.\n     * @param {Conversation#NotificationLevel} notificationLevel - The new user notification level\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"setUserNotificationLevel\",\n    value: function () {\n      var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(notificationLevel) {\n        return _regenerator2.default.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.services.session.addCommand('editNotificationLevel', {\n                  channelSid: this.sid,\n                  notificationLevel: notificationLevel\n                });\n\n              case 2:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function setUserNotificationLevel(_x16) {\n        return _ref21.apply(this, arguments);\n      }\n\n      return setUserNotificationLevel;\n    }()\n    /**\n     * Send a notification to the server indicating that this Client is currently typing in this Conversation.\n     * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"typing\",\n    value: function typing() {\n      return this.services.typingIndicator.send(this.sid);\n    }\n    /**\n     * Update the Conversation's attributes.\n     * @param {any} attributes - The new attributes object\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(attributes) {\n        return _regenerator2.default.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.services.session.addCommand('editAttributes', {\n                  channelSid: this.sid,\n                  attributes: (0, _stringify2.default)(attributes)\n                });\n\n              case 2:\n                return _context22.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function updateAttributes(_x17) {\n        return _ref22.apply(this, arguments);\n      }\n\n      return updateAttributes;\n    }()\n    /**\n     * Update the Conversation's friendlyName.\n     * @param {String|null} name - The new Conversation friendlyName\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"updateFriendlyName\",\n    value: function () {\n      var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(name) {\n        return _regenerator2.default.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                if (!(this.channelState.friendlyName !== name)) {\n                  _context23.next = 3;\n                  break;\n                }\n\n                _context23.next = 3;\n                return this.services.session.addCommand('editFriendlyName', {\n                  channelSid: this.sid,\n                  friendlyName: name\n                });\n\n              case 3:\n                return _context23.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function updateFriendlyName(_x18) {\n        return _ref23.apply(this, arguments);\n      }\n\n      return updateFriendlyName;\n    }()\n    /**\n     * Set Conversation's last read Message index to current read horizon.\n     * @param {Number|null} index - Message index to set as last read.\n     * If null provided, then the behavior is identical to {@link Conversation#setAllMessagesUnread}\n     * @returns {Promise<number>} resulting unread messages count in the conversation\n     */\n\n  }, {\n    key: \"updateLastReadMessageIndex\",\n    value: function () {\n      var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(index) {\n        return _regenerator2.default.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context24.abrupt(\"return\", this.services.readHorizon.updateLastReadMessageIndexForConversation(this.sid, index));\n\n              case 3:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function updateLastReadMessageIndex(_x19) {\n        return _ref24.apply(this, arguments);\n      }\n\n      return updateLastReadMessageIndex;\n    }()\n    /**\n     * Update the Conversation's unique name.\n     * @param {String|null} uniqueName - New unique name for the Conversation. Setting unique name to null removes it.\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"updateUniqueName\",\n    value: function () {\n      var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(uniqueName) {\n        return _regenerator2.default.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                if (!(this.channelState.uniqueName !== uniqueName)) {\n                  _context25.next = 4;\n                  break;\n                }\n\n                if (!uniqueName) {\n                  uniqueName = '';\n                }\n\n                _context25.next = 4;\n                return this.services.session.addCommand('editUniqueName', {\n                  channelSid: this.sid,\n                  uniqueName: uniqueName\n                });\n\n              case 4:\n                return _context25.abrupt(\"return\", this);\n\n              case 5:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function updateUniqueName(_x20) {\n        return _ref25.apply(this, arguments);\n      }\n\n      return updateUniqueName;\n    }()\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.channelState.uniqueName;\n    }\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this.channelState.status;\n    }\n  }, {\n    key: \"friendlyName\",\n    get: function get() {\n      return this.channelState.friendlyName;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.channelState.dateUpdated;\n    }\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.channelState.dateCreated;\n    }\n  }, {\n    key: \"createdBy\",\n    get: function get() {\n      return this.channelState.createdBy;\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.channelState.attributes;\n    }\n  }, {\n    key: \"lastReadMessageIndex\",\n    get: function get() {\n      return this.channelState.lastReadMessageIndex;\n    }\n  }, {\n    key: \"lastMessage\",\n    get: function get() {\n      return this.channelState.lastMessage;\n    }\n  }, {\n    key: \"notificationLevel\",\n    get: function get() {\n      return this.channelState.notificationLevel;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.channelState.state;\n    }\n  }], [{\n    key: \"preprocessUpdate\",\n    value: function preprocessUpdate(update, conversationSid) {\n      try {\n        if (typeof update.attributes === 'string') {\n          update.attributes = JSON.parse(update.attributes);\n        } else if (update.attributes) {\n          (0, _stringify2.default)(update.attributes);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed attributes from the server for conversation: ' + conversationSid);\n        update.attributes = {};\n      }\n\n      try {\n        if (update.dateCreated) {\n          update.dateCreated = new Date(update.dateCreated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateCreated from the server for conversation: ' + conversationSid);\n        delete update.dateCreated;\n      }\n\n      try {\n        if (update.dateUpdated) {\n          update.dateUpdated = new Date(update.dateUpdated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateUpdated from the server for conversation: ' + conversationSid);\n        delete update.dateUpdated;\n      }\n\n      try {\n        if (update.lastMessage && update.lastMessage.timestamp) {\n          update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed lastMessage.timestamp from the server for conversation: ' + conversationSid);\n        delete update.lastMessage.timestamp;\n      }\n    }\n  }]);\n  return Conversation;\n}(events_1.EventEmitter);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString, ['undefined', 'string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"add\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString, twilio_sdk_type_validator_1.nonEmptyString, ['undefined', 'object']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"addNonChatParticipant\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonNegativeInteger), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"advanceLastReadMessageIndex\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.nonNegativeInteger], ['undefined', twilio_sdk_type_validator_1.nonNegativeInteger], ['undefined', twilio_sdk_type_validator_1.literal('backwards', 'forward')]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Number, String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getMessages\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getParticipantBySid\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getParticipantByIdentity\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync([twilio_sdk_type_validator_1.nonEmptyString, participant_1.Participant]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"removeParticipant\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null), // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\ntwilio_sdk_type_validator_1.custom(function (value) {\n  return [value instanceof FormData, 'an instance of FormData'];\n}), twilio_sdk_type_validator_1.objectSchema('media options', {\n  contentType: twilio_sdk_type_validator_1.nonEmptyString,\n  media: twilio_sdk_type_validator_1.custom(function (value) {\n    var isValid = typeof value === 'string' && value.length > 0 || value instanceof Uint8Array || value instanceof ArrayBuffer;\n\n    if (typeof Blob === 'function') {\n      isValid = isValid || value instanceof Blob;\n    }\n\n    return [isValid, 'a non-empty string, an instance of Buffer or an instance of Blob'];\n  })\n})], ['undefined', 'string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)], ['undefined', twilio_sdk_type_validator_1.literal(null), twilio_sdk_type_validator_1.objectSchema('email attributes', {\n  subject: [twilio_sdk_type_validator_1.nonEmptyString, 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"sendMessage\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('default', 'muted')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"setUserNotificationLevel\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateAttributes\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateFriendlyName\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync([twilio_sdk_type_validator_1.literal(null), twilio_sdk_type_validator_1.nonNegativeInteger]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateLastReadMessageIndex\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateUniqueName\", null);\n\nexports.Conversation = Conversation;\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Conversation#participantJoined\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant has left the Conversation.\n * @event Conversation#participantLeft\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant's fields has been updated.\n * @event Conversation#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n\n/**\n * Fired when a new Message has been added to the Conversation.\n * @event Conversation#messageAdded\n * @type {Message}\n */\n\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Conversation#messageRemoved\n * @type {Message}\n */\n\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Conversation#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n\n/**\n * Fired when a Participant has stopped typing.\n * @event Conversation#typingEnded\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant has started typing.\n * @event Conversation#typingStarted\n * @type {Participant}\n */\n\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * @event Conversation#updated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n\n/**\n * Fired when the Conversation was destroyed or currently logged in User has left private Conversation\n * @event Conversation#removed\n * @type {Conversation}\n */","map":{"version":3,"sources":["/Users/abdulkhan/Documents/waymax/Waymax/node_modules/@twilio/conversations/browser/conversation.js"],"names":["_keys","require","_keys2","_interopRequireDefault","_getIterator2","_getIterator3","_toConsumableArray2","_toConsumableArray3","_set","_set2","_regenerator","_regenerator2","_promise","_promise2","_asyncToGenerator2","_asyncToGenerator3","_map","_map2","_stringify","_stringify2","_isInteger","_isInteger2","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_metadata","_metadata2","_defineProperty","_defineProperty2","_typeof2","_typeof3","_getOwnPropertyDescriptor","_getOwnPropertyDescriptor2","obj","__esModule","default","__decorate","undefined","decorators","target","key","desc","c","arguments","length","r","d","Reflect","decorate","i","__metadata","k","v","Object","defineProperty","exports","value","events_1","logger_1","participants_1","participant_1","messages_1","util_1","twilio_sdk_type_validator_1","log","Logger","scope","fieldMappings","lastMessage","attributes","createdBy","dateCreated","dateUpdated","friendlyName","lastConsumedMessageIndex","notificationLevel","sid","status","uniqueName","state","parseTime","timeString","Date","e","Conversation","_events_1$EventEmitte","services","descriptor","_this","__proto__","call","lastReadMessageIndex","Error","entityName","channel","channelState","participants","participantsEntity","Participants","on","emit","bind","args","messagesEntity","Messages","message","_onMessageAdded","_subscribe","_this2","entityPromise","syncClient","document","id","mode","then","entity","_update","data","catch","err","connectionState","error","debug","_ref","mark","_callee","messagesObjectName","rosterObjectName","wrap","_callee$","_context","prev","next","trace","messages","roster","all","subscribe","t0","stop","_subscribeStreams","apply","_ref2","_callee2","_callee2$","_context2","close","abrupt","unsubscribe","_unsubscribe","_setStatus","source","_this3","statusSource","_statusSource","update","_a","_b","_c","_d","_e","preprocessUpdate","updateReasons","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","done","localKey","add","isDeepEqual","index","timestamp","getTime","isDate","keysMatchAsDates","keysMatchAsNonDates","return","size","conversation","concat","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","values","_step2","participant","identity","author","_endTyping","_ref3","_callee3","_callee3$","_context3","_x","_x2","_ref4","_callee4","proxyAddress","address","_callee4$","_context4","addNonChatParticipant","_x4","_x5","_ref5","_callee5","_callee5$","_context5","readHorizon","advanceLastReadMessageIndexForConversation","advanceLastReadMessageIndex","_x6","_ref6","_callee6","_callee6$","_context6","session","addCommand","channelSid","_delete","_ref7","_callee7","_callee7$","_context7","getAttributes","_ref8","_callee8","pageSize","anchor","direction","_callee8$","_context8","getMessages","_x7","_x8","_x9","_ref9","_callee9","_callee9$","_context9","getParticipants","_ref10","_callee10","links","url","response","_callee10$","_context10","getSessionLinks","sent","UriBuilder","publicChannelsUrl","path","build","network","get","body","members_count","getParticipantsCount","_ref11","_callee11","participantSid","_callee11$","_context11","getParticipantBySid","_x10","_ref12","_callee12","_callee12$","_context12","getParticipantByIdentity","_x11","_ref13","_callee13","_callee13$","_context13","messages_count","getMessagesCount","_ref14","_callee14","_callee14$","_context14","myChannelsUrl","arg","channels","channel_sid","unread_messages_count","getUnreadMessagesCount","_ref15","_callee15","_callee15$","_context15","join","_ref16","_callee16","_callee16$","_context16","leave","_ref17","_callee17","_callee17$","_context17","Participant","removeBySid","removeByIdentity","removeParticipant","_x12","_ref18","_callee18","messageAttributes","emailOptions","_response","_callee18$","_context18","send","parseToNumber","messageId","sendMedia","sendMessage","_x13","_x14","_x15","_ref19","_callee19","messagesPage","_callee19$","_context19","items","resolve","setAllMessagesRead","_ref20","_callee20","_callee20$","_context20","updateLastReadMessageIndexForConversation","setAllMessagesUnread","_ref21","_callee21","_callee21$","_context21","setUserNotificationLevel","_x16","typing","typingIndicator","_ref22","_callee22","_callee22$","_context22","updateAttributes","_x17","_ref23","_callee23","name","_callee23$","_context23","updateFriendlyName","_x18","_ref24","_callee24","_callee24$","_context24","updateLastReadMessageIndex","_x19","_ref25","_callee25","_callee25$","_context25","updateUniqueName","_x20","conversationSid","JSON","parse","warn","EventEmitter","validateTypesAsync","nonEmptyString","literal","Function","String","prototype","nonNegativeInteger","Number","custom","FormData","objectSchema","contentType","media","isValid","Uint8Array","ArrayBuffer","Blob","subject"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n        d;\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    }return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"events\");\nvar logger_1 = require(\"./logger\");\nvar participants_1 = require(\"./data/participants\");\nvar participant_1 = require(\"./participant\");\nvar messages_1 = require(\"./data/messages\");\nvar util_1 = require(\"./util\");\nvar twilio_sdk_type_validator_1 = require(\"twilio-sdk-type-validator\");\nvar log = logger_1.Logger.scope('Conversation');\nvar fieldMappings = {\n    lastMessage: 'lastMessage',\n    attributes: 'attributes',\n    createdBy: 'createdBy',\n    dateCreated: 'dateCreated',\n    dateUpdated: 'dateUpdated',\n    friendlyName: 'friendlyName',\n    lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n    notificationLevel: 'notificationLevel',\n    sid: 'sid',\n    status: 'status',\n    uniqueName: 'uniqueName',\n    state: 'state'\n};\nfunction parseTime(timeString) {\n    try {\n        return new Date(timeString);\n    } catch (e) {\n        return null;\n    }\n}\n/**\n * @classdesc A Conversation represents communication between multiple Conversations Clients\n * @property {any} attributes - The Conversation's custom attributes\n * @property {String} createdBy - The identity of the User that created this Conversation\n * @property {Date} dateCreated - The Date this Conversation was created\n * @property {Date} dateUpdated - The Date this Conversation was last updated\n * @property {String} [friendlyName] - The Conversation's name\n * @property {Number|null} lastReadMessageIndex - Index of the last Message the User has read in this Conversation\n * @property {Conversation#LastMessage} lastMessage - Last Message sent to this Conversation\n * @property {Conversation#NotificationLevel} notificationLevel - User Notification level for this Conversation\n * @property {String} sid - The Conversation's unique system identifier\n * @property {Conversation#Status} status - The Conversation's status\n * @property {Conversation#State} state - The Conversation's state\n * @property {String} uniqueName - The Conversation's unique name\n * @fires Conversation#participantJoined\n * @fires Conversation#participantLeft\n * @fires Conversation#participantUpdated\n * @fires Conversation#messageAdded\n * @fires Conversation#messageRemoved\n * @fires Conversation#messageUpdated\n * @fires Conversation#typingEnded\n * @fires Conversation#typingStarted\n * @fires Conversation#updated\n * @fires Conversation#removed\n */\n\nvar Conversation = function (_events_1$EventEmitte) {\n    (0, _inherits3.default)(Conversation, _events_1$EventEmitte);\n\n    /**\n     * These options can be passed to {@link Conversation#sendMessage}.\n     * @typedef {Object} Conversation#SendMediaOptions\n     * @property {String} contentType - content type of media\n     * @property {String | Buffer} media - content to post\n     */\n    /**\n     * These options can be passed to {@link Conversation#sendMessage}.\n     * @typedef {Object} Conversation#SendEmailOptions\n     * @property {String} subject - subject for the message. Ignored for media messages.\n     */\n    /**\n     * The update reason for <code>updated</code> event emitted on Conversation\n     * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n      'friendlyName' | 'lastReadMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\n      'notificationLevel' )} Conversation#UpdateReason\n     */\n    /**\n     * The status of the Conversation, relative to the Client: whether the Conversation has been <code>joined</code> or the Client is\n     * <code>notParticipating</code> in the Conversation.\n     * @typedef {('notParticipating' | 'joined')} Conversation#Status\n     */\n    /**\n     * The User's Notification level for Conversation, determines whether the currently logged-in User will receive\n     * pushes for events in this Conversation. Can be either <code>muted</code> or <code>default</code>,\n     * where <code>default</code> defers to global Service push configuration.\n     * @typedef {('default' | 'muted')} Conversation#NotificationLevel\n     */\n    /**\n     * The Conversation's state.\n     * @typedef {Object} Conversation#State\n     * @property {('active' | 'inactive' | 'closed')} current - the current state\n     * @property {Date} dateUpdated - date at which the latest conversation state update happened\n     */\n    function Conversation(services, descriptor, sid) {\n        (0, _classCallCheck3.default)(this, Conversation);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Conversation.__proto__ || (0, _getPrototypeOf2.default)(Conversation)).call(this));\n\n        var attributes = descriptor.attributes || {};\n        var createdBy = descriptor.createdBy;\n        var dateCreated = parseTime(descriptor.dateCreated);\n        var dateUpdated = parseTime(descriptor.dateUpdated);\n        var friendlyName = descriptor.friendlyName || null;\n        var lastReadMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n        var uniqueName = descriptor.uniqueName || null;\n        try {\n            (0, _stringify2.default)(attributes);\n        } catch (e) {\n            throw new Error('Attributes must be a valid JSON object.');\n        }\n        _this.services = services;\n        _this.sid = sid;\n        _this.entityName = descriptor.channel;\n        _this.channelState = {\n            uniqueName: uniqueName,\n            status: 'notParticipating',\n            attributes: attributes,\n            createdBy: createdBy,\n            dateCreated: dateCreated,\n            dateUpdated: dateUpdated,\n            friendlyName: friendlyName,\n            lastReadMessageIndex: lastReadMessageIndex\n        };\n        if (descriptor.notificationLevel) {\n            _this.channelState.notificationLevel = descriptor.notificationLevel;\n        }\n        _this.participants = new _map2.default();\n        _this.participantsEntity = new participants_1.Participants(_this, _this.services, _this.participants);\n        _this.participantsEntity.on('participantJoined', _this.emit.bind(_this, 'participantJoined'));\n        _this.participantsEntity.on('participantLeft', _this.emit.bind(_this, 'participantLeft'));\n        _this.participantsEntity.on('participantUpdated', function (args) {\n            return _this.emit('participantUpdated', args);\n        });\n        _this.messagesEntity = new messages_1.Messages(_this, services);\n        _this.messagesEntity.on('messageAdded', function (message) {\n            return _this._onMessageAdded(message);\n        });\n        _this.messagesEntity.on('messageUpdated', function (args) {\n            return _this.emit('messageUpdated', args);\n        });\n        _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n        return _this;\n    }\n\n    (0, _createClass3.default)(Conversation, [{\n        key: \"_subscribe\",\n\n        /**\n         * The Conversation's last message's information.\n         * @typedef {Object} Conversation#LastMessage\n         * @property {Number} index - Message's index\n         * @property {Date} dateCreated - Message's creation date\n         */\n        /**\n         * Load and Subscribe to this Conversation and do not subscribe to its Participants and Messages.\n         * This or _subscribeStreams will need to be called before any events on Conversation will fire.\n         * @returns {Promise}\n         * @private\n         */\n        value: function _subscribe() {\n            var _this2 = this;\n\n            if (this.entityPromise) {\n                return this.entityPromise;\n            }\n            return this.entityPromise = this.entityPromise || this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' }).then(function (entity) {\n                _this2.entity = entity;\n                _this2.entity.on('updated', function (args) {\n                    _this2._update(args.data);\n                });\n                _this2.entity.on('removed', function () {\n                    return _this2.emit('removed', _this2);\n                });\n                _this2._update(_this2.entity.data);\n                return entity;\n            }).catch(function (err) {\n                _this2.entity = null;\n                _this2.entityPromise = null;\n                if (_this2.services.syncClient.connectionState != 'disconnected') {\n                    log.error('Failed to get conversation object', err);\n                }\n                log.debug('ERROR: Failed to get conversation object', err);\n                throw err;\n            });\n        }\n        /**\n         * Load the attributes of this Conversation and instantiate its Participants and Messages.\n         * This or _subscribe will need to be called before any events on Conversation will fire.\n         * This will need to be called before any events on Participants or Messages will fire\n         * @returns {Promise}\n         * @private\n         */\n\n    }, {\n        key: \"_subscribeStreams\",\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                var messagesObjectName, rosterObjectName;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this._subscribe();\n\n                            case 3:\n                                log.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n                                messagesObjectName = this.entity.data.messages;\n                                rosterObjectName = this.entity.data.roster;\n                                _context.next = 8;\n                                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.participantsEntity.subscribe(rosterObjectName)]);\n\n                            case 8:\n                                _context.next = 15;\n                                break;\n\n                            case 10:\n                                _context.prev = 10;\n                                _context.t0 = _context[\"catch\"](0);\n\n                                if (this.services.syncClient.connectionState !== 'disconnected') {\n                                    log.error('Failed to subscribe on conversation objects', this.sid, _context.t0);\n                                }\n                                log.debug('ERROR: Failed to subscribe on conversation objects', this.sid, _context.t0);\n                                throw _context.t0;\n\n                            case 15:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this, [[0, 10]]);\n            }));\n\n            function _subscribeStreams() {\n                return _ref.apply(this, arguments);\n            }\n\n            return _subscribeStreams;\n        }()\n        /**\n         * Stop listening for and firing events on this Conversation.\n         * @returns {Promise}\n         * @private\n         */\n\n    }, {\n        key: \"_unsubscribe\",\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                if (!this.entity) {\n                                    _context2.next = 5;\n                                    break;\n                                }\n\n                                _context2.next = 3;\n                                return this.entity.close();\n\n                            case 3:\n                                this.entity = null;\n                                this.entityPromise = null;\n\n                            case 5:\n                                return _context2.abrupt(\"return\", _promise2.default.all([this.participantsEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n\n                            case 6:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function _unsubscribe() {\n                return _ref2.apply(this, arguments);\n            }\n\n            return _unsubscribe;\n        }()\n        /**\n         * Set conversation status\n         * @private\n         */\n\n    }, {\n        key: \"_setStatus\",\n        value: function _setStatus(status, source) {\n            var _this3 = this;\n\n            this.statusSource = source;\n            if (this.channelState.status === status) {\n                return;\n            }\n            this.channelState.status = status;\n            if (status === 'joined') {\n                this._subscribeStreams().catch(function (err) {\n                    log.debug('ERROR while setting conversation status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n            } else if (this.entityPromise) {\n                this._unsubscribe().catch(function (err) {\n                    log.debug('ERROR while setting conversation status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n            }\n        }\n        /**\n         * If conversation's status update source\n         * @private\n         * @return {Conversations.DataSource}\n         */\n\n    }, {\n        key: \"_statusSource\",\n        value: function _statusSource() {\n            return this.statusSource;\n        }\n    }, {\n        key: \"_update\",\n\n        /**\n         * Updates local conversation object with new values\n         * @private\n         */\n        value: function _update(update) {\n            var _a, _b, _c, _d, _e;\n            log.trace('_update', update);\n            Conversation.preprocessUpdate(update, this.sid);\n            var updateReasons = new _set2.default();\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(update)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var key = _step.value;\n\n                    var localKey = fieldMappings[key];\n                    if (!localKey) {\n                        continue;\n                    }\n                    switch (localKey) {\n                        case fieldMappings.status:\n                            if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {\n                                break;\n                            }\n                            this.channelState.status = update.status;\n                            updateReasons.add(localKey);\n                            break;\n                        case fieldMappings.attributes:\n                            if (util_1.isDeepEqual(this.channelState.attributes, update.attributes)) {\n                                break;\n                            }\n                            this.channelState.attributes = update.attributes;\n                            updateReasons.add(localKey);\n                            break;\n                        case fieldMappings.lastConsumedMessageIndex:\n                            if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastReadMessageIndex) {\n                                break;\n                            }\n                            this.channelState.lastReadMessageIndex = update.lastConsumedMessageIndex;\n                            updateReasons.add('lastReadMessageIndex');\n                            break;\n                        case fieldMappings.lastMessage:\n                            if (this.channelState.lastMessage && !update.lastMessage) {\n                                delete this.channelState.lastMessage;\n                                updateReasons.add(localKey);\n                                break;\n                            }\n                            this.channelState.lastMessage = this.channelState.lastMessage || {};\n                            if (((_a = update.lastMessage) === null || _a === void 0 ? void 0 : _a.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {\n                                this.channelState.lastMessage.index = update.lastMessage.index;\n                                updateReasons.add(localKey);\n                            }\n                            if (((_b = update.lastMessage) === null || _b === void 0 ? void 0 : _b.timestamp) !== undefined && ((_d = (_c = this.channelState.lastMessage) === null || _c === void 0 ? void 0 : _c.dateCreated) === null || _d === void 0 ? void 0 : _d.getTime()) !== update.lastMessage.timestamp.getTime()) {\n                                this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n                                updateReasons.add(localKey);\n                            }\n                            if (util_1.isDeepEqual(this.channelState.lastMessage, {})) {\n                                delete this.channelState.lastMessage;\n                            }\n                            break;\n                        case fieldMappings.state:\n                            var state = update.state || undefined;\n                            if (state !== undefined) {\n                                state.dateUpdated = new Date(state.dateUpdated);\n                            }\n                            if (util_1.isDeepEqual(this.channelState.state, state)) {\n                                break;\n                            }\n                            this.channelState.state = state;\n                            updateReasons.add(localKey);\n                            break;\n                        default:\n                            var isDate = update[key] instanceof Date;\n                            var keysMatchAsDates = isDate && ((_e = this.channelState[localKey]) === null || _e === void 0 ? void 0 : _e.getTime()) === update[key].getTime();\n                            var keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n                            if (keysMatchAsDates || keysMatchAsNonDates) {\n                                break;\n                            }\n                            this.channelState[localKey] = update[key];\n                            updateReasons.add(localKey);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (updateReasons.size > 0) {\n                this.emit('updated', { conversation: this, updateReasons: [].concat((0, _toConsumableArray3.default)(updateReasons)) });\n            }\n        }\n        /**\n         * @private\n         */\n\n    }, {\n        key: \"_onMessageAdded\",\n        value: function _onMessageAdded(message) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = (0, _getIterator3.default)(this.participants.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var participant = _step2.value;\n\n                    if (participant.identity === message.author) {\n                        participant._endTyping();\n                        break;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            this.emit('messageAdded', message);\n        }\n        /**\n         * Add a participant to the Conversation by its Identity.\n         * @param {String} identity - Identity of the Client to add\n         * @param {any} [attributes] Attributes to be attached to the participant\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"add\",\n        value: function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(identity, attributes) {\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                return _context3.abrupt(\"return\", this.participantsEntity.add(identity, attributes));\n\n                            case 1:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this);\n            }));\n\n            function add(_x, _x2) {\n                return _ref3.apply(this, arguments);\n            }\n\n            return add;\n        }()\n        /**\n         * Add a non-chat participant to the Conversation.\n         *\n         * @param {String} proxyAddress Proxy (Twilio) address of the participant\n         * @param {String} address User address of the participant\n         * @param {any} [attributes] Attributes to be attached to the participant\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"addNonChatParticipant\",\n        value: function () {\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(proxyAddress, address) {\n                var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                return _context4.abrupt(\"return\", this.participantsEntity.addNonChatParticipant(proxyAddress, address, attributes));\n\n                            case 1:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function addNonChatParticipant(_x4, _x5) {\n                return _ref4.apply(this, arguments);\n            }\n\n            return addNonChatParticipant;\n        }()\n        /**\n         * Advance Conversation's last read Message index to current read horizon.\n         * Rejects if User is not Participant of Conversation.\n         * Last read Message index is updated only if new index value is higher than previous.\n         * @param {Number} index - Message index to advance to as last read\n         * @returns {Promise<number>} resulting unread messages count in the conversation\n         */\n\n    }, {\n        key: \"advanceLastReadMessageIndex\",\n        value: function () {\n            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(index) {\n                return _regenerator2.default.wrap(function _callee5$(_context5) {\n                    while (1) {\n                        switch (_context5.prev = _context5.next) {\n                            case 0:\n                                _context5.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context5.abrupt(\"return\", this.services.readHorizon.advanceLastReadMessageIndexForConversation(this.sid, index, this.lastReadMessageIndex));\n\n                            case 3:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, this);\n            }));\n\n            function advanceLastReadMessageIndex(_x6) {\n                return _ref5.apply(this, arguments);\n            }\n\n            return advanceLastReadMessageIndex;\n        }()\n        /**\n         * Delete the Conversation and unsubscribe from its events.\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"delete\",\n        value: function () {\n            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\n                return _regenerator2.default.wrap(function _callee6$(_context6) {\n                    while (1) {\n                        switch (_context6.prev = _context6.next) {\n                            case 0:\n                                _context6.next = 2;\n                                return this.services.session.addCommand('destroyChannel', {\n                                    channelSid: this.sid\n                                });\n\n                            case 2:\n                                return _context6.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context6.stop();\n                        }\n                    }\n                }, _callee6, this);\n            }));\n\n            function _delete() {\n                return _ref6.apply(this, arguments);\n            }\n\n            return _delete;\n        }()\n        /**\n         * Get the custom attributes of this Conversation.\n         * @returns {Promise<any>} attributes of this Conversation\n         */\n\n    }, {\n        key: \"getAttributes\",\n        value: function () {\n            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\n                return _regenerator2.default.wrap(function _callee7$(_context7) {\n                    while (1) {\n                        switch (_context7.prev = _context7.next) {\n                            case 0:\n                                _context7.next = 2;\n                                return this._subscribe();\n\n                            case 2:\n                                return _context7.abrupt(\"return\", this.attributes);\n\n                            case 3:\n                            case \"end\":\n                                return _context7.stop();\n                        }\n                    }\n                }, _callee7, this);\n            }));\n\n            function getAttributes() {\n                return _ref7.apply(this, arguments);\n            }\n\n            return getAttributes;\n        }()\n        /**\n         * Returns messages from conversation using paginator interface.\n         * @param {Number} [pageSize=30] Number of messages to return in single chunk\n         * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n         * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\n         *                                                          from newer to older. 'forward' will query in opposite direction\n         * @returns {Promise<Paginator<Message>>} page of messages\n         */\n\n    }, {\n        key: \"getMessages\",\n        value: function () {\n            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(pageSize, anchor, direction) {\n                return _regenerator2.default.wrap(function _callee8$(_context8) {\n                    while (1) {\n                        switch (_context8.prev = _context8.next) {\n                            case 0:\n                                _context8.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context8.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\n\n                            case 3:\n                            case \"end\":\n                                return _context8.stop();\n                        }\n                    }\n                }, _callee8, this);\n            }));\n\n            function getMessages(_x7, _x8, _x9) {\n                return _ref8.apply(this, arguments);\n            }\n\n            return getMessages;\n        }()\n        /**\n         * Get a list of all Participants joined to this Conversation.\n         * @returns {Promise<Participant[]>}\n         */\n\n    }, {\n        key: \"getParticipants\",\n        value: function () {\n            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\n                return _regenerator2.default.wrap(function _callee9$(_context9) {\n                    while (1) {\n                        switch (_context9.prev = _context9.next) {\n                            case 0:\n                                _context9.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context9.abrupt(\"return\", this.participantsEntity.getParticipants());\n\n                            case 3:\n                            case \"end\":\n                                return _context9.stop();\n                        }\n                    }\n                }, _callee9, this);\n            }));\n\n            function getParticipants() {\n                return _ref9.apply(this, arguments);\n            }\n\n            return getParticipants;\n        }()\n        /**\n         * Get conversation participants count.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Conversation system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any UI badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number>}\n         */\n\n    }, {\n        key: \"getParticipantsCount\",\n        value: function () {\n            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n                var links, url, response;\n                return _regenerator2.default.wrap(function _callee10$(_context10) {\n                    while (1) {\n                        switch (_context10.prev = _context10.next) {\n                            case 0:\n                                _context10.next = 2;\n                                return this.services.session.getSessionLinks();\n\n                            case 2:\n                                links = _context10.sent;\n                                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                                _context10.next = 6;\n                                return this.services.network.get(url);\n\n                            case 6:\n                                response = _context10.sent;\n                                return _context10.abrupt(\"return\", response.body.members_count);\n\n                            case 8:\n                            case \"end\":\n                                return _context10.stop();\n                        }\n                    }\n                }, _callee10, this);\n            }));\n\n            function getParticipantsCount() {\n                return _ref10.apply(this, arguments);\n            }\n\n            return getParticipantsCount;\n        }()\n        /**\n         * Get a Participant by its SID.\n         * @param {String} participantSid - Participant sid\n         * @returns {Promise<Participant>}\n         */\n\n    }, {\n        key: \"getParticipantBySid\",\n        value: function () {\n            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(participantSid) {\n                return _regenerator2.default.wrap(function _callee11$(_context11) {\n                    while (1) {\n                        switch (_context11.prev = _context11.next) {\n                            case 0:\n                                return _context11.abrupt(\"return\", this.participantsEntity.getParticipantBySid(participantSid));\n\n                            case 1:\n                            case \"end\":\n                                return _context11.stop();\n                        }\n                    }\n                }, _callee11, this);\n            }));\n\n            function getParticipantBySid(_x10) {\n                return _ref11.apply(this, arguments);\n            }\n\n            return getParticipantBySid;\n        }()\n        /**\n         * Get a Participant by its identity.\n         * @param {String} identity - Participant identity\n         * @returns {Promise<Participant>}\n         */\n\n    }, {\n        key: \"getParticipantByIdentity\",\n        value: function () {\n            var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(identity) {\n                return _regenerator2.default.wrap(function _callee12$(_context12) {\n                    while (1) {\n                        switch (_context12.prev = _context12.next) {\n                            case 0:\n                                return _context12.abrupt(\"return\", this.participantsEntity.getParticipantByIdentity(identity));\n\n                            case 1:\n                            case \"end\":\n                                return _context12.stop();\n                        }\n                    }\n                }, _callee12, this);\n            }));\n\n            function getParticipantByIdentity(_x11) {\n                return _ref12.apply(this, arguments);\n            }\n\n            return getParticipantByIdentity;\n        }()\n        /**\n         * Get total message count in a conversation.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Conversations system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any UI badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number>}\n         */\n\n    }, {\n        key: \"getMessagesCount\",\n        value: function () {\n            var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {\n                var links, url, response;\n                return _regenerator2.default.wrap(function _callee13$(_context13) {\n                    while (1) {\n                        switch (_context13.prev = _context13.next) {\n                            case 0:\n                                _context13.next = 2;\n                                return this.services.session.getSessionLinks();\n\n                            case 2:\n                                links = _context13.sent;\n                                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                                _context13.next = 6;\n                                return this.services.network.get(url);\n\n                            case 6:\n                                response = _context13.sent;\n                                return _context13.abrupt(\"return\", response.body.messages_count);\n\n                            case 8:\n                            case \"end\":\n                                return _context13.stop();\n                        }\n                    }\n                }, _callee13, this);\n            }));\n\n            function getMessagesCount() {\n                return _ref13.apply(this, arguments);\n            }\n\n            return getMessagesCount;\n        }()\n        /**\n         * Get unread messages count for the User if they are a Participant of this Conversation.\n         * Rejects if the User is not a Participant of the Conversation.\n         * <br/>\n         * Use this method to obtain the number of unread messages together with\n         * updateLastReadMessageIndex() instead of relying on the\n         * Message indices which may have gaps. See Message.index for details.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * This is quite useful for any “unread messages count” badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number|null>}\n         */\n\n    }, {\n        key: \"getUnreadMessagesCount\",\n        value: function () {\n            var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\n                var links, url, response;\n                return _regenerator2.default.wrap(function _callee14$(_context14) {\n                    while (1) {\n                        switch (_context14.prev = _context14.next) {\n                            case 0:\n                                _context14.next = 2;\n                                return this.services.session.getSessionLinks();\n\n                            case 2:\n                                links = _context14.sent;\n                                url = new util_1.UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();\n                                _context14.next = 6;\n                                return this.services.network.get(url);\n\n                            case 6:\n                                response = _context14.sent;\n\n                                if (!(response.body.channels.length && response.body.channels[0].channel_sid == this.sid)) {\n                                    _context14.next = 11;\n                                    break;\n                                }\n\n                                if (!(typeof response.body.channels[0].unread_messages_count !== 'undefined' && response.body.channels[0].unread_messages_count != null)) {\n                                    _context14.next = 10;\n                                    break;\n                                }\n\n                                return _context14.abrupt(\"return\", response.body.channels[0].unread_messages_count);\n\n                            case 10:\n                                return _context14.abrupt(\"return\", null);\n\n                            case 11:\n                                throw new Error('Conversation is not in user conversations list');\n\n                            case 12:\n                            case \"end\":\n                                return _context14.stop();\n                        }\n                    }\n                }, _callee14, this);\n            }));\n\n            function getUnreadMessagesCount() {\n                return _ref14.apply(this, arguments);\n            }\n\n            return getUnreadMessagesCount;\n        }()\n        /**\n         * Join the Conversation and subscribe to its events.\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"join\",\n        value: function () {\n            var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15() {\n                return _regenerator2.default.wrap(function _callee15$(_context15) {\n                    while (1) {\n                        switch (_context15.prev = _context15.next) {\n                            case 0:\n                                _context15.next = 2;\n                                return this.services.session.addCommand('joinChannelV2', { channelSid: this.sid });\n\n                            case 2:\n                                return _context15.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context15.stop();\n                        }\n                    }\n                }, _callee15, this);\n            }));\n\n            function join() {\n                return _ref15.apply(this, arguments);\n            }\n\n            return join;\n        }()\n        /**\n         * Leave the Conversation.\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"leave\",\n        value: function () {\n            var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {\n                return _regenerator2.default.wrap(function _callee16$(_context16) {\n                    while (1) {\n                        switch (_context16.prev = _context16.next) {\n                            case 0:\n                                if (!(this.channelState.status === 'joined')) {\n                                    _context16.next = 3;\n                                    break;\n                                }\n\n                                _context16.next = 3;\n                                return this.services.session.addCommand('leaveChannel', { channelSid: this.sid });\n\n                            case 3:\n                                return _context16.abrupt(\"return\", this);\n\n                            case 4:\n                            case \"end\":\n                                return _context16.stop();\n                        }\n                    }\n                }, _callee16, this);\n            }));\n\n            function leave() {\n                return _ref16.apply(this, arguments);\n            }\n\n            return leave;\n        }()\n        /**\n         * Remove a Participant from the Conversation. When a string is passed as the argument, it will assume that the string is an identity.\n         * @param {String|Participant} participant - identity or participant object to remove\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"removeParticipant\",\n        value: function () {\n            var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17(participant) {\n                return _regenerator2.default.wrap(function _callee17$(_context17) {\n                    while (1) {\n                        switch (_context17.prev = _context17.next) {\n                            case 0:\n                                if (!(participant instanceof participant_1.Participant)) {\n                                    _context17.next = 4;\n                                    break;\n                                }\n\n                                _context17.next = 3;\n                                return this.participantsEntity.removeBySid(participant.sid);\n\n                            case 3:\n                                return _context17.abrupt(\"return\");\n\n                            case 4:\n                                _context17.next = 6;\n                                return this.participantsEntity.removeByIdentity(participant);\n\n                            case 6:\n                            case \"end\":\n                                return _context17.stop();\n                        }\n                    }\n                }, _callee17, this);\n            }));\n\n            function removeParticipant(_x12) {\n                return _ref17.apply(this, arguments);\n            }\n\n            return removeParticipant;\n        }()\n        /**\n         * Send a Message in the Conversation.\n         * @param {String|FormData|Conversation#SendMediaOptions|null} message - The message body for text message,\n         * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n         * @param {any} [messageAttributes] - attributes for the message\n         * @param {Conversation#SendEmailOptions} [emailOptions] - email options for the message\n         * @returns {Promise<number>} new Message's index in the Conversation's messages list\n         */\n\n    }, {\n        key: \"sendMessage\",\n        value: function () {\n            var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(message, messageAttributes, emailOptions) {\n                var _response, response;\n\n                return _regenerator2.default.wrap(function _callee18$(_context18) {\n                    while (1) {\n                        switch (_context18.prev = _context18.next) {\n                            case 0:\n                                if (!(typeof message === 'string' || message === null)) {\n                                    _context18.next = 5;\n                                    break;\n                                }\n\n                                _context18.next = 3;\n                                return this.messagesEntity.send(message, messageAttributes, emailOptions);\n\n                            case 3:\n                                _response = _context18.sent;\n                                return _context18.abrupt(\"return\", util_1.parseToNumber(_response.messageId));\n\n                            case 5:\n                                _context18.next = 7;\n                                return this.messagesEntity.sendMedia(message, messageAttributes, emailOptions);\n\n                            case 7:\n                                response = _context18.sent;\n                                return _context18.abrupt(\"return\", util_1.parseToNumber(response.messageId));\n\n                            case 9:\n                            case \"end\":\n                                return _context18.stop();\n                        }\n                    }\n                }, _callee18, this);\n            }));\n\n            function sendMessage(_x13, _x14, _x15) {\n                return _ref18.apply(this, arguments);\n            }\n\n            return sendMessage;\n        }()\n        /**\n         * Set last read Conversation's Message index to last known Message's index in this Conversation.\n         * @returns {Promise<number>} resulting unread messages count in the conversation\n         */\n\n    }, {\n        key: \"setAllMessagesRead\",\n        value: function () {\n            var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19() {\n                var messagesPage;\n                return _regenerator2.default.wrap(function _callee19$(_context19) {\n                    while (1) {\n                        switch (_context19.prev = _context19.next) {\n                            case 0:\n                                _context19.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                _context19.next = 4;\n                                return this.getMessages(1);\n\n                            case 4:\n                                messagesPage = _context19.sent;\n\n                                if (!(messagesPage.items.length > 0)) {\n                                    _context19.next = 7;\n                                    break;\n                                }\n\n                                return _context19.abrupt(\"return\", this.advanceLastReadMessageIndex(messagesPage.items[0].index));\n\n                            case 7:\n                                return _context19.abrupt(\"return\", _promise2.default.resolve(0));\n\n                            case 8:\n                            case \"end\":\n                                return _context19.stop();\n                        }\n                    }\n                }, _callee19, this);\n            }));\n\n            function setAllMessagesRead() {\n                return _ref19.apply(this, arguments);\n            }\n\n            return setAllMessagesRead;\n        }()\n        /**\n         * Set all messages in the conversation unread.\n         * @returns {Promise<number>} resulting unread messages count in the conversation\n         */\n\n    }, {\n        key: \"setAllMessagesUnread\",\n        value: function () {\n            var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {\n                return _regenerator2.default.wrap(function _callee20$(_context20) {\n                    while (1) {\n                        switch (_context20.prev = _context20.next) {\n                            case 0:\n                                _context20.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context20.abrupt(\"return\", this.services.readHorizon.updateLastReadMessageIndexForConversation(this.sid, null));\n\n                            case 3:\n                            case \"end\":\n                                return _context20.stop();\n                        }\n                    }\n                }, _callee20, this);\n            }));\n\n            function setAllMessagesUnread() {\n                return _ref20.apply(this, arguments);\n            }\n\n            return setAllMessagesUnread;\n        }()\n        /**\n         * Set User Notification level for this conversation.\n         * @param {Conversation#NotificationLevel} notificationLevel - The new user notification level\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"setUserNotificationLevel\",\n        value: function () {\n            var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(notificationLevel) {\n                return _regenerator2.default.wrap(function _callee21$(_context21) {\n                    while (1) {\n                        switch (_context21.prev = _context21.next) {\n                            case 0:\n                                _context21.next = 2;\n                                return this.services.session.addCommand('editNotificationLevel', { channelSid: this.sid, notificationLevel: notificationLevel });\n\n                            case 2:\n                            case \"end\":\n                                return _context21.stop();\n                        }\n                    }\n                }, _callee21, this);\n            }));\n\n            function setUserNotificationLevel(_x16) {\n                return _ref21.apply(this, arguments);\n            }\n\n            return setUserNotificationLevel;\n        }()\n        /**\n         * Send a notification to the server indicating that this Client is currently typing in this Conversation.\n         * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"typing\",\n        value: function typing() {\n            return this.services.typingIndicator.send(this.sid);\n        }\n        /**\n         * Update the Conversation's attributes.\n         * @param {any} attributes - The new attributes object\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"updateAttributes\",\n        value: function () {\n            var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(attributes) {\n                return _regenerator2.default.wrap(function _callee22$(_context22) {\n                    while (1) {\n                        switch (_context22.prev = _context22.next) {\n                            case 0:\n                                _context22.next = 2;\n                                return this.services.session.addCommand('editAttributes', {\n                                    channelSid: this.sid,\n                                    attributes: (0, _stringify2.default)(attributes)\n                                });\n\n                            case 2:\n                                return _context22.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context22.stop();\n                        }\n                    }\n                }, _callee22, this);\n            }));\n\n            function updateAttributes(_x17) {\n                return _ref22.apply(this, arguments);\n            }\n\n            return updateAttributes;\n        }()\n        /**\n         * Update the Conversation's friendlyName.\n         * @param {String|null} name - The new Conversation friendlyName\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"updateFriendlyName\",\n        value: function () {\n            var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(name) {\n                return _regenerator2.default.wrap(function _callee23$(_context23) {\n                    while (1) {\n                        switch (_context23.prev = _context23.next) {\n                            case 0:\n                                if (!(this.channelState.friendlyName !== name)) {\n                                    _context23.next = 3;\n                                    break;\n                                }\n\n                                _context23.next = 3;\n                                return this.services.session.addCommand('editFriendlyName', {\n                                    channelSid: this.sid,\n                                    friendlyName: name\n                                });\n\n                            case 3:\n                                return _context23.abrupt(\"return\", this);\n\n                            case 4:\n                            case \"end\":\n                                return _context23.stop();\n                        }\n                    }\n                }, _callee23, this);\n            }));\n\n            function updateFriendlyName(_x18) {\n                return _ref23.apply(this, arguments);\n            }\n\n            return updateFriendlyName;\n        }()\n        /**\n         * Set Conversation's last read Message index to current read horizon.\n         * @param {Number|null} index - Message index to set as last read.\n         * If null provided, then the behavior is identical to {@link Conversation#setAllMessagesUnread}\n         * @returns {Promise<number>} resulting unread messages count in the conversation\n         */\n\n    }, {\n        key: \"updateLastReadMessageIndex\",\n        value: function () {\n            var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(index) {\n                return _regenerator2.default.wrap(function _callee24$(_context24) {\n                    while (1) {\n                        switch (_context24.prev = _context24.next) {\n                            case 0:\n                                _context24.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context24.abrupt(\"return\", this.services.readHorizon.updateLastReadMessageIndexForConversation(this.sid, index));\n\n                            case 3:\n                            case \"end\":\n                                return _context24.stop();\n                        }\n                    }\n                }, _callee24, this);\n            }));\n\n            function updateLastReadMessageIndex(_x19) {\n                return _ref24.apply(this, arguments);\n            }\n\n            return updateLastReadMessageIndex;\n        }()\n        /**\n         * Update the Conversation's unique name.\n         * @param {String|null} uniqueName - New unique name for the Conversation. Setting unique name to null removes it.\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"updateUniqueName\",\n        value: function () {\n            var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(uniqueName) {\n                return _regenerator2.default.wrap(function _callee25$(_context25) {\n                    while (1) {\n                        switch (_context25.prev = _context25.next) {\n                            case 0:\n                                if (!(this.channelState.uniqueName !== uniqueName)) {\n                                    _context25.next = 4;\n                                    break;\n                                }\n\n                                if (!uniqueName) {\n                                    uniqueName = '';\n                                }\n                                _context25.next = 4;\n                                return this.services.session.addCommand('editUniqueName', {\n                                    channelSid: this.sid,\n                                    uniqueName: uniqueName\n                                });\n\n                            case 4:\n                                return _context25.abrupt(\"return\", this);\n\n                            case 5:\n                            case \"end\":\n                                return _context25.stop();\n                        }\n                    }\n                }, _callee25, this);\n            }));\n\n            function updateUniqueName(_x20) {\n                return _ref25.apply(this, arguments);\n            }\n\n            return updateUniqueName;\n        }()\n    }, {\n        key: \"uniqueName\",\n        get: function get() {\n            return this.channelState.uniqueName;\n        }\n    }, {\n        key: \"status\",\n        get: function get() {\n            return this.channelState.status;\n        }\n    }, {\n        key: \"friendlyName\",\n        get: function get() {\n            return this.channelState.friendlyName;\n        }\n    }, {\n        key: \"dateUpdated\",\n        get: function get() {\n            return this.channelState.dateUpdated;\n        }\n    }, {\n        key: \"dateCreated\",\n        get: function get() {\n            return this.channelState.dateCreated;\n        }\n    }, {\n        key: \"createdBy\",\n        get: function get() {\n            return this.channelState.createdBy;\n        }\n    }, {\n        key: \"attributes\",\n        get: function get() {\n            return this.channelState.attributes;\n        }\n    }, {\n        key: \"lastReadMessageIndex\",\n        get: function get() {\n            return this.channelState.lastReadMessageIndex;\n        }\n    }, {\n        key: \"lastMessage\",\n        get: function get() {\n            return this.channelState.lastMessage;\n        }\n    }, {\n        key: \"notificationLevel\",\n        get: function get() {\n            return this.channelState.notificationLevel;\n        }\n    }, {\n        key: \"state\",\n        get: function get() {\n            return this.channelState.state;\n        }\n    }], [{\n        key: \"preprocessUpdate\",\n        value: function preprocessUpdate(update, conversationSid) {\n            try {\n                if (typeof update.attributes === 'string') {\n                    update.attributes = JSON.parse(update.attributes);\n                } else if (update.attributes) {\n                    (0, _stringify2.default)(update.attributes);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed attributes from the server for conversation: ' + conversationSid);\n                update.attributes = {};\n            }\n            try {\n                if (update.dateCreated) {\n                    update.dateCreated = new Date(update.dateCreated);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed dateCreated from the server for conversation: ' + conversationSid);\n                delete update.dateCreated;\n            }\n            try {\n                if (update.dateUpdated) {\n                    update.dateUpdated = new Date(update.dateUpdated);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed dateUpdated from the server for conversation: ' + conversationSid);\n                delete update.dateUpdated;\n            }\n            try {\n                if (update.lastMessage && update.lastMessage.timestamp) {\n                    update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed lastMessage.timestamp from the server for conversation: ' + conversationSid);\n                delete update.lastMessage.timestamp;\n            }\n        }\n    }]);\n    return Conversation;\n}(events_1.EventEmitter);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString, ['undefined', 'string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"add\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString, twilio_sdk_type_validator_1.nonEmptyString, ['undefined', 'object']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"addNonChatParticipant\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonNegativeInteger), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"advanceLastReadMessageIndex\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.nonNegativeInteger], ['undefined', twilio_sdk_type_validator_1.nonNegativeInteger], ['undefined', twilio_sdk_type_validator_1.literal('backwards', 'forward')]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Number, String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getMessages\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getParticipantBySid\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getParticipantByIdentity\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync([twilio_sdk_type_validator_1.nonEmptyString, participant_1.Participant]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"removeParticipant\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null),\n// Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\ntwilio_sdk_type_validator_1.custom(function (value) {\n    return [value instanceof FormData, 'an instance of FormData'];\n}), twilio_sdk_type_validator_1.objectSchema('media options', {\n    contentType: twilio_sdk_type_validator_1.nonEmptyString,\n    media: twilio_sdk_type_validator_1.custom(function (value) {\n        var isValid = typeof value === 'string' && value.length > 0 || value instanceof Uint8Array || value instanceof ArrayBuffer;\n        if (typeof Blob === 'function') {\n            isValid = isValid || value instanceof Blob;\n        }\n        return [isValid, 'a non-empty string, an instance of Buffer or an instance of Blob'];\n    })\n})], ['undefined', 'string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)], ['undefined', twilio_sdk_type_validator_1.literal(null), twilio_sdk_type_validator_1.objectSchema('email attributes', {\n    subject: [twilio_sdk_type_validator_1.nonEmptyString, 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"sendMessage\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('default', 'muted')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"setUserNotificationLevel\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateAttributes\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateFriendlyName\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync([twilio_sdk_type_validator_1.literal(null), twilio_sdk_type_validator_1.nonNegativeInteger]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateLastReadMessageIndex\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateUniqueName\", null);\nexports.Conversation = Conversation;\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Conversation#participantJoined\n * @type {Participant}\n */\n/**\n * Fired when a Participant has left the Conversation.\n * @event Conversation#participantLeft\n * @type {Participant}\n */\n/**\n * Fired when a Participant's fields has been updated.\n * @event Conversation#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Conversation.\n * @event Conversation#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Conversation#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Conversation#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when a Participant has stopped typing.\n * @event Conversation#typingEnded\n * @type {Participant}\n */\n/**\n * Fired when a Participant has started typing.\n * @event Conversation#typingStarted\n * @type {Participant}\n */\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * @event Conversation#updated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n/**\n * Fired when the Conversation was destroyed or currently logged in User has left private Conversation\n * @event Conversation#removed\n * @type {Conversation}\n */"]},"metadata":{},"sourceType":"script"}