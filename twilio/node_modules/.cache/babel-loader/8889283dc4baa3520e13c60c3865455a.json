{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst sanitize_1 = require(\"./utils/sanitize\");\n\nconst uri_1 = require(\"./utils/uri\");\n\nconst syncerror_1 = require(\"./utils/syncerror\");\n\nconst logger_1 = require(\"./utils/logger\");\n\nconst entity_1 = require(\"./entity\");\n\nconst listitem_1 = require(\"./listitem\");\n\nconst paginator_1 = require(\"./paginator\");\n\nconst cache_1 = require(\"./cache\");\n\nconst mergingqueue_1 = require(\"./mergingqueue\");\n\nconst closeable_1 = require(\"./closeable\");\n\nclass SyncListImpl extends entity_1.SyncEntity {\n  /**\n   * @private\n   */\n  constructor(services, descriptor, removalHandler) {\n    super(services, removalHandler);\n\n    const updateRequestReducer = (acc, input) => typeof input.ttl === 'number' ? {\n      ttl: input.ttl\n    } : acc;\n\n    this.updateMergingQueue = new mergingqueue_1.NamespacedMergingQueue(updateRequestReducer);\n    this.cache = new cache_1.Cache();\n    this.descriptor = descriptor;\n    this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n  } // private props\n\n\n  get uri() {\n    return this.descriptor.url;\n  }\n\n  get revision() {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId() {\n    return this.descriptor.last_event_id;\n  }\n\n  get links() {\n    return this.descriptor.links;\n  }\n\n  get dateExpires() {\n    return this.descriptor.date_expires;\n  }\n\n  static get type() {\n    return 'list';\n  }\n\n  get type() {\n    return 'list';\n  } // below properties are specific to Insights only\n\n\n  get indexName() {\n    return undefined;\n  }\n\n  get queryString() {\n    return undefined;\n  } // public props, documented along with class description\n\n\n  get sid() {\n    return this.descriptor.sid;\n  }\n\n  get uniqueName() {\n    return this.descriptor.unique_name || null;\n  }\n\n  get dateUpdated() {\n    return this.descriptor.date_updated;\n  }\n\n  async _addOrUpdateItemOnServer(url, data, ifMatch, ttl) {\n    const requestBody = {\n      data\n    };\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    const response = await this.services.network.post(url, requestBody, ifMatch);\n    response.body.data = data;\n    response.body.date_updated = new Date(response.body.date_updated);\n    return response.body;\n  }\n\n  async push(value, itemMetadata) {\n    let ttl = (itemMetadata || {}).ttl;\n    sanitize_1.validateOptionalTtl(ttl);\n    let item = await this._addOrUpdateItemOnServer(this.links.items, value, undefined, ttl);\n    let index = Number(item.index);\n\n    this._handleItemMutated(index, item.url, item.last_event_id, item.revision, value, item.date_updated, item.date_expires, true, false);\n\n    return this.cache.get(index);\n  }\n\n  async set(index, value, itemMetadataUpdates) {\n    const input = itemMetadataUpdates || {};\n    sanitize_1.validateOptionalTtl(input.ttl);\n    return this.updateMergingQueue.squashAndAdd(index, input, input => this._updateItemUnconditionally(index, value, input.ttl));\n  }\n\n  async _updateItemUnconditionally(index, data, ttl) {\n    let existingItem = await this.get(index);\n    const itemDescriptor = await this._addOrUpdateItemOnServer(existingItem.uri, data, undefined, ttl);\n\n    this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision, itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n\n    return this.cache.get(index);\n  }\n\n  async _updateItemWithIfMatch(index, mutatorFunction, ttl) {\n    const existingItem = await this.get(index);\n    const data = mutatorFunction(sanitize_1.deepClone(existingItem.data));\n\n    if (data) {\n      const ifMatch = existingItem.revision;\n\n      try {\n        const itemDescriptor = await this._addOrUpdateItemOnServer(existingItem.uri, data, ifMatch, ttl);\n\n        this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision, itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n\n        return this.cache.get(index);\n      } catch (error) {\n        if (error.status === 412) {\n          await this._getItemFromServer(index);\n          return this._updateItemWithIfMatch(index, mutatorFunction, ttl);\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      return existingItem;\n    }\n  }\n\n  async mutate(index, mutator, itemMetadataUpdates) {\n    const input = itemMetadataUpdates || {};\n    sanitize_1.validateOptionalTtl(input.ttl);\n    return this.updateMergingQueue.add(index, input, input => this._updateItemWithIfMatch(index, mutator, input.ttl));\n  }\n\n  async update(index, obj, itemMetadataUpdates) {\n    return this.mutate(index, remote => Object.assign(remote, obj), itemMetadataUpdates);\n  }\n\n  async remove(index) {\n    const item = await this.get(index);\n    const previousItemData = sanitize_1.deepClone(item.data);\n    const response = await this.services.network.delete(item.uri);\n\n    this._handleItemRemoved(index, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);\n  }\n\n  async get(index) {\n    let cachedItem = this.cache.get(index);\n\n    if (cachedItem) {\n      return cachedItem;\n    } else {\n      return this._getItemFromServer(index);\n    }\n  }\n\n  async _getItemFromServer(index) {\n    let result = await this.queryItems({\n      index\n    });\n\n    if (result.items.length < 1) {\n      throw new syncerror_1.SyncError(\"No item with index \".concat(index, \" found\"), 404, 54151);\n    } else {\n      return result.items[0];\n    }\n  }\n  /**\n   * Query items from the List\n   * @private\n   */\n\n\n  async queryItems(arg) {\n    arg = arg || {};\n    const url = new uri_1.UriBuilder(this.links.items).queryParam('From', arg.from).queryParam('PageSize', arg.limit).queryParam('Index', arg.index).queryParam('PageToken', arg.pageToken).queryParam('Order', arg.order).build();\n    let response = await this.services.network.get(url);\n    let items = response.body.items.map(el => {\n      el.date_updated = new Date(el.date_updated);\n      let itemInCache = this.cache.get(el.index);\n\n      if (itemInCache) {\n        this._handleItemMutated(el.index, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);\n      } else {\n        this.cache.store(Number(el.index), new listitem_1.ListItem({\n          index: Number(el.index),\n          uri: el.url,\n          revision: el.revision,\n          lastEventId: el.last_event_id,\n          dateUpdated: el.date_updated,\n          dateExpires: el.date_expires,\n          data: el.data\n        }), el.last_event_id);\n      }\n\n      return this.cache.get(el.index);\n    });\n    let meta = response.body.meta;\n    return new paginator_1.Paginator(items, pageToken => this.queryItems({\n      pageToken\n    }), meta.previous_token, meta.next_token);\n  }\n\n  async getItems(args) {\n    args = args || {};\n    sanitize_1.validatePageSize(args.pageSize);\n    args.limit = args.pageSize || args.limit || 50;\n    args.order = args.order || 'asc';\n    return this.queryItems(args);\n  }\n  /**\n   * @return {Promise<Object>} Context of List\n   * @private\n   */\n\n\n  async getContext() {\n    if (!this.context) {\n      let response = await this.services.network.get(this.links.context); // store fetched context if we have't received any newer update\n\n      this._updateContextIfRequired(response.body.data, response.body.last_event_id);\n    }\n\n    return this.context;\n  }\n\n  async setTtl(ttl) {\n    sanitize_1.validateMandatoryTtl(ttl);\n\n    try {\n      const requestBody = {\n        ttl\n      };\n      const response = await this.services.network.post(this.uri, requestBody);\n      this.descriptor.date_expires = response.body.date_expires;\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n\n      throw error;\n    }\n  }\n\n  async setItemTtl(index, ttl) {\n    sanitize_1.validateMandatoryTtl(ttl);\n    let existingItem = await this.get(index);\n    const requestBody = {\n      ttl\n    };\n    const response = await this.services.network.post(existingItem.uri, requestBody);\n    existingItem.updateDateExpires(response.body.date_expires);\n  }\n\n  async removeList() {\n    await this.services.network.delete(this.uri);\n    this.onRemoved(true);\n  }\n\n  onRemoved(locally) {\n    this._unsubscribe();\n\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n    this.broadcastEventToListeners('removed', {\n      isLocal: locally\n    });\n  }\n\n  shouldIgnoreEvent(key, eventId) {\n    return this.cache.isKnown(key, eventId);\n  }\n  /**\n   * Handle update, which came from the server.\n   * @private\n   */\n\n\n  _update(update, isStrictlyOrdered) {\n    const itemIndex = Number(update.item_index);\n    update.date_created = new Date(update.date_created);\n\n    switch (update.type) {\n      case 'list_item_added':\n      case 'list_item_updated':\n        {\n          this._handleItemMutated(itemIndex, update.item_url, update.id, update.item_revision, update.item_data, update.date_created, undefined, // orchestration does not include date_expires\n          update.type === 'list_item_added', true);\n        }\n        break;\n\n      case 'list_item_removed':\n        {\n          this._handleItemRemoved(itemIndex, update.id, update.item_data, update.date_created, true);\n        }\n        break;\n\n      case 'list_context_updated':\n        {\n          this._handleContextUpdate(update.context_data, update.id, update.date_created);\n        }\n        break;\n\n      case 'list_removed':\n        {\n          this.onRemoved(false);\n        }\n        break;\n    }\n\n    if (isStrictlyOrdered) {\n      this._advanceLastEventId(update.id, update.list_revision);\n    }\n  }\n\n  _advanceLastEventId(eventId, revision) {\n    if (this.lastEventId < eventId) {\n      this.descriptor.last_event_id = eventId;\n\n      if (revision) {\n        this.descriptor.revision = revision;\n      }\n    }\n  }\n\n  _updateRootDateUpdated(dateUpdated) {\n    if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {\n      this.descriptor.date_updated = dateUpdated;\n      this.services.storage.update(this.type, this.sid, this.uniqueName, {\n        date_updated: dateUpdated\n      });\n    }\n  }\n\n  _handleItemMutated(index, uri, lastEventId, revision, data, dateUpdated, dateExpires, added, remote) {\n    if (this.shouldIgnoreEvent(index, lastEventId)) {\n      logger_1.default.trace('Item ', index, ' update skipped, current:', this.lastEventId, ', remote:', lastEventId);\n      return;\n    }\n\n    this._updateRootDateUpdated(dateUpdated);\n\n    const item = this.cache.get(index);\n\n    if (!item) {\n      const newItem = new listitem_1.ListItem({\n        index,\n        uri,\n        lastEventId,\n        revision,\n        data,\n        dateUpdated,\n        dateExpires\n      });\n      this.cache.store(index, newItem, lastEventId);\n      this.emitItemMutationEvent(newItem, remote, added);\n      return;\n    }\n\n    const previousItemData = sanitize_1.deepClone(item.data);\n    item.update(lastEventId, revision, data, dateUpdated);\n    this.cache.store(index, item, lastEventId);\n\n    if (dateExpires !== undefined) {\n      item.updateDateExpires(dateExpires);\n    }\n\n    this.emitItemMutationEvent(item, remote, false, previousItemData);\n  }\n  /**\n   * @private\n   */\n\n\n  emitItemMutationEvent(item, remote, added) {\n    let previousItemData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    const eventName = added ? 'itemAdded' : 'itemUpdated';\n    const args = {\n      item,\n      isLocal: !remote\n    };\n\n    if (!added) {\n      args.previousItemData = previousItemData;\n    }\n\n    this.broadcastEventToListeners(eventName, args);\n  }\n  /**\n   * @private\n   */\n\n\n  _handleItemRemoved(index, eventId, oldData, dateUpdated, remote) {\n    this._updateRootDateUpdated(dateUpdated);\n\n    this.cache.delete(index, eventId);\n    this.broadcastEventToListeners('itemRemoved', {\n      index: index,\n      isLocal: !remote,\n      previousItemData: oldData\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  _handleContextUpdate(data, eventId, dateUpdated) {\n    this._updateRootDateUpdated(dateUpdated);\n\n    if (this._updateContextIfRequired(data, eventId)) {\n      this.broadcastEventToListeners('contextUpdated', {\n        context: data,\n        isLocal: false\n      });\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  _updateContextIfRequired(data, eventId) {\n    if (!this.contextEventId || eventId > this.contextEventId) {\n      this.context = data;\n      this.contextEventId = eventId;\n      return true;\n    } else {\n      logger_1.default.trace('Context update skipped, current:', this.lastEventId, ', remote:', eventId);\n      return false;\n    }\n  }\n\n}\n\nexports.SyncListImpl = SyncListImpl;\n/**\n * @class\n * @alias List\n * @classdesc Represents a Sync List, which stores an ordered list of values.\n * Use the {@link Client#list} method to obtain a reference to a Sync List.\n * Information about rate limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.\n * @property {String} sid - List unique id, immutable identifier assigned by the system.\n * @property {String} [uniqueName=null] - List unique name, immutable identifier that can be assigned to list during creation.\n * @property {Date} dateUpdated Date when the List was last updated, given in UTC ISO 8601 format (e.g., '2018-04-26T15:23:19.732Z')\n *\n * @fires List#removed\n * @fires List#itemAdded\n * @fires List#itemRemoved\n * @fires List#itemUpdated\n */\n\nclass SyncList extends closeable_1.default {\n  constructor(syncListImpl) {\n    super();\n    this.syncListImpl = syncListImpl;\n    this.syncListImpl.attach(this);\n  } // private props\n\n\n  get uri() {\n    return this.syncListImpl.uri;\n  }\n\n  get revision() {\n    return this.syncListImpl.revision;\n  }\n\n  get lastEventId() {\n    return this.syncListImpl.lastEventId;\n  }\n\n  get links() {\n    return this.syncListImpl.links;\n  }\n\n  get dateExpires() {\n    return this.syncListImpl.dateExpires;\n  }\n\n  static get type() {\n    return SyncListImpl.type;\n  }\n\n  get type() {\n    return SyncListImpl.type;\n  } // public props, documented along with class description\n\n\n  get sid() {\n    return this.syncListImpl.sid;\n  }\n\n  get uniqueName() {\n    return this.syncListImpl.uniqueName;\n  }\n\n  get dateUpdated() {\n    return this.syncListImpl.dateUpdated;\n  }\n  /**\n   * Add a new item to the list.\n   * @param {Object} data Data to be added.\n   * @param {List#ItemMetadata} [itemMetadata] Item metadata.\n   * @returns {Promise<ListItem>} A newly added item.\n   * @public\n   * @example\n   * list.push({ name: 'John Smith' }, { ttl: 86400 })\n   *   .then(function(item) {\n   *     console.log('List Item push() successful, item index: ' + item.index + ', data: ', item.data)\n   *   })\n   *   .catch(function(error) {\n   *     console.error('List Item push() failed', error);\n   *   });\n   */\n\n\n  async push(data, itemMetadata) {\n    this.ensureNotClosed();\n    return this.syncListImpl.push(data, itemMetadata);\n  }\n  /**\n   * Assign new data to an existing item, given its index.\n   * @param {Number} index Index of the item to be updated.\n   * @param {Object} value New data to be assigned to an item.\n   * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.\n   * @returns {Promise<ListItem>} A promise with updated item containing latest known data.\n   * The promise will be rejected if the item does not exist.\n   * @public\n   * @example\n   * list.set(42, { name: 'John Smith' }, { ttl: 86400 })\n   *   .then(function(item) {\n   *     console.log('List Item set() successful, item data:', item.data)\n   *   })\n   *   .catch(function(error) {\n   *     console.error('List Item set() failed', error);\n   *   });\n   */\n\n\n  async set(index, value, itemMetadataUpdates) {\n    this.ensureNotClosed();\n    return this.syncListImpl.set(index, value, itemMetadataUpdates);\n  }\n  /**\n   * Modify an existing item by applying a mutation function to it.\n   * @param {Number} index Index of an item to be changed.\n   * @param {List~Mutator} mutator A function that outputs a new data based on the existing data.\n   * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.\n   * @returns {Promise<ListItem>} Resolves with the most recent item state, the output of a successful\n   *    mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>). This promise\n   *    will be rejected if the indicated item does not already exist.\n   * @public\n   * @example\n   * var mutatorFunction = function(currentValue) {\n   *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n   *     return currentValue;\n   * };\n   * list.mutate(42, mutatorFunction, { ttl: 86400 })\n   *   .then(function(item) {\n   *     console.log('List Item mutate() successful, new data:', item.data)\n   *   })\n   *   .catch(function(error) {\n   *     console.error('List Item mutate() failed', error);\n   *   });\n   */\n\n\n  async mutate(index, mutator, itemMetadataUpdates) {\n    this.ensureNotClosed();\n    return this.syncListImpl.mutate(index, mutator, itemMetadataUpdates);\n  }\n  /**\n   * Modify an existing item by appending new fields (or overwriting existing ones) with the values from Object.\n   * This is equivalent to\n   * <pre>\n   * list.mutate(42, function(currentValue) {\n   *   return Object.assign(currentValue, obj));\n   * });\n   * </pre>\n   * @param {Number} index Index of an item to be changed.\n   * @param {Object} obj Set of fields to update.\n   * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.\n   * @returns {Promise<ListItem>} A promise with a modified item containing latest known data.\n   * The promise will be rejected if an item was not found.\n   * @public\n   * @example\n   * // Say, the List Item (index: 42) data is { name: 'John Smith' }\n   * list.update(42, { age: 34 }, { ttl: 86400 })\n   *   .then(function(item) {\n   *     // Now the List Item data is { name: 'John Smith', age: 34 }\n   *     console.log('List Item update() successful, new data:', item.data);\n   *   })\n   *   .catch(function(error) {\n   *     console.error('List Item update() failed', error);\n   *   });\n   */\n\n\n  async update(index, obj, itemMetadataUpdates) {\n    this.ensureNotClosed();\n    return this.syncListImpl.update(index, obj, itemMetadataUpdates);\n  }\n  /**\n   * Delete an item, given its index.\n   * @param {Number} index Index of an item to be removed.\n   * @returns {Promise<void>} A promise to remove an item.\n   * A promise will be rejected if an item was not found.\n   * @public\n   * @example\n   * list.remove(42)\n   *   .then(function() {\n   *     console.log('List Item remove() successful');\n   *   })\n   *   .catch(function(error) {\n   *     console.error('List Item remove() failed', error);\n   *   });\n   */\n\n\n  async remove(index) {\n    this.ensureNotClosed();\n    return this.syncListImpl.remove(index);\n  }\n  /**\n   * Retrieve an item by List index.\n   * @param {Number} index Item index in a List.\n   * @returns {Promise<ListItem>} A promise with an item containing latest known data.\n   * A promise will be rejected if an item was not found.\n   * @public\n   * @example\n   * list.get(42)\n   *   .then(function(item) {\n   *     console.log('List Item get() successful, item data:', item.data)\n   *   })\n   *   .catch(function(error) {\n   *     console.error('List Item get() failed', error);\n   *   });\n   */\n\n\n  async get(index) {\n    this.ensureNotClosed();\n    return this.syncListImpl.get(index);\n  }\n  /**\n   * Retrieve a List context\n   * @returns {Promise<Object>} A promise with a List's context\n   * @ignore\n   */\n\n\n  async getContext() {\n    this.ensureNotClosed();\n    return this.syncListImpl.getContext();\n  }\n  /**\n   * Query a list of items from collection.\n   * Information about the query limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.\n   * @param {Object} [queryOptions] Arguments for query\n   * @param {Number} [queryOptions.from] Item index, which should be used as the offset.\n   * If undefined, starts from the beginning or end depending on queryOptions.order.\n   * @param {Number} [queryOptions.pageSize=50] Results page size.\n   * @param {'asc'|'desc'} [queryOptions.order='asc'] Numeric order of results.\n   * @returns {Promise<Paginator<ListItem>>}\n   * @public\n   * @example\n   * var pageHandler = function(paginator) {\n   *   paginator.items.forEach(function(item) {\n   *     console.log('Item ' + item.index + ': ', item.data);\n   *   });\n   *   return paginator.hasNextPage ? paginator.nextPage().then(pageHandler)\n   *                                : null;\n   * };\n   * list.getItems({ from: 0, order: 'asc' })\n   *   .then(pageHandler)\n   *   .catch(function(error) {\n   *     console.error('List getItems() failed', error);\n   *   });\n   */\n\n\n  async getItems(queryOptions) {\n    this.ensureNotClosed();\n    return this.syncListImpl.getItems(queryOptions);\n  }\n  /**\n   * Update the time-to-live of the list.\n   * @param {Number} ttl Specifies the TTL in seconds after which the list is subject to automatic deletion. The value 0 means infinity.\n   * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n   * @public\n   * @example\n   * list.setTtl(3600)\n   *   .then(function() {\n   *     console.log('List setTtl() successful');\n   *   })\n   *   .catch(function(error) {\n   *     console.error('List setTtl() failed', error);\n   *   });\n   */\n\n\n  async setTtl(ttl) {\n    this.ensureNotClosed();\n    return this.syncListImpl.setTtl(ttl);\n  }\n  /**\n   * Update the time-to-live of a list item.\n   * @param {Number} index Item index.\n   * @param {Number} ttl Specifies the TTL in seconds after which the list item is subject to automatic deletion. The value 0 means infinity.\n   * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n   * @public\n   * @example\n   * list.setItemTtl(42, 86400)\n   *   .then(function() {\n   *     console.log('List setItemTtl() successful');\n   *   })\n   *   .catch(function(error) {\n   *     console.error('List setItemTtl() failed', error);\n   *   });\n   */\n\n\n  async setItemTtl(index, ttl) {\n    this.ensureNotClosed();\n    return this.syncListImpl.setItemTtl(index, ttl);\n  }\n  /**\n   * Delete this list. It will be impossible to restore it.\n   * @return {Promise<void>} A promise that resolves when the list has been deleted.\n   * @public\n   * @example\n   * list.removeList()\n   *   .then(function() {\n   *     console.log('List removeList() successful');\n   *   })\n   *   .catch(function(error) {\n   *     console.error('List removeList() failed', error);\n   *   });\n   */\n\n\n  async removeList() {\n    this.ensureNotClosed();\n    return this.syncListImpl.removeList();\n  }\n  /**\n   * Conclude work with the list instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this list will continue operating and receiving events normally.\n   * @public\n   * @example\n   * list.close();\n   */\n\n\n  close() {\n    super.close();\n    this.syncListImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexports.SyncList = SyncList;\nexports.default = SyncList;\n/**\n * Contains List Item metadata.\n * @typedef {Object} List#ItemMetadata\n * @property {Number} [ttl] Specifies the time-to-live in seconds after which the list item is subject to automatic deletion.\n * The value 0 means infinity.\n */\n\n/**\n * Applies a transformation to the item data. May be called multiple times on the\n * same datum in case of collisions with remote code.\n * @callback List~Mutator\n * @param {Object} currentValue The current data of the item in the cloud.\n * @return {Object} The desired new data for the item or <code>null</code> to gracefully cancel the mutation.\n */\n\n/**\n * Fired when a new item appears in the list, whether its creator was local or remote.\n * @event List#itemAdded\n * @param {Object} args Arguments provided with the event.\n * @param {ListItem} args.item Added item.\n * @param {Boolean} args.isLocal Equals 'true' if item was added by local actor, 'false' otherwise.\n * @example\n * list.on('itemAdded', function(args) {\n *   console.log('List item ' + args.item.index + ' was added');\n *   console.log('args.item.data:', args.item.data);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a list item is updated (not added or removed, but changed), whether the updater was local or remote.\n * @event List#itemUpdated\n * @param {Object} args Arguments provided with the event.\n * @param {ListItem} args.item Updated item.\n * @param {Boolean} args.isLocal Equals 'true' if item was updated by local actor, 'false' otherwise.\n * @param {Object} args.previousItemData Contains a snapshot of the item data before the update.\n * @example\n * list.on('itemUpdated', function(args) {\n *   console.log('List item ' + args.item.index + ' was updated');\n *   console.log('args.item.data:', args.item.data);\n *   console.log('args.isLocal:', args.isLocal);\n *   console.log('args.previousItemData:', args.previousItemData);\n * });\n */\n\n/**\n * Fired when a list item is removed, whether the remover was local or remote.\n * @event List#itemRemoved\n * @param {Object} args Arguments provided with the event.\n * @param {Number} args.index The index of the removed item.\n * @param {Boolean} args.isLocal Equals 'true' if item was removed by local actor, 'false' otherwise.\n * @param {Object} args.previousItemData Contains a snapshot of item data before removal.\n * @example\n * list.on('itemRemoved', function(args) {\n *   console.log('List item ' + args.index + ' was removed');\n *   console.log('args.previousItemData:', args.previousItemData);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a list is deleted entirely, by any actor local or remote.\n * @event List#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if list was removed by local actor, 'false' otherwise.\n * @example\n * list.on('removed', function(args) {\n *   console.log('List ' + list.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */","map":{"version":3,"sources":["/Users/abdulkhan/Documents/waymax/Waymax/node_modules/twilio-sync/lib/synclist.js"],"names":["Object","defineProperty","exports","value","sanitize_1","require","uri_1","syncerror_1","logger_1","entity_1","listitem_1","paginator_1","cache_1","mergingqueue_1","closeable_1","SyncListImpl","SyncEntity","constructor","services","descriptor","removalHandler","updateRequestReducer","acc","input","ttl","updateMergingQueue","NamespacedMergingQueue","cache","Cache","date_updated","Date","uri","url","revision","lastEventId","last_event_id","links","dateExpires","date_expires","type","indexName","undefined","queryString","sid","uniqueName","unique_name","dateUpdated","_addOrUpdateItemOnServer","data","ifMatch","requestBody","response","network","post","body","push","itemMetadata","validateOptionalTtl","item","items","index","Number","_handleItemMutated","get","set","itemMetadataUpdates","squashAndAdd","_updateItemUnconditionally","existingItem","itemDescriptor","_updateItemWithIfMatch","mutatorFunction","deepClone","error","status","_getItemFromServer","mutate","mutator","add","update","obj","remote","assign","remove","previousItemData","delete","_handleItemRemoved","cachedItem","result","queryItems","length","SyncError","arg","UriBuilder","queryParam","from","limit","pageToken","order","build","map","el","itemInCache","store","ListItem","meta","Paginator","previous_token","next_token","getItems","args","validatePageSize","pageSize","getContext","context","_updateContextIfRequired","setTtl","validateMandatoryTtl","onRemoved","setItemTtl","updateDateExpires","removeList","locally","_unsubscribe","broadcastEventToListeners","isLocal","shouldIgnoreEvent","key","eventId","isKnown","_update","isStrictlyOrdered","itemIndex","item_index","date_created","item_url","id","item_revision","item_data","_handleContextUpdate","context_data","_advanceLastEventId","list_revision","_updateRootDateUpdated","getTime","storage","added","default","trace","newItem","emitItemMutationEvent","eventName","oldData","contextEventId","SyncList","syncListImpl","attach","ensureNotClosed","queryOptions","close","detach","listenerUuid"],"mappings":"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CA;;;AACgB,QAANc,MAAM,CAACnB,KAAD,EAAQoB,GAAR,EAAaf,mBAAb,EAAkC;AAC1C,SAAK4F,eAAL;AACA,WAAO,KAAKF,YAAL,CAAkB5E,MAAlB,CAAyBnB,KAAzB,EAAgCoB,GAAhC,EAAqCf,mBAArC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACgB,QAANkB,MAAM,CAACvB,KAAD,EAAQ;AAChB,SAAKiG,eAAL;AACA,WAAO,KAAKF,YAAL,CAAkBxE,MAAlB,CAAyBvB,KAAzB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACa,QAAHG,GAAG,CAACH,KAAD,EAAQ;AACb,SAAKiG,eAAL;AACA,WAAO,KAAKF,YAAL,CAAkB5F,GAAlB,CAAsBH,KAAtB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACoB,QAAVqD,UAAU,GAAG;AACf,SAAK4C,eAAL;AACA,WAAO,KAAKF,YAAL,CAAkB1C,UAAlB,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACkB,QAARJ,QAAQ,CAACiD,YAAD,EAAe;AACzB,SAAKD,eAAL;AACA,WAAO,KAAKF,YAAL,CAAkB9C,QAAlB,CAA2BiD,YAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACgB,QAAN1C,MAAM,CAAC5F,GAAD,EAAM;AACd,SAAKqI,eAAL;AACA,WAAO,KAAKF,YAAL,CAAkBvC,MAAlB,CAAyB5F,GAAzB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACoB,QAAV+F,UAAU,CAAC3D,KAAD,EAAQpC,GAAR,EAAa;AACzB,SAAKqI,eAAL;AACA,WAAO,KAAKF,YAAL,CAAkBpC,UAAlB,CAA6B3D,KAA7B,EAAoCpC,GAApC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACoB,QAAViG,UAAU,GAAG;AACf,SAAKoC,eAAL;AACA,WAAO,KAAKF,YAAL,CAAkBlC,UAAlB,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIsC,EAAAA,KAAK,GAAG;AACJ,UAAMA,KAAN;AACA,SAAKJ,YAAL,CAAkBK,MAAlB,CAAyB,KAAKC,YAA9B;AACH;;AAjRsC;;AAmR3C/J,OAAO,CAACwJ,QAAR,GAAmBA,QAAnB;AACAxJ,OAAO,CAACiJ,OAAR,GAAkBO,QAAlB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sanitize_1 = require(\"./utils/sanitize\");\nconst uri_1 = require(\"./utils/uri\");\nconst syncerror_1 = require(\"./utils/syncerror\");\nconst logger_1 = require(\"./utils/logger\");\nconst entity_1 = require(\"./entity\");\nconst listitem_1 = require(\"./listitem\");\nconst paginator_1 = require(\"./paginator\");\nconst cache_1 = require(\"./cache\");\nconst mergingqueue_1 = require(\"./mergingqueue\");\nconst closeable_1 = require(\"./closeable\");\nclass SyncListImpl extends entity_1.SyncEntity {\n    /**\n     * @private\n     */\n    constructor(services, descriptor, removalHandler) {\n        super(services, removalHandler);\n        const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? { ttl: input.ttl }\n            : acc;\n        this.updateMergingQueue = new mergingqueue_1.NamespacedMergingQueue(updateRequestReducer);\n        this.cache = new cache_1.Cache();\n        this.descriptor = descriptor;\n        this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n    }\n    // private props\n    get uri() {\n        return this.descriptor.url;\n    }\n    get revision() {\n        return this.descriptor.revision;\n    }\n    get lastEventId() {\n        return this.descriptor.last_event_id;\n    }\n    get links() {\n        return this.descriptor.links;\n    }\n    get dateExpires() {\n        return this.descriptor.date_expires;\n    }\n    static get type() {\n        return 'list';\n    }\n    get type() {\n        return 'list';\n    }\n    // below properties are specific to Insights only\n    get indexName() {\n        return undefined;\n    }\n    get queryString() {\n        return undefined;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.descriptor.sid;\n    }\n    get uniqueName() {\n        return this.descriptor.unique_name || null;\n    }\n    get dateUpdated() {\n        return this.descriptor.date_updated;\n    }\n    async _addOrUpdateItemOnServer(url, data, ifMatch, ttl) {\n        const requestBody = { data };\n        if (ttl !== undefined) {\n            requestBody.ttl = ttl;\n        }\n        const response = await this.services.network.post(url, requestBody, ifMatch);\n        response.body.data = data;\n        response.body.date_updated = new Date(response.body.date_updated);\n        return response.body;\n    }\n    async push(value, itemMetadata) {\n        let ttl = (itemMetadata || {}).ttl;\n        sanitize_1.validateOptionalTtl(ttl);\n        let item = await this._addOrUpdateItemOnServer(this.links.items, value, undefined, ttl);\n        let index = Number(item.index);\n        this._handleItemMutated(index, item.url, item.last_event_id, item.revision, value, item.date_updated, item.date_expires, true, false);\n        return this.cache.get(index);\n    }\n    async set(index, value, itemMetadataUpdates) {\n        const input = itemMetadataUpdates || {};\n        sanitize_1.validateOptionalTtl(input.ttl);\n        return this.updateMergingQueue.squashAndAdd(index, input, (input) => this._updateItemUnconditionally(index, value, input.ttl));\n    }\n    async _updateItemUnconditionally(index, data, ttl) {\n        let existingItem = await this.get(index);\n        const itemDescriptor = await this._addOrUpdateItemOnServer(existingItem.uri, data, undefined, ttl);\n        this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision, itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n        return this.cache.get(index);\n    }\n    async _updateItemWithIfMatch(index, mutatorFunction, ttl) {\n        const existingItem = await this.get(index);\n        const data = mutatorFunction(sanitize_1.deepClone(existingItem.data));\n        if (data) {\n            const ifMatch = existingItem.revision;\n            try {\n                const itemDescriptor = await this._addOrUpdateItemOnServer(existingItem.uri, data, ifMatch, ttl);\n                this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision, itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n                return this.cache.get(index);\n            }\n            catch (error) {\n                if (error.status === 412) {\n                    await this._getItemFromServer(index);\n                    return this._updateItemWithIfMatch(index, mutatorFunction, ttl);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        else {\n            return existingItem;\n        }\n    }\n    async mutate(index, mutator, itemMetadataUpdates) {\n        const input = itemMetadataUpdates || {};\n        sanitize_1.validateOptionalTtl(input.ttl);\n        return this.updateMergingQueue.add(index, input, (input) => this._updateItemWithIfMatch(index, mutator, input.ttl));\n    }\n    async update(index, obj, itemMetadataUpdates) {\n        return this.mutate(index, remote => Object.assign(remote, obj), itemMetadataUpdates);\n    }\n    async remove(index) {\n        const item = await this.get(index);\n        const previousItemData = sanitize_1.deepClone(item.data);\n        const response = await this.services.network.delete(item.uri);\n        this._handleItemRemoved(index, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);\n    }\n    async get(index) {\n        let cachedItem = this.cache.get(index);\n        if (cachedItem) {\n            return cachedItem;\n        }\n        else {\n            return this._getItemFromServer(index);\n        }\n    }\n    async _getItemFromServer(index) {\n        let result = await this.queryItems({ index });\n        if (result.items.length < 1) {\n            throw new syncerror_1.SyncError(`No item with index ${index} found`, 404, 54151);\n        }\n        else {\n            return result.items[0];\n        }\n    }\n    /**\n     * Query items from the List\n     * @private\n     */\n    async queryItems(arg) {\n        arg = arg || {};\n        const url = new uri_1.UriBuilder(this.links.items)\n            .queryParam('From', arg.from)\n            .queryParam('PageSize', arg.limit)\n            .queryParam('Index', arg.index)\n            .queryParam('PageToken', arg.pageToken)\n            .queryParam('Order', arg.order)\n            .build();\n        let response = await this.services.network.get(url);\n        let items = response.body.items.map(el => {\n            el.date_updated = new Date(el.date_updated);\n            let itemInCache = this.cache.get(el.index);\n            if (itemInCache) {\n                this._handleItemMutated(el.index, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);\n            }\n            else {\n                this.cache.store(Number(el.index), new listitem_1.ListItem({\n                    index: Number(el.index),\n                    uri: el.url,\n                    revision: el.revision,\n                    lastEventId: el.last_event_id,\n                    dateUpdated: el.date_updated,\n                    dateExpires: el.date_expires,\n                    data: el.data\n                }), el.last_event_id);\n            }\n            return this.cache.get(el.index);\n        });\n        let meta = response.body.meta;\n        return new paginator_1.Paginator(items, pageToken => this.queryItems({ pageToken }), meta.previous_token, meta.next_token);\n    }\n    async getItems(args) {\n        args = args || {};\n        sanitize_1.validatePageSize(args.pageSize);\n        args.limit = args.pageSize || args.limit || 50;\n        args.order = args.order || 'asc';\n        return this.queryItems(args);\n    }\n    /**\n     * @return {Promise<Object>} Context of List\n     * @private\n     */\n    async getContext() {\n        if (!this.context) {\n            let response = await this.services.network.get(this.links.context);\n            // store fetched context if we have't received any newer update\n            this._updateContextIfRequired(response.body.data, response.body.last_event_id);\n        }\n        return this.context;\n    }\n    async setTtl(ttl) {\n        sanitize_1.validateMandatoryTtl(ttl);\n        try {\n            const requestBody = { ttl };\n            const response = await this.services.network.post(this.uri, requestBody);\n            this.descriptor.date_expires = response.body.date_expires;\n        }\n        catch (error) {\n            if (error.status === 404) {\n                this.onRemoved(false);\n            }\n            throw error;\n        }\n    }\n    async setItemTtl(index, ttl) {\n        sanitize_1.validateMandatoryTtl(ttl);\n        let existingItem = await this.get(index);\n        const requestBody = { ttl };\n        const response = await this.services.network.post(existingItem.uri, requestBody);\n        existingItem.updateDateExpires(response.body.date_expires);\n    }\n    async removeList() {\n        await this.services.network.delete(this.uri);\n        this.onRemoved(true);\n    }\n    onRemoved(locally) {\n        this._unsubscribe();\n        this.removalHandler(this.type, this.sid, this.uniqueName);\n        this.broadcastEventToListeners('removed', { isLocal: locally });\n    }\n    shouldIgnoreEvent(key, eventId) {\n        return this.cache.isKnown(key, eventId);\n    }\n    /**\n     * Handle update, which came from the server.\n     * @private\n     */\n    _update(update, isStrictlyOrdered) {\n        const itemIndex = Number(update.item_index);\n        update.date_created = new Date(update.date_created);\n        switch (update.type) {\n            case 'list_item_added':\n            case 'list_item_updated':\n                {\n                    this._handleItemMutated(itemIndex, update.item_url, update.id, update.item_revision, update.item_data, update.date_created, undefined, // orchestration does not include date_expires\n                    update.type === 'list_item_added', true);\n                }\n                break;\n            case 'list_item_removed':\n                {\n                    this._handleItemRemoved(itemIndex, update.id, update.item_data, update.date_created, true);\n                }\n                break;\n            case 'list_context_updated':\n                {\n                    this._handleContextUpdate(update.context_data, update.id, update.date_created);\n                }\n                break;\n            case 'list_removed':\n                {\n                    this.onRemoved(false);\n                }\n                break;\n        }\n        if (isStrictlyOrdered) {\n            this._advanceLastEventId(update.id, update.list_revision);\n        }\n    }\n    _advanceLastEventId(eventId, revision) {\n        if (this.lastEventId < eventId) {\n            this.descriptor.last_event_id = eventId;\n            if (revision) {\n                this.descriptor.revision = revision;\n            }\n        }\n    }\n    _updateRootDateUpdated(dateUpdated) {\n        if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {\n            this.descriptor.date_updated = dateUpdated;\n            this.services.storage.update(this.type, this.sid, this.uniqueName, { date_updated: dateUpdated });\n        }\n    }\n    _handleItemMutated(index, uri, lastEventId, revision, data, dateUpdated, dateExpires, added, remote) {\n        if (this.shouldIgnoreEvent(index, lastEventId)) {\n            logger_1.default.trace('Item ', index, ' update skipped, current:', this.lastEventId, ', remote:', lastEventId);\n            return;\n        }\n        this._updateRootDateUpdated(dateUpdated);\n        const item = this.cache.get(index);\n        if (!item) {\n            const newItem = new listitem_1.ListItem({ index, uri, lastEventId, revision, data, dateUpdated, dateExpires });\n            this.cache.store(index, newItem, lastEventId);\n            this.emitItemMutationEvent(newItem, remote, added);\n            return;\n        }\n        const previousItemData = sanitize_1.deepClone(item.data);\n        item.update(lastEventId, revision, data, dateUpdated);\n        this.cache.store(index, item, lastEventId);\n        if (dateExpires !== undefined) {\n            item.updateDateExpires(dateExpires);\n        }\n        this.emitItemMutationEvent(item, remote, false, previousItemData);\n    }\n    /**\n     * @private\n     */\n    emitItemMutationEvent(item, remote, added, previousItemData = null) {\n        const eventName = added ? 'itemAdded' : 'itemUpdated';\n        const args = { item, isLocal: !remote };\n        if (!added) {\n            args.previousItemData = previousItemData;\n        }\n        this.broadcastEventToListeners(eventName, args);\n    }\n    /**\n     * @private\n     */\n    _handleItemRemoved(index, eventId, oldData, dateUpdated, remote) {\n        this._updateRootDateUpdated(dateUpdated);\n        this.cache.delete(index, eventId);\n        this.broadcastEventToListeners('itemRemoved', { index: index, isLocal: !remote, previousItemData: oldData });\n    }\n    /**\n     * @private\n     */\n    _handleContextUpdate(data, eventId, dateUpdated) {\n        this._updateRootDateUpdated(dateUpdated);\n        if (this._updateContextIfRequired(data, eventId)) {\n            this.broadcastEventToListeners('contextUpdated', { context: data, isLocal: false });\n        }\n    }\n    /**\n     * @private\n     */\n    _updateContextIfRequired(data, eventId) {\n        if (!this.contextEventId || eventId > this.contextEventId) {\n            this.context = data;\n            this.contextEventId = eventId;\n            return true;\n        }\n        else {\n            logger_1.default.trace('Context update skipped, current:', this.lastEventId, ', remote:', eventId);\n            return false;\n        }\n    }\n}\nexports.SyncListImpl = SyncListImpl;\n/**\n * @class\n * @alias List\n * @classdesc Represents a Sync List, which stores an ordered list of values.\n * Use the {@link Client#list} method to obtain a reference to a Sync List.\n * Information about rate limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.\n * @property {String} sid - List unique id, immutable identifier assigned by the system.\n * @property {String} [uniqueName=null] - List unique name, immutable identifier that can be assigned to list during creation.\n * @property {Date} dateUpdated Date when the List was last updated, given in UTC ISO 8601 format (e.g., '2018-04-26T15:23:19.732Z')\n *\n * @fires List#removed\n * @fires List#itemAdded\n * @fires List#itemRemoved\n * @fires List#itemUpdated\n */\nclass SyncList extends closeable_1.default {\n    constructor(syncListImpl) {\n        super();\n        this.syncListImpl = syncListImpl;\n        this.syncListImpl.attach(this);\n    }\n    // private props\n    get uri() {\n        return this.syncListImpl.uri;\n    }\n    get revision() {\n        return this.syncListImpl.revision;\n    }\n    get lastEventId() {\n        return this.syncListImpl.lastEventId;\n    }\n    get links() {\n        return this.syncListImpl.links;\n    }\n    get dateExpires() {\n        return this.syncListImpl.dateExpires;\n    }\n    static get type() {\n        return SyncListImpl.type;\n    }\n    get type() {\n        return SyncListImpl.type;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.syncListImpl.sid;\n    }\n    get uniqueName() {\n        return this.syncListImpl.uniqueName;\n    }\n    get dateUpdated() {\n        return this.syncListImpl.dateUpdated;\n    }\n    /**\n     * Add a new item to the list.\n     * @param {Object} data Data to be added.\n     * @param {List#ItemMetadata} [itemMetadata] Item metadata.\n     * @returns {Promise<ListItem>} A newly added item.\n     * @public\n     * @example\n     * list.push({ name: 'John Smith' }, { ttl: 86400 })\n     *   .then(function(item) {\n     *     console.log('List Item push() successful, item index: ' + item.index + ', data: ', item.data)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item push() failed', error);\n     *   });\n     */\n    async push(data, itemMetadata) {\n        this.ensureNotClosed();\n        return this.syncListImpl.push(data, itemMetadata);\n    }\n    /**\n     * Assign new data to an existing item, given its index.\n     * @param {Number} index Index of the item to be updated.\n     * @param {Object} value New data to be assigned to an item.\n     * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.\n     * @returns {Promise<ListItem>} A promise with updated item containing latest known data.\n     * The promise will be rejected if the item does not exist.\n     * @public\n     * @example\n     * list.set(42, { name: 'John Smith' }, { ttl: 86400 })\n     *   .then(function(item) {\n     *     console.log('List Item set() successful, item data:', item.data)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item set() failed', error);\n     *   });\n     */\n    async set(index, value, itemMetadataUpdates) {\n        this.ensureNotClosed();\n        return this.syncListImpl.set(index, value, itemMetadataUpdates);\n    }\n    /**\n     * Modify an existing item by applying a mutation function to it.\n     * @param {Number} index Index of an item to be changed.\n     * @param {List~Mutator} mutator A function that outputs a new data based on the existing data.\n     * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.\n     * @returns {Promise<ListItem>} Resolves with the most recent item state, the output of a successful\n     *    mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>). This promise\n     *    will be rejected if the indicated item does not already exist.\n     * @public\n     * @example\n     * var mutatorFunction = function(currentValue) {\n     *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n     *     return currentValue;\n     * };\n     * list.mutate(42, mutatorFunction, { ttl: 86400 })\n     *   .then(function(item) {\n     *     console.log('List Item mutate() successful, new data:', item.data)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item mutate() failed', error);\n     *   });\n     */\n    async mutate(index, mutator, itemMetadataUpdates) {\n        this.ensureNotClosed();\n        return this.syncListImpl.mutate(index, mutator, itemMetadataUpdates);\n    }\n    /**\n     * Modify an existing item by appending new fields (or overwriting existing ones) with the values from Object.\n     * This is equivalent to\n     * <pre>\n     * list.mutate(42, function(currentValue) {\n     *   return Object.assign(currentValue, obj));\n     * });\n     * </pre>\n     * @param {Number} index Index of an item to be changed.\n     * @param {Object} obj Set of fields to update.\n     * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.\n     * @returns {Promise<ListItem>} A promise with a modified item containing latest known data.\n     * The promise will be rejected if an item was not found.\n     * @public\n     * @example\n     * // Say, the List Item (index: 42) data is { name: 'John Smith' }\n     * list.update(42, { age: 34 }, { ttl: 86400 })\n     *   .then(function(item) {\n     *     // Now the List Item data is { name: 'John Smith', age: 34 }\n     *     console.log('List Item update() successful, new data:', item.data);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item update() failed', error);\n     *   });\n     */\n    async update(index, obj, itemMetadataUpdates) {\n        this.ensureNotClosed();\n        return this.syncListImpl.update(index, obj, itemMetadataUpdates);\n    }\n    /**\n     * Delete an item, given its index.\n     * @param {Number} index Index of an item to be removed.\n     * @returns {Promise<void>} A promise to remove an item.\n     * A promise will be rejected if an item was not found.\n     * @public\n     * @example\n     * list.remove(42)\n     *   .then(function() {\n     *     console.log('List Item remove() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item remove() failed', error);\n     *   });\n     */\n    async remove(index) {\n        this.ensureNotClosed();\n        return this.syncListImpl.remove(index);\n    }\n    /**\n     * Retrieve an item by List index.\n     * @param {Number} index Item index in a List.\n     * @returns {Promise<ListItem>} A promise with an item containing latest known data.\n     * A promise will be rejected if an item was not found.\n     * @public\n     * @example\n     * list.get(42)\n     *   .then(function(item) {\n     *     console.log('List Item get() successful, item data:', item.data)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item get() failed', error);\n     *   });\n     */\n    async get(index) {\n        this.ensureNotClosed();\n        return this.syncListImpl.get(index);\n    }\n    /**\n     * Retrieve a List context\n     * @returns {Promise<Object>} A promise with a List's context\n     * @ignore\n     */\n    async getContext() {\n        this.ensureNotClosed();\n        return this.syncListImpl.getContext();\n    }\n    /**\n     * Query a list of items from collection.\n     * Information about the query limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.\n     * @param {Object} [queryOptions] Arguments for query\n     * @param {Number} [queryOptions.from] Item index, which should be used as the offset.\n     * If undefined, starts from the beginning or end depending on queryOptions.order.\n     * @param {Number} [queryOptions.pageSize=50] Results page size.\n     * @param {'asc'|'desc'} [queryOptions.order='asc'] Numeric order of results.\n     * @returns {Promise<Paginator<ListItem>>}\n     * @public\n     * @example\n     * var pageHandler = function(paginator) {\n     *   paginator.items.forEach(function(item) {\n     *     console.log('Item ' + item.index + ': ', item.data);\n     *   });\n     *   return paginator.hasNextPage ? paginator.nextPage().then(pageHandler)\n     *                                : null;\n     * };\n     * list.getItems({ from: 0, order: 'asc' })\n     *   .then(pageHandler)\n     *   .catch(function(error) {\n     *     console.error('List getItems() failed', error);\n     *   });\n     */\n    async getItems(queryOptions) {\n        this.ensureNotClosed();\n        return this.syncListImpl.getItems(queryOptions);\n    }\n    /**\n     * Update the time-to-live of the list.\n     * @param {Number} ttl Specifies the TTL in seconds after which the list is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * list.setTtl(3600)\n     *   .then(function() {\n     *     console.log('List setTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List setTtl() failed', error);\n     *   });\n     */\n    async setTtl(ttl) {\n        this.ensureNotClosed();\n        return this.syncListImpl.setTtl(ttl);\n    }\n    /**\n     * Update the time-to-live of a list item.\n     * @param {Number} index Item index.\n     * @param {Number} ttl Specifies the TTL in seconds after which the list item is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * list.setItemTtl(42, 86400)\n     *   .then(function() {\n     *     console.log('List setItemTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List setItemTtl() failed', error);\n     *   });\n     */\n    async setItemTtl(index, ttl) {\n        this.ensureNotClosed();\n        return this.syncListImpl.setItemTtl(index, ttl);\n    }\n    /**\n     * Delete this list. It will be impossible to restore it.\n     * @return {Promise<void>} A promise that resolves when the list has been deleted.\n     * @public\n     * @example\n     * list.removeList()\n     *   .then(function() {\n     *     console.log('List removeList() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List removeList() failed', error);\n     *   });\n     */\n    async removeList() {\n        this.ensureNotClosed();\n        return this.syncListImpl.removeList();\n    }\n    /**\n     * Conclude work with the list instance and remove all event listeners attached to it.\n     * Any subsequent operation on this object will be rejected with error.\n     * Other local copies of this list will continue operating and receiving events normally.\n     * @public\n     * @example\n     * list.close();\n     */\n    close() {\n        super.close();\n        this.syncListImpl.detach(this.listenerUuid);\n    }\n}\nexports.SyncList = SyncList;\nexports.default = SyncList;\n/**\n * Contains List Item metadata.\n * @typedef {Object} List#ItemMetadata\n * @property {Number} [ttl] Specifies the time-to-live in seconds after which the list item is subject to automatic deletion.\n * The value 0 means infinity.\n */\n/**\n * Applies a transformation to the item data. May be called multiple times on the\n * same datum in case of collisions with remote code.\n * @callback List~Mutator\n * @param {Object} currentValue The current data of the item in the cloud.\n * @return {Object} The desired new data for the item or <code>null</code> to gracefully cancel the mutation.\n */\n/**\n * Fired when a new item appears in the list, whether its creator was local or remote.\n * @event List#itemAdded\n * @param {Object} args Arguments provided with the event.\n * @param {ListItem} args.item Added item.\n * @param {Boolean} args.isLocal Equals 'true' if item was added by local actor, 'false' otherwise.\n * @example\n * list.on('itemAdded', function(args) {\n *   console.log('List item ' + args.item.index + ' was added');\n *   console.log('args.item.data:', args.item.data);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n/**\n * Fired when a list item is updated (not added or removed, but changed), whether the updater was local or remote.\n * @event List#itemUpdated\n * @param {Object} args Arguments provided with the event.\n * @param {ListItem} args.item Updated item.\n * @param {Boolean} args.isLocal Equals 'true' if item was updated by local actor, 'false' otherwise.\n * @param {Object} args.previousItemData Contains a snapshot of the item data before the update.\n * @example\n * list.on('itemUpdated', function(args) {\n *   console.log('List item ' + args.item.index + ' was updated');\n *   console.log('args.item.data:', args.item.data);\n *   console.log('args.isLocal:', args.isLocal);\n *   console.log('args.previousItemData:', args.previousItemData);\n * });\n */\n/**\n * Fired when a list item is removed, whether the remover was local or remote.\n * @event List#itemRemoved\n * @param {Object} args Arguments provided with the event.\n * @param {Number} args.index The index of the removed item.\n * @param {Boolean} args.isLocal Equals 'true' if item was removed by local actor, 'false' otherwise.\n * @param {Object} args.previousItemData Contains a snapshot of item data before removal.\n * @example\n * list.on('itemRemoved', function(args) {\n *   console.log('List item ' + args.index + ' was removed');\n *   console.log('args.previousItemData:', args.previousItemData);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n/**\n * Fired when a list is deleted entirely, by any actor local or remote.\n * @event List#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if list was removed by local actor, 'false' otherwise.\n * @example\n * list.on('removed', function(args) {\n *   console.log('List ' + list.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n"]},"metadata":{},"sourceType":"script"}