{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @classdesc Contains aggregated information about a {@link Message}'s delivery statuses across all {@link Participant}s\n * of a {@link Conversation}.\n *\n * At any moment during delivering message to a {@link Participant} the message can have zero or more of following\n * delivery statuses:\n *\n * <ul><li>\n * Message considered as <b>sent</b> to a participant, if the nearest upstream carrier accepted the message.\n * </li><li>\n * Message considered as <b>delivered</b> to a participant, if Twilio has received confirmation of message\n * delivery from the upstream carrier, and, where available, the destination handset.\n * </li><li>\n * Message considered as <b>undelivered</b> to a participant, if Twilio has received a delivery receipt\n * indicating that the message was not delivered. This can happen for many reasons including carrier content\n * filtering and the availability of the destination handset.\n * </li><li>\n * Message considered as <b>read</b> by a participant, if the message has been delivered and opened by the\n * recipient in the conversation. The recipient must have enabled read receipts.\n * </li><li>\n * Message considered as <b>failed</b> to be delivered to a participant if the message could not be sent.\n * This can happen for various reasons including queue overflows, account suspensions and media\n * errors (in the case of MMS for instance).\n *</li></ul>\n *\n * {@link AggregatedDeliveryReceipt} class contains aggregated value {@link AggregatedDeliveryReceipt#DeliveryAmount} for each delivery status.\n *\n * @property {number} total - Maximum number of delivery events expected for the message\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} sent - Amount of participants that have <b>sent</b> delivery status for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} delivered - Amount of participants that have <b>delivered</b> delivery status\n *   for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} read - Amount of participants that have <b>read</b> delivery status for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} undelivered - Amount of participants that have <b>undelivered</b> delivery status\n *   for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} failed - Amount of participants that have <b>failed</b> delivery status for the message.\n */\n\nvar AggregatedDeliveryReceipt = function () {\n  /**\n   * Signifies amount of participants which have the status for the message.\n   * @typedef {('none'|'some'|'all')} AggregatedDeliveryReceipt#DeliveryAmount\n   */\n  function AggregatedDeliveryReceipt(data) {\n    (0, _classCallCheck3.default)(this, AggregatedDeliveryReceipt);\n    this.state = data;\n  }\n  /**\n   * @return Maximum number of delivery events expected for the message.\n   */\n\n\n  (0, _createClass3.default)(AggregatedDeliveryReceipt, [{\n    key: \"_update\",\n    value: function _update(data) {\n      this.state = data;\n    }\n  }, {\n    key: \"_isEquals\",\n    value: function _isEquals(data) {\n      var isTotalSame = this.total === data.total;\n      var isSentSame = this.sent === data.sent;\n      var isDeliveredSame = this.delivered === data.delivered;\n      var isReadSame = this.read === data.read;\n      var isUndeliveredSame = this.undelivered === data.undelivered;\n      var isFailedSame = this.failed === data.failed;\n      return isTotalSame && isSentSame && isDeliveredSame && isReadSame && isUndeliveredSame && isFailedSame;\n    }\n  }, {\n    key: \"total\",\n    get: function get() {\n      return this.state.total;\n    }\n    /**\n     * Message considered as <b>sent</b> to a participant, if the nearest upstream carrier accepted the message.\n     *\n     * @return {@link DeliveryAmount} of participants that have <b>sent</b> delivery status for the message.\n     */\n\n  }, {\n    key: \"sent\",\n    get: function get() {\n      return this.state.sent;\n    }\n    /**\n     * Message considered as <b>delivered</b> to a participant, if Twilio has received confirmation of message\n     * delivery from the upstream carrier, and, where available, the destination handset.\n     *\n     * @return {@link DeliveryAmount} of participants that have <b>delivered</b> delivery status for the message.\n     */\n\n  }, {\n    key: \"delivered\",\n    get: function get() {\n      return this.state.delivered;\n    }\n    /**\n     * Message considered as <b>read</b> by a participant, if the message has been delivered and opened by the\n     * recipient in the conversation. The recipient must have enabled read receipts.\n     *\n     * @return {@link DeliveryAmount} of participants that have <b>read</b> delivery status for the message.\n     */\n\n  }, {\n    key: \"read\",\n    get: function get() {\n      return this.state.read;\n    }\n    /**\n     * Message considered as <b>undelivered</b> to a participant, if Twilio has received a delivery receipt\n     * indicating that the message was not delivered. This can happen for many reasons including carrier content\n     * filtering and the availability of the destination handset.\n     *\n     * @return {@link DeliveryAmount} of participants that have <b>undelivered</b> delivery status for the message.\n     */\n\n  }, {\n    key: \"undelivered\",\n    get: function get() {\n      return this.state.undelivered;\n    }\n    /**\n     * Message considered as <b>failed</b> to be delivered to a participant if the message could not be sent.\n     * This can happen for various reasons including queue overflows, account suspensions and media\n     * errors (in the case of MMS for instance). Twilio does not charge you for failed messages.\n     *\n     * @return {@link DeliveryAmount} of participants that have <b>failed</b> delivery status for the message.\n     */\n\n  }, {\n    key: \"failed\",\n    get: function get() {\n      return this.state.failed;\n    }\n  }]);\n  return AggregatedDeliveryReceipt;\n}();\n\nexports.AggregatedDeliveryReceipt = AggregatedDeliveryReceipt;","map":{"version":3,"sources":["/Users/abdulkhan/Documents/waymax/Waymax/node_modules/@twilio/conversations/browser/aggregateddeliveryreceipt.js"],"names":["_classCallCheck2","require","_classCallCheck3","_interopRequireDefault","_createClass2","_createClass3","obj","__esModule","default","Object","defineProperty","exports","value","AggregatedDeliveryReceipt","data","state","key","_update","_isEquals","isTotalSame","total","isSentSame","sent","isDeliveredSame","delivered","isReadSame","read","isUndeliveredSame","undelivered","isFailedSame","failed","get"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @classdesc Contains aggregated information about a {@link Message}'s delivery statuses across all {@link Participant}s\n * of a {@link Conversation}.\n *\n * At any moment during delivering message to a {@link Participant} the message can have zero or more of following\n * delivery statuses:\n *\n * <ul><li>\n * Message considered as <b>sent</b> to a participant, if the nearest upstream carrier accepted the message.\n * </li><li>\n * Message considered as <b>delivered</b> to a participant, if Twilio has received confirmation of message\n * delivery from the upstream carrier, and, where available, the destination handset.\n * </li><li>\n * Message considered as <b>undelivered</b> to a participant, if Twilio has received a delivery receipt\n * indicating that the message was not delivered. This can happen for many reasons including carrier content\n * filtering and the availability of the destination handset.\n * </li><li>\n * Message considered as <b>read</b> by a participant, if the message has been delivered and opened by the\n * recipient in the conversation. The recipient must have enabled read receipts.\n * </li><li>\n * Message considered as <b>failed</b> to be delivered to a participant if the message could not be sent.\n * This can happen for various reasons including queue overflows, account suspensions and media\n * errors (in the case of MMS for instance).\n *</li></ul>\n *\n * {@link AggregatedDeliveryReceipt} class contains aggregated value {@link AggregatedDeliveryReceipt#DeliveryAmount} for each delivery status.\n *\n * @property {number} total - Maximum number of delivery events expected for the message\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} sent - Amount of participants that have <b>sent</b> delivery status for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} delivered - Amount of participants that have <b>delivered</b> delivery status\n *   for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} read - Amount of participants that have <b>read</b> delivery status for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} undelivered - Amount of participants that have <b>undelivered</b> delivery status\n *   for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} failed - Amount of participants that have <b>failed</b> delivery status for the message.\n */\n\nvar AggregatedDeliveryReceipt = function () {\n    /**\n     * Signifies amount of participants which have the status for the message.\n     * @typedef {('none'|'some'|'all')} AggregatedDeliveryReceipt#DeliveryAmount\n     */\n    function AggregatedDeliveryReceipt(data) {\n        (0, _classCallCheck3.default)(this, AggregatedDeliveryReceipt);\n\n        this.state = data;\n    }\n    /**\n     * @return Maximum number of delivery events expected for the message.\n     */\n\n\n    (0, _createClass3.default)(AggregatedDeliveryReceipt, [{\n        key: \"_update\",\n        value: function _update(data) {\n            this.state = data;\n        }\n    }, {\n        key: \"_isEquals\",\n        value: function _isEquals(data) {\n            var isTotalSame = this.total === data.total;\n            var isSentSame = this.sent === data.sent;\n            var isDeliveredSame = this.delivered === data.delivered;\n            var isReadSame = this.read === data.read;\n            var isUndeliveredSame = this.undelivered === data.undelivered;\n            var isFailedSame = this.failed === data.failed;\n            return isTotalSame && isSentSame && isDeliveredSame && isReadSame && isUndeliveredSame && isFailedSame;\n        }\n    }, {\n        key: \"total\",\n        get: function get() {\n            return this.state.total;\n        }\n        /**\n         * Message considered as <b>sent</b> to a participant, if the nearest upstream carrier accepted the message.\n         *\n         * @return {@link DeliveryAmount} of participants that have <b>sent</b> delivery status for the message.\n         */\n\n    }, {\n        key: \"sent\",\n        get: function get() {\n            return this.state.sent;\n        }\n        /**\n         * Message considered as <b>delivered</b> to a participant, if Twilio has received confirmation of message\n         * delivery from the upstream carrier, and, where available, the destination handset.\n         *\n         * @return {@link DeliveryAmount} of participants that have <b>delivered</b> delivery status for the message.\n         */\n\n    }, {\n        key: \"delivered\",\n        get: function get() {\n            return this.state.delivered;\n        }\n        /**\n         * Message considered as <b>read</b> by a participant, if the message has been delivered and opened by the\n         * recipient in the conversation. The recipient must have enabled read receipts.\n         *\n         * @return {@link DeliveryAmount} of participants that have <b>read</b> delivery status for the message.\n         */\n\n    }, {\n        key: \"read\",\n        get: function get() {\n            return this.state.read;\n        }\n        /**\n         * Message considered as <b>undelivered</b> to a participant, if Twilio has received a delivery receipt\n         * indicating that the message was not delivered. This can happen for many reasons including carrier content\n         * filtering and the availability of the destination handset.\n         *\n         * @return {@link DeliveryAmount} of participants that have <b>undelivered</b> delivery status for the message.\n         */\n\n    }, {\n        key: \"undelivered\",\n        get: function get() {\n            return this.state.undelivered;\n        }\n        /**\n         * Message considered as <b>failed</b> to be delivered to a participant if the message could not be sent.\n         * This can happen for various reasons including queue overflows, account suspensions and media\n         * errors (in the case of MMS for instance). Twilio does not charge you for failed messages.\n         *\n         * @return {@link DeliveryAmount} of participants that have <b>failed</b> delivery status for the message.\n         */\n\n    }, {\n        key: \"failed\",\n        get: function get() {\n            return this.state.failed;\n        }\n    }]);\n    return AggregatedDeliveryReceipt;\n}();\n\nexports.AggregatedDeliveryReceipt = AggregatedDeliveryReceipt;"]},"metadata":{},"sourceType":"script"}